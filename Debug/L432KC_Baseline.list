
L432KC_Baseline.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007298  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b0  08007428  08007428  00017428  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080075d8  080075d8  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080075d8  080075d8  000175d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080075e0  080075e0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080075e0  080075e0  000175e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080075e4  080075e4  000175e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080075e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000020c0  20000074  0800765c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002134  0800765c  00022134  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020fec  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000045ae  00000000  00000000  00041090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001628  00000000  00000000  00045640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001478  00000000  00000000  00046c68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000249c1  00000000  00000000  000480e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a140  00000000  00000000  0006caa1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d8334  00000000  00000000  00086be1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015ef15  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f10  00000000  00000000  0015ef68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007410 	.word	0x08007410

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08007410 	.word	0x08007410

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 800057c:	bf00      	nop
 800057e:	46bd      	mov	sp, r7
 8000580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000584:	4770      	bx	lr

08000586 <vApplicationTickHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 3 */
__weak void vApplicationTickHook( void )
{
 8000586:	b480      	push	{r7}
 8000588:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
}
 800058a:	bf00      	nop
 800058c:	46bd      	mov	sp, r7
 800058e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000592:	4770      	bx	lr

08000594 <vApplicationStackOverflowHook>:
/* USER CODE END 3 */

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000594:	b480      	push	{r7}
 8000596:	b083      	sub	sp, #12
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
 800059c:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 800059e:	bf00      	nop
 80005a0:	370c      	adds	r7, #12
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr

080005aa <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
void vApplicationMallocFailedHook(void)
{
 80005aa:	b480      	push	{r7}
 80005ac:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 80005ae:	bf00      	nop
 80005b0:	46bd      	mov	sp, r7
 80005b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b6:	4770      	bx	lr

080005b8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005b8:	b480      	push	{r7}
 80005ba:	b085      	sub	sp, #20
 80005bc:	af00      	add	r7, sp, #0
 80005be:	60f8      	str	r0, [r7, #12]
 80005c0:	60b9      	str	r1, [r7, #8]
 80005c2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	4a07      	ldr	r2, [pc, #28]	; (80005e4 <vApplicationGetIdleTaskMemory+0x2c>)
 80005c8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005ca:	68bb      	ldr	r3, [r7, #8]
 80005cc:	4a06      	ldr	r2, [pc, #24]	; (80005e8 <vApplicationGetIdleTaskMemory+0x30>)
 80005ce:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	2280      	movs	r2, #128	; 0x80
 80005d4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005d6:	bf00      	nop
 80005d8:	3714      	adds	r7, #20
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	20000090 	.word	0x20000090
 80005e8:	20000154 	.word	0x20000154

080005ec <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 80005ec:	b480      	push	{r7}
 80005ee:	b085      	sub	sp, #20
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	60f8      	str	r0, [r7, #12]
 80005f4:	60b9      	str	r1, [r7, #8]
 80005f6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	4a07      	ldr	r2, [pc, #28]	; (8000618 <vApplicationGetTimerTaskMemory+0x2c>)
 80005fc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 80005fe:	68bb      	ldr	r3, [r7, #8]
 8000600:	4a06      	ldr	r2, [pc, #24]	; (800061c <vApplicationGetTimerTaskMemory+0x30>)
 8000602:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	f44f 7280 	mov.w	r2, #256	; 0x100
 800060a:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800060c:	bf00      	nop
 800060e:	3714      	adds	r7, #20
 8000610:	46bd      	mov	sp, r7
 8000612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000616:	4770      	bx	lr
 8000618:	20000354 	.word	0x20000354
 800061c:	20000418 	.word	0x20000418

08000620 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b088      	sub	sp, #32
 8000624:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000626:	f107 030c 	add.w	r3, r7, #12
 800062a:	2200      	movs	r2, #0
 800062c:	601a      	str	r2, [r3, #0]
 800062e:	605a      	str	r2, [r3, #4]
 8000630:	609a      	str	r2, [r3, #8]
 8000632:	60da      	str	r2, [r3, #12]
 8000634:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000636:	4b1d      	ldr	r3, [pc, #116]	; (80006ac <MX_GPIO_Init+0x8c>)
 8000638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800063a:	4a1c      	ldr	r2, [pc, #112]	; (80006ac <MX_GPIO_Init+0x8c>)
 800063c:	f043 0304 	orr.w	r3, r3, #4
 8000640:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000642:	4b1a      	ldr	r3, [pc, #104]	; (80006ac <MX_GPIO_Init+0x8c>)
 8000644:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000646:	f003 0304 	and.w	r3, r3, #4
 800064a:	60bb      	str	r3, [r7, #8]
 800064c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800064e:	4b17      	ldr	r3, [pc, #92]	; (80006ac <MX_GPIO_Init+0x8c>)
 8000650:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000652:	4a16      	ldr	r2, [pc, #88]	; (80006ac <MX_GPIO_Init+0x8c>)
 8000654:	f043 0301 	orr.w	r3, r3, #1
 8000658:	64d3      	str	r3, [r2, #76]	; 0x4c
 800065a:	4b14      	ldr	r3, [pc, #80]	; (80006ac <MX_GPIO_Init+0x8c>)
 800065c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800065e:	f003 0301 	and.w	r3, r3, #1
 8000662:	607b      	str	r3, [r7, #4]
 8000664:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000666:	4b11      	ldr	r3, [pc, #68]	; (80006ac <MX_GPIO_Init+0x8c>)
 8000668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800066a:	4a10      	ldr	r2, [pc, #64]	; (80006ac <MX_GPIO_Init+0x8c>)
 800066c:	f043 0302 	orr.w	r3, r3, #2
 8000670:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000672:	4b0e      	ldr	r3, [pc, #56]	; (80006ac <MX_GPIO_Init+0x8c>)
 8000674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000676:	f003 0302 	and.w	r3, r3, #2
 800067a:	603b      	str	r3, [r7, #0]
 800067c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800067e:	2200      	movs	r2, #0
 8000680:	2108      	movs	r1, #8
 8000682:	480b      	ldr	r0, [pc, #44]	; (80006b0 <MX_GPIO_Init+0x90>)
 8000684:	f000 fec6 	bl	8001414 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000688:	2308      	movs	r3, #8
 800068a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800068c:	2301      	movs	r3, #1
 800068e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000690:	2300      	movs	r3, #0
 8000692:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000694:	2300      	movs	r3, #0
 8000696:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000698:	f107 030c 	add.w	r3, r7, #12
 800069c:	4619      	mov	r1, r3
 800069e:	4804      	ldr	r0, [pc, #16]	; (80006b0 <MX_GPIO_Init+0x90>)
 80006a0:	f000 fd4e 	bl	8001140 <HAL_GPIO_Init>

}
 80006a4:	bf00      	nop
 80006a6:	3720      	adds	r7, #32
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	40021000 	.word	0x40021000
 80006b0:	48000400 	.word	0x48000400

080006b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ba:	f000 fc27 	bl	8000f0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006be:	f000 f813 	bl	80006e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006c2:	f7ff ffad 	bl	8000620 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006c6:	f000 f9e5 	bl	8000a94 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 80006ca:	f000 f98d 	bl	80009e8 <MX_TIM6_Init>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
#else
    uint32_t init_params = 0U;
 80006ce:	2300      	movs	r3, #0
 80006d0:	607b      	str	r3, [r7, #4]
    /* Launch HALs */

    /* Launch drivers */

    /* Launch services */
    launch_heartbeat_service((void *)&init_params);
 80006d2:	1d3b      	adds	r3, r7, #4
 80006d4:	4618      	mov	r0, r3
 80006d6:	f006 f8e9 	bl	80068ac <launch_heartbeat_service>
    launch_timekeeper_service((void *)&init_params);
 80006da:	1d3b      	adds	r3, r7, #4
 80006dc:	4618      	mov	r0, r3
 80006de:	f006 f945 	bl	800696c <launch_timekeeper_service>

    vTaskStartScheduler();
 80006e2:	f003 fe89 	bl	80043f8 <vTaskStartScheduler>
#endif



  while (1)
 80006e6:	e7fe      	b.n	80006e6 <main+0x32>

080006e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b096      	sub	sp, #88	; 0x58
 80006ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ee:	f107 0314 	add.w	r3, r7, #20
 80006f2:	2244      	movs	r2, #68	; 0x44
 80006f4:	2100      	movs	r1, #0
 80006f6:	4618      	mov	r0, r3
 80006f8:	f006 fa00 	bl	8006afc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006fc:	463b      	mov	r3, r7
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	605a      	str	r2, [r3, #4]
 8000704:	609a      	str	r2, [r3, #8]
 8000706:	60da      	str	r2, [r3, #12]
 8000708:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800070a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800070e:	f000 feb7 	bl	8001480 <HAL_PWREx_ControlVoltageScaling>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000718:	f000 f85a 	bl	80007d0 <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800071c:	f000 fe92 	bl	8001444 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000720:	4b21      	ldr	r3, [pc, #132]	; (80007a8 <SystemClock_Config+0xc0>)
 8000722:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000726:	4a20      	ldr	r2, [pc, #128]	; (80007a8 <SystemClock_Config+0xc0>)
 8000728:	f023 0318 	bic.w	r3, r3, #24
 800072c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000730:	2314      	movs	r3, #20
 8000732:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000734:	2301      	movs	r3, #1
 8000736:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000738:	2301      	movs	r3, #1
 800073a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800073c:	2300      	movs	r3, #0
 800073e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000740:	2360      	movs	r3, #96	; 0x60
 8000742:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000744:	2302      	movs	r3, #2
 8000746:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000748:	2301      	movs	r3, #1
 800074a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800074c:	2301      	movs	r3, #1
 800074e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000750:	2328      	movs	r3, #40	; 0x28
 8000752:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000754:	2307      	movs	r3, #7
 8000756:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000758:	2302      	movs	r3, #2
 800075a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800075c:	2302      	movs	r3, #2
 800075e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000760:	f107 0314 	add.w	r3, r7, #20
 8000764:	4618      	mov	r0, r3
 8000766:	f000 fee1 	bl	800152c <HAL_RCC_OscConfig>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000770:	f000 f82e 	bl	80007d0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000774:	230f      	movs	r3, #15
 8000776:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000778:	2303      	movs	r3, #3
 800077a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800077c:	2300      	movs	r3, #0
 800077e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000780:	2300      	movs	r3, #0
 8000782:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000784:	2300      	movs	r3, #0
 8000786:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000788:	463b      	mov	r3, r7
 800078a:	2104      	movs	r1, #4
 800078c:	4618      	mov	r0, r3
 800078e:	f001 faed 	bl	8001d6c <HAL_RCC_ClockConfig>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000798:	f000 f81a 	bl	80007d0 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800079c:	f001 ff12 	bl	80025c4 <HAL_RCCEx_EnableMSIPLLMode>
}
 80007a0:	bf00      	nop
 80007a2:	3758      	adds	r7, #88	; 0x58
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	40021000 	.word	0x40021000

080007ac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4a04      	ldr	r2, [pc, #16]	; (80007cc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007ba:	4293      	cmp	r3, r2
 80007bc:	d101      	bne.n	80007c2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007be:	f000 fbbd 	bl	8000f3c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007c2:	bf00      	nop
 80007c4:	3708      	adds	r7, #8
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	40001400 	.word	0x40001400

080007d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007d4:	b672      	cpsid	i
}
 80007d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007d8:	e7fe      	b.n	80007d8 <Error_Handler+0x8>
	...

080007dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007e2:	4b11      	ldr	r3, [pc, #68]	; (8000828 <HAL_MspInit+0x4c>)
 80007e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007e6:	4a10      	ldr	r2, [pc, #64]	; (8000828 <HAL_MspInit+0x4c>)
 80007e8:	f043 0301 	orr.w	r3, r3, #1
 80007ec:	6613      	str	r3, [r2, #96]	; 0x60
 80007ee:	4b0e      	ldr	r3, [pc, #56]	; (8000828 <HAL_MspInit+0x4c>)
 80007f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007f2:	f003 0301 	and.w	r3, r3, #1
 80007f6:	607b      	str	r3, [r7, #4]
 80007f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007fa:	4b0b      	ldr	r3, [pc, #44]	; (8000828 <HAL_MspInit+0x4c>)
 80007fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007fe:	4a0a      	ldr	r2, [pc, #40]	; (8000828 <HAL_MspInit+0x4c>)
 8000800:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000804:	6593      	str	r3, [r2, #88]	; 0x58
 8000806:	4b08      	ldr	r3, [pc, #32]	; (8000828 <HAL_MspInit+0x4c>)
 8000808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800080a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800080e:	603b      	str	r3, [r7, #0]
 8000810:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000812:	2200      	movs	r2, #0
 8000814:	210f      	movs	r1, #15
 8000816:	f06f 0001 	mvn.w	r0, #1
 800081a:	f000 fc67 	bl	80010ec <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800081e:	bf00      	nop
 8000820:	3708      	adds	r7, #8
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	40021000 	.word	0x40021000

0800082c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b08c      	sub	sp, #48	; 0x30
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000834:	2300      	movs	r3, #0
 8000836:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000838:	2300      	movs	r3, #0
 800083a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 800083c:	2200      	movs	r2, #0
 800083e:	6879      	ldr	r1, [r7, #4]
 8000840:	2037      	movs	r0, #55	; 0x37
 8000842:	f000 fc53 	bl	80010ec <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000846:	2037      	movs	r0, #55	; 0x37
 8000848:	f000 fc6c 	bl	8001124 <HAL_NVIC_EnableIRQ>

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 800084c:	4b1e      	ldr	r3, [pc, #120]	; (80008c8 <HAL_InitTick+0x9c>)
 800084e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000850:	4a1d      	ldr	r2, [pc, #116]	; (80008c8 <HAL_InitTick+0x9c>)
 8000852:	f043 0320 	orr.w	r3, r3, #32
 8000856:	6593      	str	r3, [r2, #88]	; 0x58
 8000858:	4b1b      	ldr	r3, [pc, #108]	; (80008c8 <HAL_InitTick+0x9c>)
 800085a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800085c:	f003 0320 	and.w	r3, r3, #32
 8000860:	60fb      	str	r3, [r7, #12]
 8000862:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000864:	f107 0210 	add.w	r2, r7, #16
 8000868:	f107 0314 	add.w	r3, r7, #20
 800086c:	4611      	mov	r1, r2
 800086e:	4618      	mov	r0, r3
 8000870:	f001 fc22 	bl	80020b8 <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000874:	f001 fbf4 	bl	8002060 <HAL_RCC_GetPCLK1Freq>
 8000878:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800087a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800087c:	4a13      	ldr	r2, [pc, #76]	; (80008cc <HAL_InitTick+0xa0>)
 800087e:	fba2 2303 	umull	r2, r3, r2, r3
 8000882:	0c9b      	lsrs	r3, r3, #18
 8000884:	3b01      	subs	r3, #1
 8000886:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8000888:	4b11      	ldr	r3, [pc, #68]	; (80008d0 <HAL_InitTick+0xa4>)
 800088a:	4a12      	ldr	r2, [pc, #72]	; (80008d4 <HAL_InitTick+0xa8>)
 800088c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 800088e:	4b10      	ldr	r3, [pc, #64]	; (80008d0 <HAL_InitTick+0xa4>)
 8000890:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000894:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8000896:	4a0e      	ldr	r2, [pc, #56]	; (80008d0 <HAL_InitTick+0xa4>)
 8000898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800089a:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 800089c:	4b0c      	ldr	r3, [pc, #48]	; (80008d0 <HAL_InitTick+0xa4>)
 800089e:	2200      	movs	r2, #0
 80008a0:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008a2:	4b0b      	ldr	r3, [pc, #44]	; (80008d0 <HAL_InitTick+0xa4>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 80008a8:	4809      	ldr	r0, [pc, #36]	; (80008d0 <HAL_InitTick+0xa4>)
 80008aa:	f001 ff8d 	bl	80027c8 <HAL_TIM_Base_Init>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d104      	bne.n	80008be <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 80008b4:	4806      	ldr	r0, [pc, #24]	; (80008d0 <HAL_InitTick+0xa4>)
 80008b6:	f001 ffdf 	bl	8002878 <HAL_TIM_Base_Start_IT>
 80008ba:	4603      	mov	r3, r0
 80008bc:	e000      	b.n	80008c0 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80008be:	2301      	movs	r3, #1
}
 80008c0:	4618      	mov	r0, r3
 80008c2:	3730      	adds	r7, #48	; 0x30
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	40021000 	.word	0x40021000
 80008cc:	431bde83 	.word	0x431bde83
 80008d0:	20001f1c 	.word	0x20001f1c
 80008d4:	40001400 	.word	0x40001400

080008d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008dc:	e7fe      	b.n	80008dc <NMI_Handler+0x4>

080008de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008de:	b480      	push	{r7}
 80008e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008e2:	e7fe      	b.n	80008e2 <HardFault_Handler+0x4>

080008e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008e8:	e7fe      	b.n	80008e8 <MemManage_Handler+0x4>

080008ea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008ea:	b480      	push	{r7}
 80008ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008ee:	e7fe      	b.n	80008ee <BusFault_Handler+0x4>

080008f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008f4:	e7fe      	b.n	80008f4 <UsageFault_Handler+0x4>

080008f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008f6:	b480      	push	{r7}
 80008f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008fa:	bf00      	nop
 80008fc:	46bd      	mov	sp, r7
 80008fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000902:	4770      	bx	lr

08000904 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000908:	4802      	ldr	r0, [pc, #8]	; (8000914 <TIM7_IRQHandler+0x10>)
 800090a:	f002 f809 	bl	8002920 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800090e:	bf00      	nop
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	20001f1c 	.word	0x20001f1c

08000918 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b086      	sub	sp, #24
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000920:	4a14      	ldr	r2, [pc, #80]	; (8000974 <_sbrk+0x5c>)
 8000922:	4b15      	ldr	r3, [pc, #84]	; (8000978 <_sbrk+0x60>)
 8000924:	1ad3      	subs	r3, r2, r3
 8000926:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000928:	697b      	ldr	r3, [r7, #20]
 800092a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800092c:	4b13      	ldr	r3, [pc, #76]	; (800097c <_sbrk+0x64>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	2b00      	cmp	r3, #0
 8000932:	d102      	bne.n	800093a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000934:	4b11      	ldr	r3, [pc, #68]	; (800097c <_sbrk+0x64>)
 8000936:	4a12      	ldr	r2, [pc, #72]	; (8000980 <_sbrk+0x68>)
 8000938:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800093a:	4b10      	ldr	r3, [pc, #64]	; (800097c <_sbrk+0x64>)
 800093c:	681a      	ldr	r2, [r3, #0]
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	4413      	add	r3, r2
 8000942:	693a      	ldr	r2, [r7, #16]
 8000944:	429a      	cmp	r2, r3
 8000946:	d207      	bcs.n	8000958 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000948:	f006 f884 	bl	8006a54 <__errno>
 800094c:	4603      	mov	r3, r0
 800094e:	220c      	movs	r2, #12
 8000950:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000952:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000956:	e009      	b.n	800096c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000958:	4b08      	ldr	r3, [pc, #32]	; (800097c <_sbrk+0x64>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800095e:	4b07      	ldr	r3, [pc, #28]	; (800097c <_sbrk+0x64>)
 8000960:	681a      	ldr	r2, [r3, #0]
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	4413      	add	r3, r2
 8000966:	4a05      	ldr	r2, [pc, #20]	; (800097c <_sbrk+0x64>)
 8000968:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800096a:	68fb      	ldr	r3, [r7, #12]
}
 800096c:	4618      	mov	r0, r3
 800096e:	3718      	adds	r7, #24
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	2000c000 	.word	0x2000c000
 8000978:	00000400 	.word	0x00000400
 800097c:	20000818 	.word	0x20000818
 8000980:	20002138 	.word	0x20002138

08000984 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000988:	4b15      	ldr	r3, [pc, #84]	; (80009e0 <SystemInit+0x5c>)
 800098a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800098e:	4a14      	ldr	r2, [pc, #80]	; (80009e0 <SystemInit+0x5c>)
 8000990:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000994:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000998:	4b12      	ldr	r3, [pc, #72]	; (80009e4 <SystemInit+0x60>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4a11      	ldr	r2, [pc, #68]	; (80009e4 <SystemInit+0x60>)
 800099e:	f043 0301 	orr.w	r3, r3, #1
 80009a2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80009a4:	4b0f      	ldr	r3, [pc, #60]	; (80009e4 <SystemInit+0x60>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80009aa:	4b0e      	ldr	r3, [pc, #56]	; (80009e4 <SystemInit+0x60>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	4a0d      	ldr	r2, [pc, #52]	; (80009e4 <SystemInit+0x60>)
 80009b0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80009b4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80009b8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80009ba:	4b0a      	ldr	r3, [pc, #40]	; (80009e4 <SystemInit+0x60>)
 80009bc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80009c0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80009c2:	4b08      	ldr	r3, [pc, #32]	; (80009e4 <SystemInit+0x60>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	4a07      	ldr	r2, [pc, #28]	; (80009e4 <SystemInit+0x60>)
 80009c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80009cc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80009ce:	4b05      	ldr	r3, [pc, #20]	; (80009e4 <SystemInit+0x60>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	619a      	str	r2, [r3, #24]
}
 80009d4:	bf00      	nop
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	e000ed00 	.word	0xe000ed00
 80009e4:	40021000 	.word	0x40021000

080009e8 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b084      	sub	sp, #16
 80009ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009ee:	1d3b      	adds	r3, r7, #4
 80009f0:	2200      	movs	r2, #0
 80009f2:	601a      	str	r2, [r3, #0]
 80009f4:	605a      	str	r2, [r3, #4]
 80009f6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80009f8:	4b14      	ldr	r3, [pc, #80]	; (8000a4c <MX_TIM6_Init+0x64>)
 80009fa:	4a15      	ldr	r2, [pc, #84]	; (8000a50 <MX_TIM6_Init+0x68>)
 80009fc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 80009fe:	4b13      	ldr	r3, [pc, #76]	; (8000a4c <MX_TIM6_Init+0x64>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a04:	4b11      	ldr	r3, [pc, #68]	; (8000a4c <MX_TIM6_Init+0x64>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8000a0a:	4b10      	ldr	r3, [pc, #64]	; (8000a4c <MX_TIM6_Init+0x64>)
 8000a0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a10:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a12:	4b0e      	ldr	r3, [pc, #56]	; (8000a4c <MX_TIM6_Init+0x64>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000a18:	480c      	ldr	r0, [pc, #48]	; (8000a4c <MX_TIM6_Init+0x64>)
 8000a1a:	f001 fed5 	bl	80027c8 <HAL_TIM_Base_Init>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000a24:	f7ff fed4 	bl	80007d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000a30:	1d3b      	adds	r3, r7, #4
 8000a32:	4619      	mov	r1, r3
 8000a34:	4805      	ldr	r0, [pc, #20]	; (8000a4c <MX_TIM6_Init+0x64>)
 8000a36:	f002 f91f 	bl	8002c78 <HAL_TIMEx_MasterConfigSynchronization>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000a40:	f7ff fec6 	bl	80007d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000a44:	bf00      	nop
 8000a46:	3710      	adds	r7, #16
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	20001f68 	.word	0x20001f68
 8000a50:	40001000 	.word	0x40001000

08000a54 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b085      	sub	sp, #20
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4a0a      	ldr	r2, [pc, #40]	; (8000a8c <HAL_TIM_Base_MspInit+0x38>)
 8000a62:	4293      	cmp	r3, r2
 8000a64:	d10b      	bne.n	8000a7e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000a66:	4b0a      	ldr	r3, [pc, #40]	; (8000a90 <HAL_TIM_Base_MspInit+0x3c>)
 8000a68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a6a:	4a09      	ldr	r2, [pc, #36]	; (8000a90 <HAL_TIM_Base_MspInit+0x3c>)
 8000a6c:	f043 0310 	orr.w	r3, r3, #16
 8000a70:	6593      	str	r3, [r2, #88]	; 0x58
 8000a72:	4b07      	ldr	r3, [pc, #28]	; (8000a90 <HAL_TIM_Base_MspInit+0x3c>)
 8000a74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a76:	f003 0310 	and.w	r3, r3, #16
 8000a7a:	60fb      	str	r3, [r7, #12]
 8000a7c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8000a7e:	bf00      	nop
 8000a80:	3714      	adds	r7, #20
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	40001000 	.word	0x40001000
 8000a90:	40021000 	.word	0x40021000

08000a94 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a98:	4b14      	ldr	r3, [pc, #80]	; (8000aec <MX_USART2_UART_Init+0x58>)
 8000a9a:	4a15      	ldr	r2, [pc, #84]	; (8000af0 <MX_USART2_UART_Init+0x5c>)
 8000a9c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a9e:	4b13      	ldr	r3, [pc, #76]	; (8000aec <MX_USART2_UART_Init+0x58>)
 8000aa0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000aa4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000aa6:	4b11      	ldr	r3, [pc, #68]	; (8000aec <MX_USART2_UART_Init+0x58>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000aac:	4b0f      	ldr	r3, [pc, #60]	; (8000aec <MX_USART2_UART_Init+0x58>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ab2:	4b0e      	ldr	r3, [pc, #56]	; (8000aec <MX_USART2_UART_Init+0x58>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ab8:	4b0c      	ldr	r3, [pc, #48]	; (8000aec <MX_USART2_UART_Init+0x58>)
 8000aba:	220c      	movs	r2, #12
 8000abc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000abe:	4b0b      	ldr	r3, [pc, #44]	; (8000aec <MX_USART2_UART_Init+0x58>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ac4:	4b09      	ldr	r3, [pc, #36]	; (8000aec <MX_USART2_UART_Init+0x58>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000aca:	4b08      	ldr	r3, [pc, #32]	; (8000aec <MX_USART2_UART_Init+0x58>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ad0:	4b06      	ldr	r3, [pc, #24]	; (8000aec <MX_USART2_UART_Init+0x58>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ad6:	4805      	ldr	r0, [pc, #20]	; (8000aec <MX_USART2_UART_Init+0x58>)
 8000ad8:	f002 f952 	bl	8002d80 <HAL_UART_Init>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000ae2:	f7ff fe75 	bl	80007d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ae6:	bf00      	nop
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	20001fb4 	.word	0x20001fb4
 8000af0:	40004400 	.word	0x40004400

08000af4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b09e      	sub	sp, #120	; 0x78
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000afc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000b00:	2200      	movs	r2, #0
 8000b02:	601a      	str	r2, [r3, #0]
 8000b04:	605a      	str	r2, [r3, #4]
 8000b06:	609a      	str	r2, [r3, #8]
 8000b08:	60da      	str	r2, [r3, #12]
 8000b0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b0c:	f107 0310 	add.w	r3, r7, #16
 8000b10:	2254      	movs	r2, #84	; 0x54
 8000b12:	2100      	movs	r1, #0
 8000b14:	4618      	mov	r0, r3
 8000b16:	f005 fff1 	bl	8006afc <memset>
  if(uartHandle->Instance==USART2)
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	4a28      	ldr	r2, [pc, #160]	; (8000bc0 <HAL_UART_MspInit+0xcc>)
 8000b20:	4293      	cmp	r3, r2
 8000b22:	d148      	bne.n	8000bb6 <HAL_UART_MspInit+0xc2>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000b24:	2302      	movs	r3, #2
 8000b26:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b2c:	f107 0310 	add.w	r3, r7, #16
 8000b30:	4618      	mov	r0, r3
 8000b32:	f001 fb53 	bl	80021dc <HAL_RCCEx_PeriphCLKConfig>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b3c:	f7ff fe48 	bl	80007d0 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b40:	4b20      	ldr	r3, [pc, #128]	; (8000bc4 <HAL_UART_MspInit+0xd0>)
 8000b42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b44:	4a1f      	ldr	r2, [pc, #124]	; (8000bc4 <HAL_UART_MspInit+0xd0>)
 8000b46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b4a:	6593      	str	r3, [r2, #88]	; 0x58
 8000b4c:	4b1d      	ldr	r3, [pc, #116]	; (8000bc4 <HAL_UART_MspInit+0xd0>)
 8000b4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b54:	60fb      	str	r3, [r7, #12]
 8000b56:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b58:	4b1a      	ldr	r3, [pc, #104]	; (8000bc4 <HAL_UART_MspInit+0xd0>)
 8000b5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b5c:	4a19      	ldr	r2, [pc, #100]	; (8000bc4 <HAL_UART_MspInit+0xd0>)
 8000b5e:	f043 0301 	orr.w	r3, r3, #1
 8000b62:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b64:	4b17      	ldr	r3, [pc, #92]	; (8000bc4 <HAL_UART_MspInit+0xd0>)
 8000b66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b68:	f003 0301 	and.w	r3, r3, #1
 8000b6c:	60bb      	str	r3, [r7, #8]
 8000b6e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000b70:	2304      	movs	r3, #4
 8000b72:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b74:	2302      	movs	r3, #2
 8000b76:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b7c:	2303      	movs	r3, #3
 8000b7e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b80:	2307      	movs	r3, #7
 8000b82:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000b84:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000b88:	4619      	mov	r1, r3
 8000b8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b8e:	f000 fad7 	bl	8001140 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000b92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b96:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b98:	2302      	movs	r3, #2
 8000b9a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ba0:	2303      	movs	r3, #3
 8000ba2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000ba4:	2303      	movs	r3, #3
 8000ba6:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000ba8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000bac:	4619      	mov	r1, r3
 8000bae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bb2:	f000 fac5 	bl	8001140 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000bb6:	bf00      	nop
 8000bb8:	3778      	adds	r7, #120	; 0x78
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	40004400 	.word	0x40004400
 8000bc4:	40021000 	.word	0x40021000

08000bc8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000bc8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c00 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bcc:	f7ff feda 	bl	8000984 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000bd0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000bd2:	e003      	b.n	8000bdc <LoopCopyDataInit>

08000bd4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000bd4:	4b0b      	ldr	r3, [pc, #44]	; (8000c04 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000bd6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000bd8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000bda:	3104      	adds	r1, #4

08000bdc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000bdc:	480a      	ldr	r0, [pc, #40]	; (8000c08 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000bde:	4b0b      	ldr	r3, [pc, #44]	; (8000c0c <LoopForever+0xe>)
	adds	r2, r0, r1
 8000be0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000be2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000be4:	d3f6      	bcc.n	8000bd4 <CopyDataInit>
	ldr	r2, =_sbss
 8000be6:	4a0a      	ldr	r2, [pc, #40]	; (8000c10 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000be8:	e002      	b.n	8000bf0 <LoopFillZerobss>

08000bea <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000bea:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000bec:	f842 3b04 	str.w	r3, [r2], #4

08000bf0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000bf0:	4b08      	ldr	r3, [pc, #32]	; (8000c14 <LoopForever+0x16>)
	cmp	r2, r3
 8000bf2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000bf4:	d3f9      	bcc.n	8000bea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bf6:	f005 ff33 	bl	8006a60 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bfa:	f7ff fd5b 	bl	80006b4 <main>

08000bfe <LoopForever>:

LoopForever:
    b LoopForever
 8000bfe:	e7fe      	b.n	8000bfe <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c00:	2000c000 	.word	0x2000c000
	ldr	r3, =_sidata
 8000c04:	080075e8 	.word	0x080075e8
	ldr	r0, =_sdata
 8000c08:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000c0c:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 8000c10:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 8000c14:	20002134 	.word	0x20002134

08000c18 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c18:	e7fe      	b.n	8000c18 <ADC1_IRQHandler>

08000c1a <mbedtls_base64_cond_assign_uchar>:
/*
 * Constant flow conditional assignment to unsigned char
 */
static void mbedtls_base64_cond_assign_uchar( unsigned char * dest, const unsigned char * const src,
                                       unsigned char condition )
{
 8000c1a:	b480      	push	{r7}
 8000c1c:	b087      	sub	sp, #28
 8000c1e:	af00      	add	r7, sp, #0
 8000c20:	60f8      	str	r0, [r7, #12]
 8000c22:	60b9      	str	r1, [r7, #8]
 8000c24:	4613      	mov	r3, r2
 8000c26:	71fb      	strb	r3, [r7, #7]
#pragma warning( push )
#pragma warning( disable : 4146 )
#endif

    /* Generate bitmask from condition, mask will either be 0xFF or 0 */
    unsigned char mask = ( condition | -condition );
 8000c28:	79fb      	ldrb	r3, [r7, #7]
 8000c2a:	425b      	negs	r3, r3
 8000c2c:	b2db      	uxtb	r3, r3
 8000c2e:	b25a      	sxtb	r2, r3
 8000c30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c34:	4313      	orrs	r3, r2
 8000c36:	b25b      	sxtb	r3, r3
 8000c38:	75fb      	strb	r3, [r7, #23]
    mask >>= 7;
 8000c3a:	7dfb      	ldrb	r3, [r7, #23]
 8000c3c:	09db      	lsrs	r3, r3, #7
 8000c3e:	75fb      	strb	r3, [r7, #23]
    mask = -mask;
 8000c40:	7dfb      	ldrb	r3, [r7, #23]
 8000c42:	425b      	negs	r3, r3
 8000c44:	75fb      	strb	r3, [r7, #23]

#if defined(_MSC_VER)
#pragma warning( pop )
#endif

    *dest = ( ( *src ) & mask ) | ( ( *dest ) & ~mask );
 8000c46:	68bb      	ldr	r3, [r7, #8]
 8000c48:	781a      	ldrb	r2, [r3, #0]
 8000c4a:	7dfb      	ldrb	r3, [r7, #23]
 8000c4c:	4013      	ands	r3, r2
 8000c4e:	b2db      	uxtb	r3, r3
 8000c50:	b25a      	sxtb	r2, r3
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	b259      	sxtb	r1, r3
 8000c58:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000c5c:	43db      	mvns	r3, r3
 8000c5e:	b25b      	sxtb	r3, r3
 8000c60:	400b      	ands	r3, r1
 8000c62:	b25b      	sxtb	r3, r3
 8000c64:	4313      	orrs	r3, r2
 8000c66:	b25b      	sxtb	r3, r3
 8000c68:	b2da      	uxtb	r2, r3
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	701a      	strb	r2, [r3, #0]
}
 8000c6e:	bf00      	nop
 8000c70:	371c      	adds	r7, #28
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr

08000c7a <mbedtls_base64_eq>:

/*
 * Constant flow check for equality
 */
static unsigned char mbedtls_base64_eq( size_t in_a, size_t in_b )
{
 8000c7a:	b480      	push	{r7}
 8000c7c:	b085      	sub	sp, #20
 8000c7e:	af00      	add	r7, sp, #0
 8000c80:	6078      	str	r0, [r7, #4]
 8000c82:	6039      	str	r1, [r7, #0]
    size_t difference = in_a ^ in_b;
 8000c84:	687a      	ldr	r2, [r7, #4]
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	4053      	eors	r3, r2
 8000c8a:	60fb      	str	r3, [r7, #12]
#if defined(_MSC_VER)
#pragma warning( push )
#pragma warning( disable : 4146 )
#endif

    difference |= -difference;
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	425b      	negs	r3, r3
 8000c90:	68fa      	ldr	r2, [r7, #12]
 8000c92:	4313      	orrs	r3, r2
 8000c94:	60fb      	str	r3, [r7, #12]
#if defined(_MSC_VER)
#pragma warning( pop )
#endif

    /* cope with the varying size of size_t per platform */
    difference >>= ( sizeof( difference ) * 8 - 1 );
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	0fdb      	lsrs	r3, r3, #31
 8000c9a:	60fb      	str	r3, [r7, #12]

    return (unsigned char) ( 1 ^ difference );
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	b2db      	uxtb	r3, r3
 8000ca0:	f083 0301 	eor.w	r3, r3, #1
 8000ca4:	b2db      	uxtb	r3, r3
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	3714      	adds	r7, #20
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr

08000cb2 <mbedtls_base64_table_lookup>:
/*
 * Constant flow lookup into table.
 */
static unsigned char mbedtls_base64_table_lookup( const unsigned char * const table,
                                                 const size_t table_size, const size_t table_index )
{
 8000cb2:	b590      	push	{r4, r7, lr}
 8000cb4:	b087      	sub	sp, #28
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	60f8      	str	r0, [r7, #12]
 8000cba:	60b9      	str	r1, [r7, #8]
 8000cbc:	607a      	str	r2, [r7, #4]
    size_t i;
    unsigned char result = 0;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	74fb      	strb	r3, [r7, #19]

    for( i = 0; i < table_size; ++i )
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	617b      	str	r3, [r7, #20]
 8000cc6:	e011      	b.n	8000cec <mbedtls_base64_table_lookup+0x3a>
    {
        mbedtls_base64_cond_assign_uchar( &result, &table[i], mbedtls_base64_eq( i, table_index ) );
 8000cc8:	68fa      	ldr	r2, [r7, #12]
 8000cca:	697b      	ldr	r3, [r7, #20]
 8000ccc:	18d4      	adds	r4, r2, r3
 8000cce:	6879      	ldr	r1, [r7, #4]
 8000cd0:	6978      	ldr	r0, [r7, #20]
 8000cd2:	f7ff ffd2 	bl	8000c7a <mbedtls_base64_eq>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	461a      	mov	r2, r3
 8000cda:	f107 0313 	add.w	r3, r7, #19
 8000cde:	4621      	mov	r1, r4
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f7ff ff9a 	bl	8000c1a <mbedtls_base64_cond_assign_uchar>
    for( i = 0; i < table_size; ++i )
 8000ce6:	697b      	ldr	r3, [r7, #20]
 8000ce8:	3301      	adds	r3, #1
 8000cea:	617b      	str	r3, [r7, #20]
 8000cec:	697a      	ldr	r2, [r7, #20]
 8000cee:	68bb      	ldr	r3, [r7, #8]
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	d3e9      	bcc.n	8000cc8 <mbedtls_base64_table_lookup+0x16>
    }

    return result;
 8000cf4:	7cfb      	ldrb	r3, [r7, #19]
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	371c      	adds	r7, #28
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd90      	pop	{r4, r7, pc}
	...

08000d00 <mbedtls_base64_encode>:
/*
 * Encode a buffer into base64 format
 */
int mbedtls_base64_encode( unsigned char *dst, size_t dlen, size_t *olen,
                   const unsigned char *src, size_t slen )
{
 8000d00:	b590      	push	{r4, r7, lr}
 8000d02:	b08b      	sub	sp, #44	; 0x2c
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	60f8      	str	r0, [r7, #12]
 8000d08:	60b9      	str	r1, [r7, #8]
 8000d0a:	607a      	str	r2, [r7, #4]
 8000d0c:	603b      	str	r3, [r7, #0]
    size_t i, n;
    int C1, C2, C3;
    unsigned char *p;

    if( slen == 0 )
 8000d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d104      	bne.n	8000d1e <mbedtls_base64_encode+0x1e>
    {
        *olen = 0;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	2200      	movs	r2, #0
 8000d18:	601a      	str	r2, [r3, #0]
        return( 0 );
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	e0ed      	b.n	8000efa <mbedtls_base64_encode+0x1fa>
    }

    n = slen / 3 + ( slen % 3 != 0 );
 8000d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000d20:	4a78      	ldr	r2, [pc, #480]	; (8000f04 <mbedtls_base64_encode+0x204>)
 8000d22:	fba2 2303 	umull	r2, r3, r2, r3
 8000d26:	0858      	lsrs	r0, r3, #1
 8000d28:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8000d2a:	4b76      	ldr	r3, [pc, #472]	; (8000f04 <mbedtls_base64_encode+0x204>)
 8000d2c:	fba3 2301 	umull	r2, r3, r3, r1
 8000d30:	085a      	lsrs	r2, r3, #1
 8000d32:	4613      	mov	r3, r2
 8000d34:	005b      	lsls	r3, r3, #1
 8000d36:	4413      	add	r3, r2
 8000d38:	1aca      	subs	r2, r1, r3
 8000d3a:	2a00      	cmp	r2, #0
 8000d3c:	bf14      	ite	ne
 8000d3e:	2301      	movne	r3, #1
 8000d40:	2300      	moveq	r3, #0
 8000d42:	b2db      	uxtb	r3, r3
 8000d44:	4403      	add	r3, r0
 8000d46:	61fb      	str	r3, [r7, #28]

    if( n > ( BASE64_SIZE_T_MAX - 1 ) / 4 )
 8000d48:	69fb      	ldr	r3, [r7, #28]
 8000d4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d4e:	d306      	bcc.n	8000d5e <mbedtls_base64_encode+0x5e>
    {
        *olen = BASE64_SIZE_T_MAX;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d56:	601a      	str	r2, [r3, #0]
        return( MBEDTLS_ERR_BASE64_BUFFER_TOO_SMALL );
 8000d58:	f06f 0329 	mvn.w	r3, #41	; 0x29
 8000d5c:	e0cd      	b.n	8000efa <mbedtls_base64_encode+0x1fa>
    }

    n *= 4;
 8000d5e:	69fb      	ldr	r3, [r7, #28]
 8000d60:	009b      	lsls	r3, r3, #2
 8000d62:	61fb      	str	r3, [r7, #28]

    if( ( dlen < n + 1 ) || ( NULL == dst ) )
 8000d64:	69fb      	ldr	r3, [r7, #28]
 8000d66:	3301      	adds	r3, #1
 8000d68:	68ba      	ldr	r2, [r7, #8]
 8000d6a:	429a      	cmp	r2, r3
 8000d6c:	d302      	bcc.n	8000d74 <mbedtls_base64_encode+0x74>
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d106      	bne.n	8000d82 <mbedtls_base64_encode+0x82>
    {
        *olen = n + 1;
 8000d74:	69fb      	ldr	r3, [r7, #28]
 8000d76:	1c5a      	adds	r2, r3, #1
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	601a      	str	r2, [r3, #0]
        return( MBEDTLS_ERR_BASE64_BUFFER_TOO_SMALL );
 8000d7c:	f06f 0329 	mvn.w	r3, #41	; 0x29
 8000d80:	e0bb      	b.n	8000efa <mbedtls_base64_encode+0x1fa>
    }

    n = ( slen / 3 ) * 3;
 8000d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000d84:	4a5f      	ldr	r2, [pc, #380]	; (8000f04 <mbedtls_base64_encode+0x204>)
 8000d86:	fba2 2303 	umull	r2, r3, r2, r3
 8000d8a:	085a      	lsrs	r2, r3, #1
 8000d8c:	4613      	mov	r3, r2
 8000d8e:	005b      	lsls	r3, r3, #1
 8000d90:	4413      	add	r3, r2
 8000d92:	61fb      	str	r3, [r7, #28]

    for( i = 0, p = dst; i < n; i += 3 )
 8000d94:	2300      	movs	r3, #0
 8000d96:	627b      	str	r3, [r7, #36]	; 0x24
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	623b      	str	r3, [r7, #32]
 8000d9c:	e04e      	b.n	8000e3c <mbedtls_base64_encode+0x13c>
    {
        C1 = *src++;
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	1c5a      	adds	r2, r3, #1
 8000da2:	603a      	str	r2, [r7, #0]
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	61bb      	str	r3, [r7, #24]
        C2 = *src++;
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	1c5a      	adds	r2, r3, #1
 8000dac:	603a      	str	r2, [r7, #0]
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	617b      	str	r3, [r7, #20]
        C3 = *src++;
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	1c5a      	adds	r2, r3, #1
 8000db6:	603a      	str	r2, [r7, #0]
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	613b      	str	r3, [r7, #16]

        *p++ = mbedtls_base64_table_lookup( base64_enc_map, sizeof( base64_enc_map ),
                                            ( ( C1 >> 2 ) & 0x3F ) );
 8000dbc:	69bb      	ldr	r3, [r7, #24]
 8000dbe:	109b      	asrs	r3, r3, #2
        *p++ = mbedtls_base64_table_lookup( base64_enc_map, sizeof( base64_enc_map ),
 8000dc0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8000dc4:	6a3c      	ldr	r4, [r7, #32]
 8000dc6:	1c63      	adds	r3, r4, #1
 8000dc8:	623b      	str	r3, [r7, #32]
 8000dca:	2140      	movs	r1, #64	; 0x40
 8000dcc:	484e      	ldr	r0, [pc, #312]	; (8000f08 <mbedtls_base64_encode+0x208>)
 8000dce:	f7ff ff70 	bl	8000cb2 <mbedtls_base64_table_lookup>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	7023      	strb	r3, [r4, #0]

        *p++ = mbedtls_base64_table_lookup( base64_enc_map, sizeof( base64_enc_map ),
                                            ( ( ( ( C1 &  3 ) << 4 ) + ( C2 >> 4 ) ) & 0x3F ) );
 8000dd6:	69bb      	ldr	r3, [r7, #24]
 8000dd8:	011b      	lsls	r3, r3, #4
 8000dda:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	111b      	asrs	r3, r3, #4
 8000de2:	4413      	add	r3, r2
        *p++ = mbedtls_base64_table_lookup( base64_enc_map, sizeof( base64_enc_map ),
 8000de4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8000de8:	6a3c      	ldr	r4, [r7, #32]
 8000dea:	1c63      	adds	r3, r4, #1
 8000dec:	623b      	str	r3, [r7, #32]
 8000dee:	2140      	movs	r1, #64	; 0x40
 8000df0:	4845      	ldr	r0, [pc, #276]	; (8000f08 <mbedtls_base64_encode+0x208>)
 8000df2:	f7ff ff5e 	bl	8000cb2 <mbedtls_base64_table_lookup>
 8000df6:	4603      	mov	r3, r0
 8000df8:	7023      	strb	r3, [r4, #0]

        *p++ = mbedtls_base64_table_lookup( base64_enc_map, sizeof( base64_enc_map ),
                                            ( ( ( ( C2 & 15 ) << 2 ) + ( C3 >> 6 ) ) & 0x3F ) );
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	009b      	lsls	r3, r3, #2
 8000dfe:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8000e02:	693b      	ldr	r3, [r7, #16]
 8000e04:	119b      	asrs	r3, r3, #6
 8000e06:	4413      	add	r3, r2
        *p++ = mbedtls_base64_table_lookup( base64_enc_map, sizeof( base64_enc_map ),
 8000e08:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8000e0c:	6a3c      	ldr	r4, [r7, #32]
 8000e0e:	1c63      	adds	r3, r4, #1
 8000e10:	623b      	str	r3, [r7, #32]
 8000e12:	2140      	movs	r1, #64	; 0x40
 8000e14:	483c      	ldr	r0, [pc, #240]	; (8000f08 <mbedtls_base64_encode+0x208>)
 8000e16:	f7ff ff4c 	bl	8000cb2 <mbedtls_base64_table_lookup>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	7023      	strb	r3, [r4, #0]

        *p++ = mbedtls_base64_table_lookup( base64_enc_map, sizeof( base64_enc_map ),
                                            ( C3 & 0x3F ) );
 8000e1e:	693b      	ldr	r3, [r7, #16]
        *p++ = mbedtls_base64_table_lookup( base64_enc_map, sizeof( base64_enc_map ),
 8000e20:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8000e24:	6a3c      	ldr	r4, [r7, #32]
 8000e26:	1c63      	adds	r3, r4, #1
 8000e28:	623b      	str	r3, [r7, #32]
 8000e2a:	2140      	movs	r1, #64	; 0x40
 8000e2c:	4836      	ldr	r0, [pc, #216]	; (8000f08 <mbedtls_base64_encode+0x208>)
 8000e2e:	f7ff ff40 	bl	8000cb2 <mbedtls_base64_table_lookup>
 8000e32:	4603      	mov	r3, r0
 8000e34:	7023      	strb	r3, [r4, #0]
    for( i = 0, p = dst; i < n; i += 3 )
 8000e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e38:	3303      	adds	r3, #3
 8000e3a:	627b      	str	r3, [r7, #36]	; 0x24
 8000e3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	429a      	cmp	r2, r3
 8000e42:	d3ac      	bcc.n	8000d9e <mbedtls_base64_encode+0x9e>
    }

    if( i < slen )
 8000e44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	d24c      	bcs.n	8000ee6 <mbedtls_base64_encode+0x1e6>
    {
        C1 = *src++;
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	1c5a      	adds	r2, r3, #1
 8000e50:	603a      	str	r2, [r7, #0]
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	61bb      	str	r3, [r7, #24]
        C2 = ( ( i + 1 ) < slen ) ? *src++ : 0;
 8000e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e58:	3301      	adds	r3, #1
 8000e5a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000e5c:	429a      	cmp	r2, r3
 8000e5e:	d904      	bls.n	8000e6a <mbedtls_base64_encode+0x16a>
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	1c5a      	adds	r2, r3, #1
 8000e64:	603a      	str	r2, [r7, #0]
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	e000      	b.n	8000e6c <mbedtls_base64_encode+0x16c>
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	617b      	str	r3, [r7, #20]

        *p++ = mbedtls_base64_table_lookup( base64_enc_map, sizeof( base64_enc_map ),
                                            ( ( C1 >> 2 ) & 0x3F ) );
 8000e6e:	69bb      	ldr	r3, [r7, #24]
 8000e70:	109b      	asrs	r3, r3, #2
        *p++ = mbedtls_base64_table_lookup( base64_enc_map, sizeof( base64_enc_map ),
 8000e72:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8000e76:	6a3c      	ldr	r4, [r7, #32]
 8000e78:	1c63      	adds	r3, r4, #1
 8000e7a:	623b      	str	r3, [r7, #32]
 8000e7c:	2140      	movs	r1, #64	; 0x40
 8000e7e:	4822      	ldr	r0, [pc, #136]	; (8000f08 <mbedtls_base64_encode+0x208>)
 8000e80:	f7ff ff17 	bl	8000cb2 <mbedtls_base64_table_lookup>
 8000e84:	4603      	mov	r3, r0
 8000e86:	7023      	strb	r3, [r4, #0]

        *p++ = mbedtls_base64_table_lookup( base64_enc_map, sizeof( base64_enc_map ),
                                            ( ( ( ( C1 & 3 ) << 4 ) + ( C2 >> 4 ) ) & 0x3F ) );
 8000e88:	69bb      	ldr	r3, [r7, #24]
 8000e8a:	011b      	lsls	r3, r3, #4
 8000e8c:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	111b      	asrs	r3, r3, #4
 8000e94:	4413      	add	r3, r2
        *p++ = mbedtls_base64_table_lookup( base64_enc_map, sizeof( base64_enc_map ),
 8000e96:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8000e9a:	6a3c      	ldr	r4, [r7, #32]
 8000e9c:	1c63      	adds	r3, r4, #1
 8000e9e:	623b      	str	r3, [r7, #32]
 8000ea0:	2140      	movs	r1, #64	; 0x40
 8000ea2:	4819      	ldr	r0, [pc, #100]	; (8000f08 <mbedtls_base64_encode+0x208>)
 8000ea4:	f7ff ff05 	bl	8000cb2 <mbedtls_base64_table_lookup>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	7023      	strb	r3, [r4, #0]

        if( ( i + 1 ) < slen )
 8000eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eae:	3301      	adds	r3, #1
 8000eb0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000eb2:	429a      	cmp	r2, r3
 8000eb4:	d90d      	bls.n	8000ed2 <mbedtls_base64_encode+0x1d2>
             *p++ = mbedtls_base64_table_lookup( base64_enc_map, sizeof( base64_enc_map ),
                                                 ( ( ( C2 & 15 ) << 2 ) & 0x3F ) );
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	009b      	lsls	r3, r3, #2
             *p++ = mbedtls_base64_table_lookup( base64_enc_map, sizeof( base64_enc_map ),
 8000eba:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8000ebe:	6a3c      	ldr	r4, [r7, #32]
 8000ec0:	1c63      	adds	r3, r4, #1
 8000ec2:	623b      	str	r3, [r7, #32]
 8000ec4:	2140      	movs	r1, #64	; 0x40
 8000ec6:	4810      	ldr	r0, [pc, #64]	; (8000f08 <mbedtls_base64_encode+0x208>)
 8000ec8:	f7ff fef3 	bl	8000cb2 <mbedtls_base64_table_lookup>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	7023      	strb	r3, [r4, #0]
 8000ed0:	e004      	b.n	8000edc <mbedtls_base64_encode+0x1dc>
        else *p++ = '=';
 8000ed2:	6a3b      	ldr	r3, [r7, #32]
 8000ed4:	1c5a      	adds	r2, r3, #1
 8000ed6:	623a      	str	r2, [r7, #32]
 8000ed8:	223d      	movs	r2, #61	; 0x3d
 8000eda:	701a      	strb	r2, [r3, #0]

        *p++ = '=';
 8000edc:	6a3b      	ldr	r3, [r7, #32]
 8000ede:	1c5a      	adds	r2, r3, #1
 8000ee0:	623a      	str	r2, [r7, #32]
 8000ee2:	223d      	movs	r2, #61	; 0x3d
 8000ee4:	701a      	strb	r2, [r3, #0]
    }

    *olen = p - dst;
 8000ee6:	6a3a      	ldr	r2, [r7, #32]
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	1ad3      	subs	r3, r2, r3
 8000eec:	461a      	mov	r2, r3
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	601a      	str	r2, [r3, #0]
    *p = 0;
 8000ef2:	6a3b      	ldr	r3, [r7, #32]
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	701a      	strb	r2, [r3, #0]

    return( 0 );
 8000ef8:	2300      	movs	r3, #0
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	372c      	adds	r7, #44	; 0x2c
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd90      	pop	{r4, r7, pc}
 8000f02:	bf00      	nop
 8000f04:	aaaaaaab 	.word	0xaaaaaaab
 8000f08:	080074f4 	.word	0x080074f4

08000f0c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f12:	2300      	movs	r3, #0
 8000f14:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f16:	2003      	movs	r0, #3
 8000f18:	f000 f8dd 	bl	80010d6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f1c:	200f      	movs	r0, #15
 8000f1e:	f7ff fc85 	bl	800082c <HAL_InitTick>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d002      	beq.n	8000f2e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	71fb      	strb	r3, [r7, #7]
 8000f2c:	e001      	b.n	8000f32 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f2e:	f7ff fc55 	bl	80007dc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f32:	79fb      	ldrb	r3, [r7, #7]
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	3708      	adds	r7, #8
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}

08000f3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f40:	4b06      	ldr	r3, [pc, #24]	; (8000f5c <HAL_IncTick+0x20>)
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	461a      	mov	r2, r3
 8000f46:	4b06      	ldr	r3, [pc, #24]	; (8000f60 <HAL_IncTick+0x24>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4413      	add	r3, r2
 8000f4c:	4a04      	ldr	r2, [pc, #16]	; (8000f60 <HAL_IncTick+0x24>)
 8000f4e:	6013      	str	r3, [r2, #0]
}
 8000f50:	bf00      	nop
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	20000008 	.word	0x20000008
 8000f60:	20002038 	.word	0x20002038

08000f64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  return uwTick;
 8000f68:	4b03      	ldr	r3, [pc, #12]	; (8000f78 <HAL_GetTick+0x14>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	20002038 	.word	0x20002038

08000f7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b085      	sub	sp, #20
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	f003 0307 	and.w	r3, r3, #7
 8000f8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f8c:	4b0c      	ldr	r3, [pc, #48]	; (8000fc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000f8e:	68db      	ldr	r3, [r3, #12]
 8000f90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f92:	68ba      	ldr	r2, [r7, #8]
 8000f94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f98:	4013      	ands	r3, r2
 8000f9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fa4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fa8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fae:	4a04      	ldr	r2, [pc, #16]	; (8000fc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000fb0:	68bb      	ldr	r3, [r7, #8]
 8000fb2:	60d3      	str	r3, [r2, #12]
}
 8000fb4:	bf00      	nop
 8000fb6:	3714      	adds	r7, #20
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr
 8000fc0:	e000ed00 	.word	0xe000ed00

08000fc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fc8:	4b04      	ldr	r3, [pc, #16]	; (8000fdc <__NVIC_GetPriorityGrouping+0x18>)
 8000fca:	68db      	ldr	r3, [r3, #12]
 8000fcc:	0a1b      	lsrs	r3, r3, #8
 8000fce:	f003 0307 	and.w	r3, r3, #7
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr
 8000fdc:	e000ed00 	.word	0xe000ed00

08000fe0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	db0b      	blt.n	800100a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ff2:	79fb      	ldrb	r3, [r7, #7]
 8000ff4:	f003 021f 	and.w	r2, r3, #31
 8000ff8:	4907      	ldr	r1, [pc, #28]	; (8001018 <__NVIC_EnableIRQ+0x38>)
 8000ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffe:	095b      	lsrs	r3, r3, #5
 8001000:	2001      	movs	r0, #1
 8001002:	fa00 f202 	lsl.w	r2, r0, r2
 8001006:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800100a:	bf00      	nop
 800100c:	370c      	adds	r7, #12
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	e000e100 	.word	0xe000e100

0800101c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	4603      	mov	r3, r0
 8001024:	6039      	str	r1, [r7, #0]
 8001026:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001028:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102c:	2b00      	cmp	r3, #0
 800102e:	db0a      	blt.n	8001046 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	b2da      	uxtb	r2, r3
 8001034:	490c      	ldr	r1, [pc, #48]	; (8001068 <__NVIC_SetPriority+0x4c>)
 8001036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103a:	0112      	lsls	r2, r2, #4
 800103c:	b2d2      	uxtb	r2, r2
 800103e:	440b      	add	r3, r1
 8001040:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001044:	e00a      	b.n	800105c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	b2da      	uxtb	r2, r3
 800104a:	4908      	ldr	r1, [pc, #32]	; (800106c <__NVIC_SetPriority+0x50>)
 800104c:	79fb      	ldrb	r3, [r7, #7]
 800104e:	f003 030f 	and.w	r3, r3, #15
 8001052:	3b04      	subs	r3, #4
 8001054:	0112      	lsls	r2, r2, #4
 8001056:	b2d2      	uxtb	r2, r2
 8001058:	440b      	add	r3, r1
 800105a:	761a      	strb	r2, [r3, #24]
}
 800105c:	bf00      	nop
 800105e:	370c      	adds	r7, #12
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr
 8001068:	e000e100 	.word	0xe000e100
 800106c:	e000ed00 	.word	0xe000ed00

08001070 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001070:	b480      	push	{r7}
 8001072:	b089      	sub	sp, #36	; 0x24
 8001074:	af00      	add	r7, sp, #0
 8001076:	60f8      	str	r0, [r7, #12]
 8001078:	60b9      	str	r1, [r7, #8]
 800107a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	f003 0307 	and.w	r3, r3, #7
 8001082:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001084:	69fb      	ldr	r3, [r7, #28]
 8001086:	f1c3 0307 	rsb	r3, r3, #7
 800108a:	2b04      	cmp	r3, #4
 800108c:	bf28      	it	cs
 800108e:	2304      	movcs	r3, #4
 8001090:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	3304      	adds	r3, #4
 8001096:	2b06      	cmp	r3, #6
 8001098:	d902      	bls.n	80010a0 <NVIC_EncodePriority+0x30>
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	3b03      	subs	r3, #3
 800109e:	e000      	b.n	80010a2 <NVIC_EncodePriority+0x32>
 80010a0:	2300      	movs	r3, #0
 80010a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010a8:	69bb      	ldr	r3, [r7, #24]
 80010aa:	fa02 f303 	lsl.w	r3, r2, r3
 80010ae:	43da      	mvns	r2, r3
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	401a      	ands	r2, r3
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010b8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	fa01 f303 	lsl.w	r3, r1, r3
 80010c2:	43d9      	mvns	r1, r3
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010c8:	4313      	orrs	r3, r2
         );
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3724      	adds	r7, #36	; 0x24
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr

080010d6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010d6:	b580      	push	{r7, lr}
 80010d8:	b082      	sub	sp, #8
 80010da:	af00      	add	r7, sp, #0
 80010dc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010de:	6878      	ldr	r0, [r7, #4]
 80010e0:	f7ff ff4c 	bl	8000f7c <__NVIC_SetPriorityGrouping>
}
 80010e4:	bf00      	nop
 80010e6:	3708      	adds	r7, #8
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}

080010ec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b086      	sub	sp, #24
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	4603      	mov	r3, r0
 80010f4:	60b9      	str	r1, [r7, #8]
 80010f6:	607a      	str	r2, [r7, #4]
 80010f8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80010fa:	2300      	movs	r3, #0
 80010fc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010fe:	f7ff ff61 	bl	8000fc4 <__NVIC_GetPriorityGrouping>
 8001102:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001104:	687a      	ldr	r2, [r7, #4]
 8001106:	68b9      	ldr	r1, [r7, #8]
 8001108:	6978      	ldr	r0, [r7, #20]
 800110a:	f7ff ffb1 	bl	8001070 <NVIC_EncodePriority>
 800110e:	4602      	mov	r2, r0
 8001110:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001114:	4611      	mov	r1, r2
 8001116:	4618      	mov	r0, r3
 8001118:	f7ff ff80 	bl	800101c <__NVIC_SetPriority>
}
 800111c:	bf00      	nop
 800111e:	3718      	adds	r7, #24
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}

08001124 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	4603      	mov	r3, r0
 800112c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800112e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001132:	4618      	mov	r0, r3
 8001134:	f7ff ff54 	bl	8000fe0 <__NVIC_EnableIRQ>
}
 8001138:	bf00      	nop
 800113a:	3708      	adds	r7, #8
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}

08001140 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001140:	b480      	push	{r7}
 8001142:	b087      	sub	sp, #28
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
 8001148:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800114a:	2300      	movs	r3, #0
 800114c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800114e:	e148      	b.n	80013e2 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	2101      	movs	r1, #1
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	fa01 f303 	lsl.w	r3, r1, r3
 800115c:	4013      	ands	r3, r2
 800115e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	2b00      	cmp	r3, #0
 8001164:	f000 813a 	beq.w	80013dc <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	2b01      	cmp	r3, #1
 800116e:	d00b      	beq.n	8001188 <HAL_GPIO_Init+0x48>
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	2b02      	cmp	r3, #2
 8001176:	d007      	beq.n	8001188 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800117c:	2b11      	cmp	r3, #17
 800117e:	d003      	beq.n	8001188 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	2b12      	cmp	r3, #18
 8001186:	d130      	bne.n	80011ea <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	689b      	ldr	r3, [r3, #8]
 800118c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	005b      	lsls	r3, r3, #1
 8001192:	2203      	movs	r2, #3
 8001194:	fa02 f303 	lsl.w	r3, r2, r3
 8001198:	43db      	mvns	r3, r3
 800119a:	693a      	ldr	r2, [r7, #16]
 800119c:	4013      	ands	r3, r2
 800119e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	68da      	ldr	r2, [r3, #12]
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	005b      	lsls	r3, r3, #1
 80011a8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ac:	693a      	ldr	r2, [r7, #16]
 80011ae:	4313      	orrs	r3, r2
 80011b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	693a      	ldr	r2, [r7, #16]
 80011b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80011be:	2201      	movs	r2, #1
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	fa02 f303 	lsl.w	r3, r2, r3
 80011c6:	43db      	mvns	r3, r3
 80011c8:	693a      	ldr	r2, [r7, #16]
 80011ca:	4013      	ands	r3, r2
 80011cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	091b      	lsrs	r3, r3, #4
 80011d4:	f003 0201 	and.w	r2, r3, #1
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	fa02 f303 	lsl.w	r3, r2, r3
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	4313      	orrs	r3, r2
 80011e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	693a      	ldr	r2, [r7, #16]
 80011e8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	68db      	ldr	r3, [r3, #12]
 80011ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	005b      	lsls	r3, r3, #1
 80011f4:	2203      	movs	r2, #3
 80011f6:	fa02 f303 	lsl.w	r3, r2, r3
 80011fa:	43db      	mvns	r3, r3
 80011fc:	693a      	ldr	r2, [r7, #16]
 80011fe:	4013      	ands	r3, r2
 8001200:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	689a      	ldr	r2, [r3, #8]
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	005b      	lsls	r3, r3, #1
 800120a:	fa02 f303 	lsl.w	r3, r2, r3
 800120e:	693a      	ldr	r2, [r7, #16]
 8001210:	4313      	orrs	r3, r2
 8001212:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	693a      	ldr	r2, [r7, #16]
 8001218:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	2b02      	cmp	r3, #2
 8001220:	d003      	beq.n	800122a <HAL_GPIO_Init+0xea>
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	2b12      	cmp	r3, #18
 8001228:	d123      	bne.n	8001272 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	08da      	lsrs	r2, r3, #3
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	3208      	adds	r2, #8
 8001232:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001236:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	f003 0307 	and.w	r3, r3, #7
 800123e:	009b      	lsls	r3, r3, #2
 8001240:	220f      	movs	r2, #15
 8001242:	fa02 f303 	lsl.w	r3, r2, r3
 8001246:	43db      	mvns	r3, r3
 8001248:	693a      	ldr	r2, [r7, #16]
 800124a:	4013      	ands	r3, r2
 800124c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	691a      	ldr	r2, [r3, #16]
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	f003 0307 	and.w	r3, r3, #7
 8001258:	009b      	lsls	r3, r3, #2
 800125a:	fa02 f303 	lsl.w	r3, r2, r3
 800125e:	693a      	ldr	r2, [r7, #16]
 8001260:	4313      	orrs	r3, r2
 8001262:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	08da      	lsrs	r2, r3, #3
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	3208      	adds	r2, #8
 800126c:	6939      	ldr	r1, [r7, #16]
 800126e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	005b      	lsls	r3, r3, #1
 800127c:	2203      	movs	r2, #3
 800127e:	fa02 f303 	lsl.w	r3, r2, r3
 8001282:	43db      	mvns	r3, r3
 8001284:	693a      	ldr	r2, [r7, #16]
 8001286:	4013      	ands	r3, r2
 8001288:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	f003 0203 	and.w	r2, r3, #3
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	005b      	lsls	r3, r3, #1
 8001296:	fa02 f303 	lsl.w	r3, r2, r3
 800129a:	693a      	ldr	r2, [r7, #16]
 800129c:	4313      	orrs	r3, r2
 800129e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	693a      	ldr	r2, [r7, #16]
 80012a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	f000 8094 	beq.w	80013dc <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012b4:	4b52      	ldr	r3, [pc, #328]	; (8001400 <HAL_GPIO_Init+0x2c0>)
 80012b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012b8:	4a51      	ldr	r2, [pc, #324]	; (8001400 <HAL_GPIO_Init+0x2c0>)
 80012ba:	f043 0301 	orr.w	r3, r3, #1
 80012be:	6613      	str	r3, [r2, #96]	; 0x60
 80012c0:	4b4f      	ldr	r3, [pc, #316]	; (8001400 <HAL_GPIO_Init+0x2c0>)
 80012c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012c4:	f003 0301 	and.w	r3, r3, #1
 80012c8:	60bb      	str	r3, [r7, #8]
 80012ca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80012cc:	4a4d      	ldr	r2, [pc, #308]	; (8001404 <HAL_GPIO_Init+0x2c4>)
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	089b      	lsrs	r3, r3, #2
 80012d2:	3302      	adds	r3, #2
 80012d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	f003 0303 	and.w	r3, r3, #3
 80012e0:	009b      	lsls	r3, r3, #2
 80012e2:	220f      	movs	r2, #15
 80012e4:	fa02 f303 	lsl.w	r3, r2, r3
 80012e8:	43db      	mvns	r3, r3
 80012ea:	693a      	ldr	r2, [r7, #16]
 80012ec:	4013      	ands	r3, r2
 80012ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80012f6:	d00d      	beq.n	8001314 <HAL_GPIO_Init+0x1d4>
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	4a43      	ldr	r2, [pc, #268]	; (8001408 <HAL_GPIO_Init+0x2c8>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d007      	beq.n	8001310 <HAL_GPIO_Init+0x1d0>
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	4a42      	ldr	r2, [pc, #264]	; (800140c <HAL_GPIO_Init+0x2cc>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d101      	bne.n	800130c <HAL_GPIO_Init+0x1cc>
 8001308:	2302      	movs	r3, #2
 800130a:	e004      	b.n	8001316 <HAL_GPIO_Init+0x1d6>
 800130c:	2307      	movs	r3, #7
 800130e:	e002      	b.n	8001316 <HAL_GPIO_Init+0x1d6>
 8001310:	2301      	movs	r3, #1
 8001312:	e000      	b.n	8001316 <HAL_GPIO_Init+0x1d6>
 8001314:	2300      	movs	r3, #0
 8001316:	697a      	ldr	r2, [r7, #20]
 8001318:	f002 0203 	and.w	r2, r2, #3
 800131c:	0092      	lsls	r2, r2, #2
 800131e:	4093      	lsls	r3, r2
 8001320:	693a      	ldr	r2, [r7, #16]
 8001322:	4313      	orrs	r3, r2
 8001324:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001326:	4937      	ldr	r1, [pc, #220]	; (8001404 <HAL_GPIO_Init+0x2c4>)
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	089b      	lsrs	r3, r3, #2
 800132c:	3302      	adds	r3, #2
 800132e:	693a      	ldr	r2, [r7, #16]
 8001330:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001334:	4b36      	ldr	r3, [pc, #216]	; (8001410 <HAL_GPIO_Init+0x2d0>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	43db      	mvns	r3, r3
 800133e:	693a      	ldr	r2, [r7, #16]
 8001340:	4013      	ands	r3, r2
 8001342:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800134c:	2b00      	cmp	r3, #0
 800134e:	d003      	beq.n	8001358 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001350:	693a      	ldr	r2, [r7, #16]
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	4313      	orrs	r3, r2
 8001356:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001358:	4a2d      	ldr	r2, [pc, #180]	; (8001410 <HAL_GPIO_Init+0x2d0>)
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800135e:	4b2c      	ldr	r3, [pc, #176]	; (8001410 <HAL_GPIO_Init+0x2d0>)
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	43db      	mvns	r3, r3
 8001368:	693a      	ldr	r2, [r7, #16]
 800136a:	4013      	ands	r3, r2
 800136c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001376:	2b00      	cmp	r3, #0
 8001378:	d003      	beq.n	8001382 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800137a:	693a      	ldr	r2, [r7, #16]
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	4313      	orrs	r3, r2
 8001380:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001382:	4a23      	ldr	r2, [pc, #140]	; (8001410 <HAL_GPIO_Init+0x2d0>)
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001388:	4b21      	ldr	r3, [pc, #132]	; (8001410 <HAL_GPIO_Init+0x2d0>)
 800138a:	689b      	ldr	r3, [r3, #8]
 800138c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	43db      	mvns	r3, r3
 8001392:	693a      	ldr	r2, [r7, #16]
 8001394:	4013      	ands	r3, r2
 8001396:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d003      	beq.n	80013ac <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80013a4:	693a      	ldr	r2, [r7, #16]
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80013ac:	4a18      	ldr	r2, [pc, #96]	; (8001410 <HAL_GPIO_Init+0x2d0>)
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80013b2:	4b17      	ldr	r3, [pc, #92]	; (8001410 <HAL_GPIO_Init+0x2d0>)
 80013b4:	68db      	ldr	r3, [r3, #12]
 80013b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	43db      	mvns	r3, r3
 80013bc:	693a      	ldr	r2, [r7, #16]
 80013be:	4013      	ands	r3, r2
 80013c0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d003      	beq.n	80013d6 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80013ce:	693a      	ldr	r2, [r7, #16]
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	4313      	orrs	r3, r2
 80013d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80013d6:	4a0e      	ldr	r2, [pc, #56]	; (8001410 <HAL_GPIO_Init+0x2d0>)
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	3301      	adds	r3, #1
 80013e0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	681a      	ldr	r2, [r3, #0]
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	fa22 f303 	lsr.w	r3, r2, r3
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	f47f aeaf 	bne.w	8001150 <HAL_GPIO_Init+0x10>
  }
}
 80013f2:	bf00      	nop
 80013f4:	bf00      	nop
 80013f6:	371c      	adds	r7, #28
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr
 8001400:	40021000 	.word	0x40021000
 8001404:	40010000 	.word	0x40010000
 8001408:	48000400 	.word	0x48000400
 800140c:	48000800 	.word	0x48000800
 8001410:	40010400 	.word	0x40010400

08001414 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
 800141c:	460b      	mov	r3, r1
 800141e:	807b      	strh	r3, [r7, #2]
 8001420:	4613      	mov	r3, r2
 8001422:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001424:	787b      	ldrb	r3, [r7, #1]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d003      	beq.n	8001432 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800142a:	887a      	ldrh	r2, [r7, #2]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001430:	e002      	b.n	8001438 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001432:	887a      	ldrh	r2, [r7, #2]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001438:	bf00      	nop
 800143a:	370c      	adds	r7, #12
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr

08001444 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001448:	4b05      	ldr	r3, [pc, #20]	; (8001460 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a04      	ldr	r2, [pc, #16]	; (8001460 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800144e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001452:	6013      	str	r3, [r2, #0]
}
 8001454:	bf00      	nop
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	40007000 	.word	0x40007000

08001464 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001468:	4b04      	ldr	r3, [pc, #16]	; (800147c <HAL_PWREx_GetVoltageRange+0x18>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001470:	4618      	mov	r0, r3
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	40007000 	.word	0x40007000

08001480 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001480:	b480      	push	{r7}
 8001482:	b085      	sub	sp, #20
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800148e:	d130      	bne.n	80014f2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001490:	4b23      	ldr	r3, [pc, #140]	; (8001520 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001498:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800149c:	d038      	beq.n	8001510 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800149e:	4b20      	ldr	r3, [pc, #128]	; (8001520 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80014a6:	4a1e      	ldr	r2, [pc, #120]	; (8001520 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014ac:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80014ae:	4b1d      	ldr	r3, [pc, #116]	; (8001524 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	2232      	movs	r2, #50	; 0x32
 80014b4:	fb02 f303 	mul.w	r3, r2, r3
 80014b8:	4a1b      	ldr	r2, [pc, #108]	; (8001528 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80014ba:	fba2 2303 	umull	r2, r3, r2, r3
 80014be:	0c9b      	lsrs	r3, r3, #18
 80014c0:	3301      	adds	r3, #1
 80014c2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014c4:	e002      	b.n	80014cc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	3b01      	subs	r3, #1
 80014ca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014cc:	4b14      	ldr	r3, [pc, #80]	; (8001520 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014ce:	695b      	ldr	r3, [r3, #20]
 80014d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014d8:	d102      	bne.n	80014e0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d1f2      	bne.n	80014c6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80014e0:	4b0f      	ldr	r3, [pc, #60]	; (8001520 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014e2:	695b      	ldr	r3, [r3, #20]
 80014e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014ec:	d110      	bne.n	8001510 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80014ee:	2303      	movs	r3, #3
 80014f0:	e00f      	b.n	8001512 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80014f2:	4b0b      	ldr	r3, [pc, #44]	; (8001520 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80014fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014fe:	d007      	beq.n	8001510 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001500:	4b07      	ldr	r3, [pc, #28]	; (8001520 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001508:	4a05      	ldr	r2, [pc, #20]	; (8001520 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800150a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800150e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001510:	2300      	movs	r3, #0
}
 8001512:	4618      	mov	r0, r3
 8001514:	3714      	adds	r7, #20
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	40007000 	.word	0x40007000
 8001524:	20000000 	.word	0x20000000
 8001528:	431bde83 	.word	0x431bde83

0800152c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b088      	sub	sp, #32
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d102      	bne.n	8001540 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800153a:	2301      	movs	r3, #1
 800153c:	f000 bc11 	b.w	8001d62 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001540:	4ba0      	ldr	r3, [pc, #640]	; (80017c4 <HAL_RCC_OscConfig+0x298>)
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	f003 030c 	and.w	r3, r3, #12
 8001548:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800154a:	4b9e      	ldr	r3, [pc, #632]	; (80017c4 <HAL_RCC_OscConfig+0x298>)
 800154c:	68db      	ldr	r3, [r3, #12]
 800154e:	f003 0303 	and.w	r3, r3, #3
 8001552:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f003 0310 	and.w	r3, r3, #16
 800155c:	2b00      	cmp	r3, #0
 800155e:	f000 80e4 	beq.w	800172a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001562:	69bb      	ldr	r3, [r7, #24]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d007      	beq.n	8001578 <HAL_RCC_OscConfig+0x4c>
 8001568:	69bb      	ldr	r3, [r7, #24]
 800156a:	2b0c      	cmp	r3, #12
 800156c:	f040 808b 	bne.w	8001686 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	2b01      	cmp	r3, #1
 8001574:	f040 8087 	bne.w	8001686 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001578:	4b92      	ldr	r3, [pc, #584]	; (80017c4 <HAL_RCC_OscConfig+0x298>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f003 0302 	and.w	r3, r3, #2
 8001580:	2b00      	cmp	r3, #0
 8001582:	d005      	beq.n	8001590 <HAL_RCC_OscConfig+0x64>
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	699b      	ldr	r3, [r3, #24]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d101      	bne.n	8001590 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800158c:	2301      	movs	r3, #1
 800158e:	e3e8      	b.n	8001d62 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6a1a      	ldr	r2, [r3, #32]
 8001594:	4b8b      	ldr	r3, [pc, #556]	; (80017c4 <HAL_RCC_OscConfig+0x298>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f003 0308 	and.w	r3, r3, #8
 800159c:	2b00      	cmp	r3, #0
 800159e:	d004      	beq.n	80015aa <HAL_RCC_OscConfig+0x7e>
 80015a0:	4b88      	ldr	r3, [pc, #544]	; (80017c4 <HAL_RCC_OscConfig+0x298>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80015a8:	e005      	b.n	80015b6 <HAL_RCC_OscConfig+0x8a>
 80015aa:	4b86      	ldr	r3, [pc, #536]	; (80017c4 <HAL_RCC_OscConfig+0x298>)
 80015ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015b0:	091b      	lsrs	r3, r3, #4
 80015b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d223      	bcs.n	8001602 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6a1b      	ldr	r3, [r3, #32]
 80015be:	4618      	mov	r0, r3
 80015c0:	f000 fdac 	bl	800211c <RCC_SetFlashLatencyFromMSIRange>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	e3c9      	b.n	8001d62 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015ce:	4b7d      	ldr	r3, [pc, #500]	; (80017c4 <HAL_RCC_OscConfig+0x298>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a7c      	ldr	r2, [pc, #496]	; (80017c4 <HAL_RCC_OscConfig+0x298>)
 80015d4:	f043 0308 	orr.w	r3, r3, #8
 80015d8:	6013      	str	r3, [r2, #0]
 80015da:	4b7a      	ldr	r3, [pc, #488]	; (80017c4 <HAL_RCC_OscConfig+0x298>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6a1b      	ldr	r3, [r3, #32]
 80015e6:	4977      	ldr	r1, [pc, #476]	; (80017c4 <HAL_RCC_OscConfig+0x298>)
 80015e8:	4313      	orrs	r3, r2
 80015ea:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015ec:	4b75      	ldr	r3, [pc, #468]	; (80017c4 <HAL_RCC_OscConfig+0x298>)
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	69db      	ldr	r3, [r3, #28]
 80015f8:	021b      	lsls	r3, r3, #8
 80015fa:	4972      	ldr	r1, [pc, #456]	; (80017c4 <HAL_RCC_OscConfig+0x298>)
 80015fc:	4313      	orrs	r3, r2
 80015fe:	604b      	str	r3, [r1, #4]
 8001600:	e025      	b.n	800164e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001602:	4b70      	ldr	r3, [pc, #448]	; (80017c4 <HAL_RCC_OscConfig+0x298>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a6f      	ldr	r2, [pc, #444]	; (80017c4 <HAL_RCC_OscConfig+0x298>)
 8001608:	f043 0308 	orr.w	r3, r3, #8
 800160c:	6013      	str	r3, [r2, #0]
 800160e:	4b6d      	ldr	r3, [pc, #436]	; (80017c4 <HAL_RCC_OscConfig+0x298>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6a1b      	ldr	r3, [r3, #32]
 800161a:	496a      	ldr	r1, [pc, #424]	; (80017c4 <HAL_RCC_OscConfig+0x298>)
 800161c:	4313      	orrs	r3, r2
 800161e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001620:	4b68      	ldr	r3, [pc, #416]	; (80017c4 <HAL_RCC_OscConfig+0x298>)
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	69db      	ldr	r3, [r3, #28]
 800162c:	021b      	lsls	r3, r3, #8
 800162e:	4965      	ldr	r1, [pc, #404]	; (80017c4 <HAL_RCC_OscConfig+0x298>)
 8001630:	4313      	orrs	r3, r2
 8001632:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001634:	69bb      	ldr	r3, [r7, #24]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d109      	bne.n	800164e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6a1b      	ldr	r3, [r3, #32]
 800163e:	4618      	mov	r0, r3
 8001640:	f000 fd6c 	bl	800211c <RCC_SetFlashLatencyFromMSIRange>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	e389      	b.n	8001d62 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800164e:	f000 fc6f 	bl	8001f30 <HAL_RCC_GetSysClockFreq>
 8001652:	4602      	mov	r2, r0
 8001654:	4b5b      	ldr	r3, [pc, #364]	; (80017c4 <HAL_RCC_OscConfig+0x298>)
 8001656:	689b      	ldr	r3, [r3, #8]
 8001658:	091b      	lsrs	r3, r3, #4
 800165a:	f003 030f 	and.w	r3, r3, #15
 800165e:	495a      	ldr	r1, [pc, #360]	; (80017c8 <HAL_RCC_OscConfig+0x29c>)
 8001660:	5ccb      	ldrb	r3, [r1, r3]
 8001662:	f003 031f 	and.w	r3, r3, #31
 8001666:	fa22 f303 	lsr.w	r3, r2, r3
 800166a:	4a58      	ldr	r2, [pc, #352]	; (80017cc <HAL_RCC_OscConfig+0x2a0>)
 800166c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800166e:	4b58      	ldr	r3, [pc, #352]	; (80017d0 <HAL_RCC_OscConfig+0x2a4>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4618      	mov	r0, r3
 8001674:	f7ff f8da 	bl	800082c <HAL_InitTick>
 8001678:	4603      	mov	r3, r0
 800167a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800167c:	7bfb      	ldrb	r3, [r7, #15]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d052      	beq.n	8001728 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001682:	7bfb      	ldrb	r3, [r7, #15]
 8001684:	e36d      	b.n	8001d62 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	699b      	ldr	r3, [r3, #24]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d032      	beq.n	80016f4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800168e:	4b4d      	ldr	r3, [pc, #308]	; (80017c4 <HAL_RCC_OscConfig+0x298>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a4c      	ldr	r2, [pc, #304]	; (80017c4 <HAL_RCC_OscConfig+0x298>)
 8001694:	f043 0301 	orr.w	r3, r3, #1
 8001698:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800169a:	f7ff fc63 	bl	8000f64 <HAL_GetTick>
 800169e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80016a0:	e008      	b.n	80016b4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80016a2:	f7ff fc5f 	bl	8000f64 <HAL_GetTick>
 80016a6:	4602      	mov	r2, r0
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	1ad3      	subs	r3, r2, r3
 80016ac:	2b02      	cmp	r3, #2
 80016ae:	d901      	bls.n	80016b4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80016b0:	2303      	movs	r3, #3
 80016b2:	e356      	b.n	8001d62 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80016b4:	4b43      	ldr	r3, [pc, #268]	; (80017c4 <HAL_RCC_OscConfig+0x298>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f003 0302 	and.w	r3, r3, #2
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d0f0      	beq.n	80016a2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016c0:	4b40      	ldr	r3, [pc, #256]	; (80017c4 <HAL_RCC_OscConfig+0x298>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a3f      	ldr	r2, [pc, #252]	; (80017c4 <HAL_RCC_OscConfig+0x298>)
 80016c6:	f043 0308 	orr.w	r3, r3, #8
 80016ca:	6013      	str	r3, [r2, #0]
 80016cc:	4b3d      	ldr	r3, [pc, #244]	; (80017c4 <HAL_RCC_OscConfig+0x298>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6a1b      	ldr	r3, [r3, #32]
 80016d8:	493a      	ldr	r1, [pc, #232]	; (80017c4 <HAL_RCC_OscConfig+0x298>)
 80016da:	4313      	orrs	r3, r2
 80016dc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016de:	4b39      	ldr	r3, [pc, #228]	; (80017c4 <HAL_RCC_OscConfig+0x298>)
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	69db      	ldr	r3, [r3, #28]
 80016ea:	021b      	lsls	r3, r3, #8
 80016ec:	4935      	ldr	r1, [pc, #212]	; (80017c4 <HAL_RCC_OscConfig+0x298>)
 80016ee:	4313      	orrs	r3, r2
 80016f0:	604b      	str	r3, [r1, #4]
 80016f2:	e01a      	b.n	800172a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80016f4:	4b33      	ldr	r3, [pc, #204]	; (80017c4 <HAL_RCC_OscConfig+0x298>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a32      	ldr	r2, [pc, #200]	; (80017c4 <HAL_RCC_OscConfig+0x298>)
 80016fa:	f023 0301 	bic.w	r3, r3, #1
 80016fe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001700:	f7ff fc30 	bl	8000f64 <HAL_GetTick>
 8001704:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001706:	e008      	b.n	800171a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001708:	f7ff fc2c 	bl	8000f64 <HAL_GetTick>
 800170c:	4602      	mov	r2, r0
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	2b02      	cmp	r3, #2
 8001714:	d901      	bls.n	800171a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001716:	2303      	movs	r3, #3
 8001718:	e323      	b.n	8001d62 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800171a:	4b2a      	ldr	r3, [pc, #168]	; (80017c4 <HAL_RCC_OscConfig+0x298>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 0302 	and.w	r3, r3, #2
 8001722:	2b00      	cmp	r3, #0
 8001724:	d1f0      	bne.n	8001708 <HAL_RCC_OscConfig+0x1dc>
 8001726:	e000      	b.n	800172a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001728:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 0301 	and.w	r3, r3, #1
 8001732:	2b00      	cmp	r3, #0
 8001734:	d073      	beq.n	800181e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001736:	69bb      	ldr	r3, [r7, #24]
 8001738:	2b08      	cmp	r3, #8
 800173a:	d005      	beq.n	8001748 <HAL_RCC_OscConfig+0x21c>
 800173c:	69bb      	ldr	r3, [r7, #24]
 800173e:	2b0c      	cmp	r3, #12
 8001740:	d10e      	bne.n	8001760 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	2b03      	cmp	r3, #3
 8001746:	d10b      	bne.n	8001760 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001748:	4b1e      	ldr	r3, [pc, #120]	; (80017c4 <HAL_RCC_OscConfig+0x298>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001750:	2b00      	cmp	r3, #0
 8001752:	d063      	beq.n	800181c <HAL_RCC_OscConfig+0x2f0>
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d15f      	bne.n	800181c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	e300      	b.n	8001d62 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001768:	d106      	bne.n	8001778 <HAL_RCC_OscConfig+0x24c>
 800176a:	4b16      	ldr	r3, [pc, #88]	; (80017c4 <HAL_RCC_OscConfig+0x298>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a15      	ldr	r2, [pc, #84]	; (80017c4 <HAL_RCC_OscConfig+0x298>)
 8001770:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001774:	6013      	str	r3, [r2, #0]
 8001776:	e01d      	b.n	80017b4 <HAL_RCC_OscConfig+0x288>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001780:	d10c      	bne.n	800179c <HAL_RCC_OscConfig+0x270>
 8001782:	4b10      	ldr	r3, [pc, #64]	; (80017c4 <HAL_RCC_OscConfig+0x298>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a0f      	ldr	r2, [pc, #60]	; (80017c4 <HAL_RCC_OscConfig+0x298>)
 8001788:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800178c:	6013      	str	r3, [r2, #0]
 800178e:	4b0d      	ldr	r3, [pc, #52]	; (80017c4 <HAL_RCC_OscConfig+0x298>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a0c      	ldr	r2, [pc, #48]	; (80017c4 <HAL_RCC_OscConfig+0x298>)
 8001794:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001798:	6013      	str	r3, [r2, #0]
 800179a:	e00b      	b.n	80017b4 <HAL_RCC_OscConfig+0x288>
 800179c:	4b09      	ldr	r3, [pc, #36]	; (80017c4 <HAL_RCC_OscConfig+0x298>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a08      	ldr	r2, [pc, #32]	; (80017c4 <HAL_RCC_OscConfig+0x298>)
 80017a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017a6:	6013      	str	r3, [r2, #0]
 80017a8:	4b06      	ldr	r3, [pc, #24]	; (80017c4 <HAL_RCC_OscConfig+0x298>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a05      	ldr	r2, [pc, #20]	; (80017c4 <HAL_RCC_OscConfig+0x298>)
 80017ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d01b      	beq.n	80017f4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017bc:	f7ff fbd2 	bl	8000f64 <HAL_GetTick>
 80017c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017c2:	e010      	b.n	80017e6 <HAL_RCC_OscConfig+0x2ba>
 80017c4:	40021000 	.word	0x40021000
 80017c8:	080074ac 	.word	0x080074ac
 80017cc:	20000000 	.word	0x20000000
 80017d0:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017d4:	f7ff fbc6 	bl	8000f64 <HAL_GetTick>
 80017d8:	4602      	mov	r2, r0
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	2b64      	cmp	r3, #100	; 0x64
 80017e0:	d901      	bls.n	80017e6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80017e2:	2303      	movs	r3, #3
 80017e4:	e2bd      	b.n	8001d62 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017e6:	4baf      	ldr	r3, [pc, #700]	; (8001aa4 <HAL_RCC_OscConfig+0x578>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d0f0      	beq.n	80017d4 <HAL_RCC_OscConfig+0x2a8>
 80017f2:	e014      	b.n	800181e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017f4:	f7ff fbb6 	bl	8000f64 <HAL_GetTick>
 80017f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017fa:	e008      	b.n	800180e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017fc:	f7ff fbb2 	bl	8000f64 <HAL_GetTick>
 8001800:	4602      	mov	r2, r0
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	2b64      	cmp	r3, #100	; 0x64
 8001808:	d901      	bls.n	800180e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800180a:	2303      	movs	r3, #3
 800180c:	e2a9      	b.n	8001d62 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800180e:	4ba5      	ldr	r3, [pc, #660]	; (8001aa4 <HAL_RCC_OscConfig+0x578>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001816:	2b00      	cmp	r3, #0
 8001818:	d1f0      	bne.n	80017fc <HAL_RCC_OscConfig+0x2d0>
 800181a:	e000      	b.n	800181e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800181c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 0302 	and.w	r3, r3, #2
 8001826:	2b00      	cmp	r3, #0
 8001828:	d060      	beq.n	80018ec <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800182a:	69bb      	ldr	r3, [r7, #24]
 800182c:	2b04      	cmp	r3, #4
 800182e:	d005      	beq.n	800183c <HAL_RCC_OscConfig+0x310>
 8001830:	69bb      	ldr	r3, [r7, #24]
 8001832:	2b0c      	cmp	r3, #12
 8001834:	d119      	bne.n	800186a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	2b02      	cmp	r3, #2
 800183a:	d116      	bne.n	800186a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800183c:	4b99      	ldr	r3, [pc, #612]	; (8001aa4 <HAL_RCC_OscConfig+0x578>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001844:	2b00      	cmp	r3, #0
 8001846:	d005      	beq.n	8001854 <HAL_RCC_OscConfig+0x328>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d101      	bne.n	8001854 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001850:	2301      	movs	r3, #1
 8001852:	e286      	b.n	8001d62 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001854:	4b93      	ldr	r3, [pc, #588]	; (8001aa4 <HAL_RCC_OscConfig+0x578>)
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	691b      	ldr	r3, [r3, #16]
 8001860:	061b      	lsls	r3, r3, #24
 8001862:	4990      	ldr	r1, [pc, #576]	; (8001aa4 <HAL_RCC_OscConfig+0x578>)
 8001864:	4313      	orrs	r3, r2
 8001866:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001868:	e040      	b.n	80018ec <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	68db      	ldr	r3, [r3, #12]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d023      	beq.n	80018ba <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001872:	4b8c      	ldr	r3, [pc, #560]	; (8001aa4 <HAL_RCC_OscConfig+0x578>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a8b      	ldr	r2, [pc, #556]	; (8001aa4 <HAL_RCC_OscConfig+0x578>)
 8001878:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800187c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800187e:	f7ff fb71 	bl	8000f64 <HAL_GetTick>
 8001882:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001884:	e008      	b.n	8001898 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001886:	f7ff fb6d 	bl	8000f64 <HAL_GetTick>
 800188a:	4602      	mov	r2, r0
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	1ad3      	subs	r3, r2, r3
 8001890:	2b02      	cmp	r3, #2
 8001892:	d901      	bls.n	8001898 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001894:	2303      	movs	r3, #3
 8001896:	e264      	b.n	8001d62 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001898:	4b82      	ldr	r3, [pc, #520]	; (8001aa4 <HAL_RCC_OscConfig+0x578>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d0f0      	beq.n	8001886 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018a4:	4b7f      	ldr	r3, [pc, #508]	; (8001aa4 <HAL_RCC_OscConfig+0x578>)
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	691b      	ldr	r3, [r3, #16]
 80018b0:	061b      	lsls	r3, r3, #24
 80018b2:	497c      	ldr	r1, [pc, #496]	; (8001aa4 <HAL_RCC_OscConfig+0x578>)
 80018b4:	4313      	orrs	r3, r2
 80018b6:	604b      	str	r3, [r1, #4]
 80018b8:	e018      	b.n	80018ec <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018ba:	4b7a      	ldr	r3, [pc, #488]	; (8001aa4 <HAL_RCC_OscConfig+0x578>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a79      	ldr	r2, [pc, #484]	; (8001aa4 <HAL_RCC_OscConfig+0x578>)
 80018c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80018c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018c6:	f7ff fb4d 	bl	8000f64 <HAL_GetTick>
 80018ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018cc:	e008      	b.n	80018e0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018ce:	f7ff fb49 	bl	8000f64 <HAL_GetTick>
 80018d2:	4602      	mov	r2, r0
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	2b02      	cmp	r3, #2
 80018da:	d901      	bls.n	80018e0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80018dc:	2303      	movs	r3, #3
 80018de:	e240      	b.n	8001d62 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018e0:	4b70      	ldr	r3, [pc, #448]	; (8001aa4 <HAL_RCC_OscConfig+0x578>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d1f0      	bne.n	80018ce <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f003 0308 	and.w	r3, r3, #8
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d03c      	beq.n	8001972 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	695b      	ldr	r3, [r3, #20]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d01c      	beq.n	800193a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001900:	4b68      	ldr	r3, [pc, #416]	; (8001aa4 <HAL_RCC_OscConfig+0x578>)
 8001902:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001906:	4a67      	ldr	r2, [pc, #412]	; (8001aa4 <HAL_RCC_OscConfig+0x578>)
 8001908:	f043 0301 	orr.w	r3, r3, #1
 800190c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001910:	f7ff fb28 	bl	8000f64 <HAL_GetTick>
 8001914:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001916:	e008      	b.n	800192a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001918:	f7ff fb24 	bl	8000f64 <HAL_GetTick>
 800191c:	4602      	mov	r2, r0
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	2b02      	cmp	r3, #2
 8001924:	d901      	bls.n	800192a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001926:	2303      	movs	r3, #3
 8001928:	e21b      	b.n	8001d62 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800192a:	4b5e      	ldr	r3, [pc, #376]	; (8001aa4 <HAL_RCC_OscConfig+0x578>)
 800192c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001930:	f003 0302 	and.w	r3, r3, #2
 8001934:	2b00      	cmp	r3, #0
 8001936:	d0ef      	beq.n	8001918 <HAL_RCC_OscConfig+0x3ec>
 8001938:	e01b      	b.n	8001972 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800193a:	4b5a      	ldr	r3, [pc, #360]	; (8001aa4 <HAL_RCC_OscConfig+0x578>)
 800193c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001940:	4a58      	ldr	r2, [pc, #352]	; (8001aa4 <HAL_RCC_OscConfig+0x578>)
 8001942:	f023 0301 	bic.w	r3, r3, #1
 8001946:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800194a:	f7ff fb0b 	bl	8000f64 <HAL_GetTick>
 800194e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001950:	e008      	b.n	8001964 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001952:	f7ff fb07 	bl	8000f64 <HAL_GetTick>
 8001956:	4602      	mov	r2, r0
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	1ad3      	subs	r3, r2, r3
 800195c:	2b02      	cmp	r3, #2
 800195e:	d901      	bls.n	8001964 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001960:	2303      	movs	r3, #3
 8001962:	e1fe      	b.n	8001d62 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001964:	4b4f      	ldr	r3, [pc, #316]	; (8001aa4 <HAL_RCC_OscConfig+0x578>)
 8001966:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800196a:	f003 0302 	and.w	r3, r3, #2
 800196e:	2b00      	cmp	r3, #0
 8001970:	d1ef      	bne.n	8001952 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 0304 	and.w	r3, r3, #4
 800197a:	2b00      	cmp	r3, #0
 800197c:	f000 80a6 	beq.w	8001acc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001980:	2300      	movs	r3, #0
 8001982:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001984:	4b47      	ldr	r3, [pc, #284]	; (8001aa4 <HAL_RCC_OscConfig+0x578>)
 8001986:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001988:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800198c:	2b00      	cmp	r3, #0
 800198e:	d10d      	bne.n	80019ac <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001990:	4b44      	ldr	r3, [pc, #272]	; (8001aa4 <HAL_RCC_OscConfig+0x578>)
 8001992:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001994:	4a43      	ldr	r2, [pc, #268]	; (8001aa4 <HAL_RCC_OscConfig+0x578>)
 8001996:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800199a:	6593      	str	r3, [r2, #88]	; 0x58
 800199c:	4b41      	ldr	r3, [pc, #260]	; (8001aa4 <HAL_RCC_OscConfig+0x578>)
 800199e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019a4:	60bb      	str	r3, [r7, #8]
 80019a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019a8:	2301      	movs	r3, #1
 80019aa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019ac:	4b3e      	ldr	r3, [pc, #248]	; (8001aa8 <HAL_RCC_OscConfig+0x57c>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d118      	bne.n	80019ea <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80019b8:	4b3b      	ldr	r3, [pc, #236]	; (8001aa8 <HAL_RCC_OscConfig+0x57c>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a3a      	ldr	r2, [pc, #232]	; (8001aa8 <HAL_RCC_OscConfig+0x57c>)
 80019be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019c2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019c4:	f7ff face 	bl	8000f64 <HAL_GetTick>
 80019c8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019ca:	e008      	b.n	80019de <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019cc:	f7ff faca 	bl	8000f64 <HAL_GetTick>
 80019d0:	4602      	mov	r2, r0
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d901      	bls.n	80019de <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80019da:	2303      	movs	r3, #3
 80019dc:	e1c1      	b.n	8001d62 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019de:	4b32      	ldr	r3, [pc, #200]	; (8001aa8 <HAL_RCC_OscConfig+0x57c>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d0f0      	beq.n	80019cc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	d108      	bne.n	8001a04 <HAL_RCC_OscConfig+0x4d8>
 80019f2:	4b2c      	ldr	r3, [pc, #176]	; (8001aa4 <HAL_RCC_OscConfig+0x578>)
 80019f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019f8:	4a2a      	ldr	r2, [pc, #168]	; (8001aa4 <HAL_RCC_OscConfig+0x578>)
 80019fa:	f043 0301 	orr.w	r3, r3, #1
 80019fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a02:	e024      	b.n	8001a4e <HAL_RCC_OscConfig+0x522>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	2b05      	cmp	r3, #5
 8001a0a:	d110      	bne.n	8001a2e <HAL_RCC_OscConfig+0x502>
 8001a0c:	4b25      	ldr	r3, [pc, #148]	; (8001aa4 <HAL_RCC_OscConfig+0x578>)
 8001a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a12:	4a24      	ldr	r2, [pc, #144]	; (8001aa4 <HAL_RCC_OscConfig+0x578>)
 8001a14:	f043 0304 	orr.w	r3, r3, #4
 8001a18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a1c:	4b21      	ldr	r3, [pc, #132]	; (8001aa4 <HAL_RCC_OscConfig+0x578>)
 8001a1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a22:	4a20      	ldr	r2, [pc, #128]	; (8001aa4 <HAL_RCC_OscConfig+0x578>)
 8001a24:	f043 0301 	orr.w	r3, r3, #1
 8001a28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a2c:	e00f      	b.n	8001a4e <HAL_RCC_OscConfig+0x522>
 8001a2e:	4b1d      	ldr	r3, [pc, #116]	; (8001aa4 <HAL_RCC_OscConfig+0x578>)
 8001a30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a34:	4a1b      	ldr	r2, [pc, #108]	; (8001aa4 <HAL_RCC_OscConfig+0x578>)
 8001a36:	f023 0301 	bic.w	r3, r3, #1
 8001a3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a3e:	4b19      	ldr	r3, [pc, #100]	; (8001aa4 <HAL_RCC_OscConfig+0x578>)
 8001a40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a44:	4a17      	ldr	r2, [pc, #92]	; (8001aa4 <HAL_RCC_OscConfig+0x578>)
 8001a46:	f023 0304 	bic.w	r3, r3, #4
 8001a4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d016      	beq.n	8001a84 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a56:	f7ff fa85 	bl	8000f64 <HAL_GetTick>
 8001a5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a5c:	e00a      	b.n	8001a74 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a5e:	f7ff fa81 	bl	8000f64 <HAL_GetTick>
 8001a62:	4602      	mov	r2, r0
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	1ad3      	subs	r3, r2, r3
 8001a68:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d901      	bls.n	8001a74 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001a70:	2303      	movs	r3, #3
 8001a72:	e176      	b.n	8001d62 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a74:	4b0b      	ldr	r3, [pc, #44]	; (8001aa4 <HAL_RCC_OscConfig+0x578>)
 8001a76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a7a:	f003 0302 	and.w	r3, r3, #2
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d0ed      	beq.n	8001a5e <HAL_RCC_OscConfig+0x532>
 8001a82:	e01a      	b.n	8001aba <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a84:	f7ff fa6e 	bl	8000f64 <HAL_GetTick>
 8001a88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a8a:	e00f      	b.n	8001aac <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a8c:	f7ff fa6a 	bl	8000f64 <HAL_GetTick>
 8001a90:	4602      	mov	r2, r0
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d906      	bls.n	8001aac <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	e15f      	b.n	8001d62 <HAL_RCC_OscConfig+0x836>
 8001aa2:	bf00      	nop
 8001aa4:	40021000 	.word	0x40021000
 8001aa8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001aac:	4baa      	ldr	r3, [pc, #680]	; (8001d58 <HAL_RCC_OscConfig+0x82c>)
 8001aae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ab2:	f003 0302 	and.w	r3, r3, #2
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d1e8      	bne.n	8001a8c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001aba:	7ffb      	ldrb	r3, [r7, #31]
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d105      	bne.n	8001acc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ac0:	4ba5      	ldr	r3, [pc, #660]	; (8001d58 <HAL_RCC_OscConfig+0x82c>)
 8001ac2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ac4:	4aa4      	ldr	r2, [pc, #656]	; (8001d58 <HAL_RCC_OscConfig+0x82c>)
 8001ac6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001aca:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f003 0320 	and.w	r3, r3, #32
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d03c      	beq.n	8001b52 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d01c      	beq.n	8001b1a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001ae0:	4b9d      	ldr	r3, [pc, #628]	; (8001d58 <HAL_RCC_OscConfig+0x82c>)
 8001ae2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ae6:	4a9c      	ldr	r2, [pc, #624]	; (8001d58 <HAL_RCC_OscConfig+0x82c>)
 8001ae8:	f043 0301 	orr.w	r3, r3, #1
 8001aec:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001af0:	f7ff fa38 	bl	8000f64 <HAL_GetTick>
 8001af4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001af6:	e008      	b.n	8001b0a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001af8:	f7ff fa34 	bl	8000f64 <HAL_GetTick>
 8001afc:	4602      	mov	r2, r0
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	2b02      	cmp	r3, #2
 8001b04:	d901      	bls.n	8001b0a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001b06:	2303      	movs	r3, #3
 8001b08:	e12b      	b.n	8001d62 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001b0a:	4b93      	ldr	r3, [pc, #588]	; (8001d58 <HAL_RCC_OscConfig+0x82c>)
 8001b0c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b10:	f003 0302 	and.w	r3, r3, #2
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d0ef      	beq.n	8001af8 <HAL_RCC_OscConfig+0x5cc>
 8001b18:	e01b      	b.n	8001b52 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001b1a:	4b8f      	ldr	r3, [pc, #572]	; (8001d58 <HAL_RCC_OscConfig+0x82c>)
 8001b1c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b20:	4a8d      	ldr	r2, [pc, #564]	; (8001d58 <HAL_RCC_OscConfig+0x82c>)
 8001b22:	f023 0301 	bic.w	r3, r3, #1
 8001b26:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b2a:	f7ff fa1b 	bl	8000f64 <HAL_GetTick>
 8001b2e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001b30:	e008      	b.n	8001b44 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b32:	f7ff fa17 	bl	8000f64 <HAL_GetTick>
 8001b36:	4602      	mov	r2, r0
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	1ad3      	subs	r3, r2, r3
 8001b3c:	2b02      	cmp	r3, #2
 8001b3e:	d901      	bls.n	8001b44 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001b40:	2303      	movs	r3, #3
 8001b42:	e10e      	b.n	8001d62 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001b44:	4b84      	ldr	r3, [pc, #528]	; (8001d58 <HAL_RCC_OscConfig+0x82c>)
 8001b46:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b4a:	f003 0302 	and.w	r3, r3, #2
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d1ef      	bne.n	8001b32 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	f000 8102 	beq.w	8001d60 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b60:	2b02      	cmp	r3, #2
 8001b62:	f040 80c5 	bne.w	8001cf0 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001b66:	4b7c      	ldr	r3, [pc, #496]	; (8001d58 <HAL_RCC_OscConfig+0x82c>)
 8001b68:	68db      	ldr	r3, [r3, #12]
 8001b6a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	f003 0203 	and.w	r2, r3, #3
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b76:	429a      	cmp	r2, r3
 8001b78:	d12c      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b84:	3b01      	subs	r3, #1
 8001b86:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d123      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b96:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d11b      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ba6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d113      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bb6:	085b      	lsrs	r3, r3, #1
 8001bb8:	3b01      	subs	r3, #1
 8001bba:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d109      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bca:	085b      	lsrs	r3, r3, #1
 8001bcc:	3b01      	subs	r3, #1
 8001bce:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d067      	beq.n	8001ca4 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001bd4:	69bb      	ldr	r3, [r7, #24]
 8001bd6:	2b0c      	cmp	r3, #12
 8001bd8:	d062      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001bda:	4b5f      	ldr	r3, [pc, #380]	; (8001d58 <HAL_RCC_OscConfig+0x82c>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d001      	beq.n	8001bea <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e0bb      	b.n	8001d62 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001bea:	4b5b      	ldr	r3, [pc, #364]	; (8001d58 <HAL_RCC_OscConfig+0x82c>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a5a      	ldr	r2, [pc, #360]	; (8001d58 <HAL_RCC_OscConfig+0x82c>)
 8001bf0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001bf4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001bf6:	f7ff f9b5 	bl	8000f64 <HAL_GetTick>
 8001bfa:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bfc:	e008      	b.n	8001c10 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bfe:	f7ff f9b1 	bl	8000f64 <HAL_GetTick>
 8001c02:	4602      	mov	r2, r0
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	1ad3      	subs	r3, r2, r3
 8001c08:	2b02      	cmp	r3, #2
 8001c0a:	d901      	bls.n	8001c10 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001c0c:	2303      	movs	r3, #3
 8001c0e:	e0a8      	b.n	8001d62 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c10:	4b51      	ldr	r3, [pc, #324]	; (8001d58 <HAL_RCC_OscConfig+0x82c>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d1f0      	bne.n	8001bfe <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c1c:	4b4e      	ldr	r3, [pc, #312]	; (8001d58 <HAL_RCC_OscConfig+0x82c>)
 8001c1e:	68da      	ldr	r2, [r3, #12]
 8001c20:	4b4e      	ldr	r3, [pc, #312]	; (8001d5c <HAL_RCC_OscConfig+0x830>)
 8001c22:	4013      	ands	r3, r2
 8001c24:	687a      	ldr	r2, [r7, #4]
 8001c26:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001c28:	687a      	ldr	r2, [r7, #4]
 8001c2a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001c2c:	3a01      	subs	r2, #1
 8001c2e:	0112      	lsls	r2, r2, #4
 8001c30:	4311      	orrs	r1, r2
 8001c32:	687a      	ldr	r2, [r7, #4]
 8001c34:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001c36:	0212      	lsls	r2, r2, #8
 8001c38:	4311      	orrs	r1, r2
 8001c3a:	687a      	ldr	r2, [r7, #4]
 8001c3c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001c3e:	0852      	lsrs	r2, r2, #1
 8001c40:	3a01      	subs	r2, #1
 8001c42:	0552      	lsls	r2, r2, #21
 8001c44:	4311      	orrs	r1, r2
 8001c46:	687a      	ldr	r2, [r7, #4]
 8001c48:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001c4a:	0852      	lsrs	r2, r2, #1
 8001c4c:	3a01      	subs	r2, #1
 8001c4e:	0652      	lsls	r2, r2, #25
 8001c50:	4311      	orrs	r1, r2
 8001c52:	687a      	ldr	r2, [r7, #4]
 8001c54:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001c56:	06d2      	lsls	r2, r2, #27
 8001c58:	430a      	orrs	r2, r1
 8001c5a:	493f      	ldr	r1, [pc, #252]	; (8001d58 <HAL_RCC_OscConfig+0x82c>)
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001c60:	4b3d      	ldr	r3, [pc, #244]	; (8001d58 <HAL_RCC_OscConfig+0x82c>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a3c      	ldr	r2, [pc, #240]	; (8001d58 <HAL_RCC_OscConfig+0x82c>)
 8001c66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c6a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c6c:	4b3a      	ldr	r3, [pc, #232]	; (8001d58 <HAL_RCC_OscConfig+0x82c>)
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	4a39      	ldr	r2, [pc, #228]	; (8001d58 <HAL_RCC_OscConfig+0x82c>)
 8001c72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c76:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c78:	f7ff f974 	bl	8000f64 <HAL_GetTick>
 8001c7c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c7e:	e008      	b.n	8001c92 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c80:	f7ff f970 	bl	8000f64 <HAL_GetTick>
 8001c84:	4602      	mov	r2, r0
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	2b02      	cmp	r3, #2
 8001c8c:	d901      	bls.n	8001c92 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e067      	b.n	8001d62 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c92:	4b31      	ldr	r3, [pc, #196]	; (8001d58 <HAL_RCC_OscConfig+0x82c>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d0f0      	beq.n	8001c80 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c9e:	e05f      	b.n	8001d60 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e05e      	b.n	8001d62 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ca4:	4b2c      	ldr	r3, [pc, #176]	; (8001d58 <HAL_RCC_OscConfig+0x82c>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d157      	bne.n	8001d60 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001cb0:	4b29      	ldr	r3, [pc, #164]	; (8001d58 <HAL_RCC_OscConfig+0x82c>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a28      	ldr	r2, [pc, #160]	; (8001d58 <HAL_RCC_OscConfig+0x82c>)
 8001cb6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cba:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001cbc:	4b26      	ldr	r3, [pc, #152]	; (8001d58 <HAL_RCC_OscConfig+0x82c>)
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	4a25      	ldr	r2, [pc, #148]	; (8001d58 <HAL_RCC_OscConfig+0x82c>)
 8001cc2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cc6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001cc8:	f7ff f94c 	bl	8000f64 <HAL_GetTick>
 8001ccc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cce:	e008      	b.n	8001ce2 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cd0:	f7ff f948 	bl	8000f64 <HAL_GetTick>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	2b02      	cmp	r3, #2
 8001cdc:	d901      	bls.n	8001ce2 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	e03f      	b.n	8001d62 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ce2:	4b1d      	ldr	r3, [pc, #116]	; (8001d58 <HAL_RCC_OscConfig+0x82c>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d0f0      	beq.n	8001cd0 <HAL_RCC_OscConfig+0x7a4>
 8001cee:	e037      	b.n	8001d60 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001cf0:	69bb      	ldr	r3, [r7, #24]
 8001cf2:	2b0c      	cmp	r3, #12
 8001cf4:	d02d      	beq.n	8001d52 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cf6:	4b18      	ldr	r3, [pc, #96]	; (8001d58 <HAL_RCC_OscConfig+0x82c>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a17      	ldr	r2, [pc, #92]	; (8001d58 <HAL_RCC_OscConfig+0x82c>)
 8001cfc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d00:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8001d02:	4b15      	ldr	r3, [pc, #84]	; (8001d58 <HAL_RCC_OscConfig+0x82c>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d105      	bne.n	8001d1a <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001d0e:	4b12      	ldr	r3, [pc, #72]	; (8001d58 <HAL_RCC_OscConfig+0x82c>)
 8001d10:	68db      	ldr	r3, [r3, #12]
 8001d12:	4a11      	ldr	r2, [pc, #68]	; (8001d58 <HAL_RCC_OscConfig+0x82c>)
 8001d14:	f023 0303 	bic.w	r3, r3, #3
 8001d18:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001d1a:	4b0f      	ldr	r3, [pc, #60]	; (8001d58 <HAL_RCC_OscConfig+0x82c>)
 8001d1c:	68db      	ldr	r3, [r3, #12]
 8001d1e:	4a0e      	ldr	r2, [pc, #56]	; (8001d58 <HAL_RCC_OscConfig+0x82c>)
 8001d20:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001d24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d28:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d2a:	f7ff f91b 	bl	8000f64 <HAL_GetTick>
 8001d2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d30:	e008      	b.n	8001d44 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d32:	f7ff f917 	bl	8000f64 <HAL_GetTick>
 8001d36:	4602      	mov	r2, r0
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	1ad3      	subs	r3, r2, r3
 8001d3c:	2b02      	cmp	r3, #2
 8001d3e:	d901      	bls.n	8001d44 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8001d40:	2303      	movs	r3, #3
 8001d42:	e00e      	b.n	8001d62 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d44:	4b04      	ldr	r3, [pc, #16]	; (8001d58 <HAL_RCC_OscConfig+0x82c>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d1f0      	bne.n	8001d32 <HAL_RCC_OscConfig+0x806>
 8001d50:	e006      	b.n	8001d60 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e005      	b.n	8001d62 <HAL_RCC_OscConfig+0x836>
 8001d56:	bf00      	nop
 8001d58:	40021000 	.word	0x40021000
 8001d5c:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8001d60:	2300      	movs	r3, #0
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3720      	adds	r7, #32
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop

08001d6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b084      	sub	sp, #16
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d101      	bne.n	8001d80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e0c8      	b.n	8001f12 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d80:	4b66      	ldr	r3, [pc, #408]	; (8001f1c <HAL_RCC_ClockConfig+0x1b0>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 0307 	and.w	r3, r3, #7
 8001d88:	683a      	ldr	r2, [r7, #0]
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	d910      	bls.n	8001db0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d8e:	4b63      	ldr	r3, [pc, #396]	; (8001f1c <HAL_RCC_ClockConfig+0x1b0>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f023 0207 	bic.w	r2, r3, #7
 8001d96:	4961      	ldr	r1, [pc, #388]	; (8001f1c <HAL_RCC_ClockConfig+0x1b0>)
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d9e:	4b5f      	ldr	r3, [pc, #380]	; (8001f1c <HAL_RCC_ClockConfig+0x1b0>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 0307 	and.w	r3, r3, #7
 8001da6:	683a      	ldr	r2, [r7, #0]
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d001      	beq.n	8001db0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001dac:	2301      	movs	r3, #1
 8001dae:	e0b0      	b.n	8001f12 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f003 0301 	and.w	r3, r3, #1
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d04c      	beq.n	8001e56 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	2b03      	cmp	r3, #3
 8001dc2:	d107      	bne.n	8001dd4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dc4:	4b56      	ldr	r3, [pc, #344]	; (8001f20 <HAL_RCC_ClockConfig+0x1b4>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d121      	bne.n	8001e14 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e09e      	b.n	8001f12 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	2b02      	cmp	r3, #2
 8001dda:	d107      	bne.n	8001dec <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ddc:	4b50      	ldr	r3, [pc, #320]	; (8001f20 <HAL_RCC_ClockConfig+0x1b4>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d115      	bne.n	8001e14 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	e092      	b.n	8001f12 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d107      	bne.n	8001e04 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001df4:	4b4a      	ldr	r3, [pc, #296]	; (8001f20 <HAL_RCC_ClockConfig+0x1b4>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f003 0302 	and.w	r3, r3, #2
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d109      	bne.n	8001e14 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e086      	b.n	8001f12 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e04:	4b46      	ldr	r3, [pc, #280]	; (8001f20 <HAL_RCC_ClockConfig+0x1b4>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d101      	bne.n	8001e14 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	e07e      	b.n	8001f12 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e14:	4b42      	ldr	r3, [pc, #264]	; (8001f20 <HAL_RCC_ClockConfig+0x1b4>)
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	f023 0203 	bic.w	r2, r3, #3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	493f      	ldr	r1, [pc, #252]	; (8001f20 <HAL_RCC_ClockConfig+0x1b4>)
 8001e22:	4313      	orrs	r3, r2
 8001e24:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e26:	f7ff f89d 	bl	8000f64 <HAL_GetTick>
 8001e2a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e2c:	e00a      	b.n	8001e44 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e2e:	f7ff f899 	bl	8000f64 <HAL_GetTick>
 8001e32:	4602      	mov	r2, r0
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	1ad3      	subs	r3, r2, r3
 8001e38:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d901      	bls.n	8001e44 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001e40:	2303      	movs	r3, #3
 8001e42:	e066      	b.n	8001f12 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e44:	4b36      	ldr	r3, [pc, #216]	; (8001f20 <HAL_RCC_ClockConfig+0x1b4>)
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	f003 020c 	and.w	r2, r3, #12
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	009b      	lsls	r3, r3, #2
 8001e52:	429a      	cmp	r2, r3
 8001e54:	d1eb      	bne.n	8001e2e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0302 	and.w	r3, r3, #2
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d008      	beq.n	8001e74 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e62:	4b2f      	ldr	r3, [pc, #188]	; (8001f20 <HAL_RCC_ClockConfig+0x1b4>)
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	492c      	ldr	r1, [pc, #176]	; (8001f20 <HAL_RCC_ClockConfig+0x1b4>)
 8001e70:	4313      	orrs	r3, r2
 8001e72:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e74:	4b29      	ldr	r3, [pc, #164]	; (8001f1c <HAL_RCC_ClockConfig+0x1b0>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 0307 	and.w	r3, r3, #7
 8001e7c:	683a      	ldr	r2, [r7, #0]
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	d210      	bcs.n	8001ea4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e82:	4b26      	ldr	r3, [pc, #152]	; (8001f1c <HAL_RCC_ClockConfig+0x1b0>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f023 0207 	bic.w	r2, r3, #7
 8001e8a:	4924      	ldr	r1, [pc, #144]	; (8001f1c <HAL_RCC_ClockConfig+0x1b0>)
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e92:	4b22      	ldr	r3, [pc, #136]	; (8001f1c <HAL_RCC_ClockConfig+0x1b0>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 0307 	and.w	r3, r3, #7
 8001e9a:	683a      	ldr	r2, [r7, #0]
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d001      	beq.n	8001ea4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e036      	b.n	8001f12 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f003 0304 	and.w	r3, r3, #4
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d008      	beq.n	8001ec2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001eb0:	4b1b      	ldr	r3, [pc, #108]	; (8001f20 <HAL_RCC_ClockConfig+0x1b4>)
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	4918      	ldr	r1, [pc, #96]	; (8001f20 <HAL_RCC_ClockConfig+0x1b4>)
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 0308 	and.w	r3, r3, #8
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d009      	beq.n	8001ee2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ece:	4b14      	ldr	r3, [pc, #80]	; (8001f20 <HAL_RCC_ClockConfig+0x1b4>)
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	691b      	ldr	r3, [r3, #16]
 8001eda:	00db      	lsls	r3, r3, #3
 8001edc:	4910      	ldr	r1, [pc, #64]	; (8001f20 <HAL_RCC_ClockConfig+0x1b4>)
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ee2:	f000 f825 	bl	8001f30 <HAL_RCC_GetSysClockFreq>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	4b0d      	ldr	r3, [pc, #52]	; (8001f20 <HAL_RCC_ClockConfig+0x1b4>)
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	091b      	lsrs	r3, r3, #4
 8001eee:	f003 030f 	and.w	r3, r3, #15
 8001ef2:	490c      	ldr	r1, [pc, #48]	; (8001f24 <HAL_RCC_ClockConfig+0x1b8>)
 8001ef4:	5ccb      	ldrb	r3, [r1, r3]
 8001ef6:	f003 031f 	and.w	r3, r3, #31
 8001efa:	fa22 f303 	lsr.w	r3, r2, r3
 8001efe:	4a0a      	ldr	r2, [pc, #40]	; (8001f28 <HAL_RCC_ClockConfig+0x1bc>)
 8001f00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001f02:	4b0a      	ldr	r3, [pc, #40]	; (8001f2c <HAL_RCC_ClockConfig+0x1c0>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4618      	mov	r0, r3
 8001f08:	f7fe fc90 	bl	800082c <HAL_InitTick>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	72fb      	strb	r3, [r7, #11]

  return status;
 8001f10:	7afb      	ldrb	r3, [r7, #11]
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3710      	adds	r7, #16
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	40022000 	.word	0x40022000
 8001f20:	40021000 	.word	0x40021000
 8001f24:	080074ac 	.word	0x080074ac
 8001f28:	20000000 	.word	0x20000000
 8001f2c:	20000004 	.word	0x20000004

08001f30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b089      	sub	sp, #36	; 0x24
 8001f34:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001f36:	2300      	movs	r3, #0
 8001f38:	61fb      	str	r3, [r7, #28]
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f3e:	4b3e      	ldr	r3, [pc, #248]	; (8002038 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	f003 030c 	and.w	r3, r3, #12
 8001f46:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f48:	4b3b      	ldr	r3, [pc, #236]	; (8002038 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	f003 0303 	and.w	r3, r3, #3
 8001f50:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d005      	beq.n	8001f64 <HAL_RCC_GetSysClockFreq+0x34>
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	2b0c      	cmp	r3, #12
 8001f5c:	d121      	bne.n	8001fa2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d11e      	bne.n	8001fa2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001f64:	4b34      	ldr	r3, [pc, #208]	; (8002038 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 0308 	and.w	r3, r3, #8
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d107      	bne.n	8001f80 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001f70:	4b31      	ldr	r3, [pc, #196]	; (8002038 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f76:	0a1b      	lsrs	r3, r3, #8
 8001f78:	f003 030f 	and.w	r3, r3, #15
 8001f7c:	61fb      	str	r3, [r7, #28]
 8001f7e:	e005      	b.n	8001f8c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001f80:	4b2d      	ldr	r3, [pc, #180]	; (8002038 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	091b      	lsrs	r3, r3, #4
 8001f86:	f003 030f 	and.w	r3, r3, #15
 8001f8a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001f8c:	4a2b      	ldr	r2, [pc, #172]	; (800203c <HAL_RCC_GetSysClockFreq+0x10c>)
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f94:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d10d      	bne.n	8001fb8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001fa0:	e00a      	b.n	8001fb8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	2b04      	cmp	r3, #4
 8001fa6:	d102      	bne.n	8001fae <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001fa8:	4b25      	ldr	r3, [pc, #148]	; (8002040 <HAL_RCC_GetSysClockFreq+0x110>)
 8001faa:	61bb      	str	r3, [r7, #24]
 8001fac:	e004      	b.n	8001fb8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	2b08      	cmp	r3, #8
 8001fb2:	d101      	bne.n	8001fb8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001fb4:	4b23      	ldr	r3, [pc, #140]	; (8002044 <HAL_RCC_GetSysClockFreq+0x114>)
 8001fb6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	2b0c      	cmp	r3, #12
 8001fbc:	d134      	bne.n	8002028 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001fbe:	4b1e      	ldr	r3, [pc, #120]	; (8002038 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fc0:	68db      	ldr	r3, [r3, #12]
 8001fc2:	f003 0303 	and.w	r3, r3, #3
 8001fc6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	2b02      	cmp	r3, #2
 8001fcc:	d003      	beq.n	8001fd6 <HAL_RCC_GetSysClockFreq+0xa6>
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	2b03      	cmp	r3, #3
 8001fd2:	d003      	beq.n	8001fdc <HAL_RCC_GetSysClockFreq+0xac>
 8001fd4:	e005      	b.n	8001fe2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001fd6:	4b1a      	ldr	r3, [pc, #104]	; (8002040 <HAL_RCC_GetSysClockFreq+0x110>)
 8001fd8:	617b      	str	r3, [r7, #20]
      break;
 8001fda:	e005      	b.n	8001fe8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001fdc:	4b19      	ldr	r3, [pc, #100]	; (8002044 <HAL_RCC_GetSysClockFreq+0x114>)
 8001fde:	617b      	str	r3, [r7, #20]
      break;
 8001fe0:	e002      	b.n	8001fe8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	617b      	str	r3, [r7, #20]
      break;
 8001fe6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001fe8:	4b13      	ldr	r3, [pc, #76]	; (8002038 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	091b      	lsrs	r3, r3, #4
 8001fee:	f003 0307 	and.w	r3, r3, #7
 8001ff2:	3301      	adds	r3, #1
 8001ff4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001ff6:	4b10      	ldr	r3, [pc, #64]	; (8002038 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ff8:	68db      	ldr	r3, [r3, #12]
 8001ffa:	0a1b      	lsrs	r3, r3, #8
 8001ffc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002000:	697a      	ldr	r2, [r7, #20]
 8002002:	fb02 f203 	mul.w	r2, r2, r3
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	fbb2 f3f3 	udiv	r3, r2, r3
 800200c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800200e:	4b0a      	ldr	r3, [pc, #40]	; (8002038 <HAL_RCC_GetSysClockFreq+0x108>)
 8002010:	68db      	ldr	r3, [r3, #12]
 8002012:	0e5b      	lsrs	r3, r3, #25
 8002014:	f003 0303 	and.w	r3, r3, #3
 8002018:	3301      	adds	r3, #1
 800201a:	005b      	lsls	r3, r3, #1
 800201c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800201e:	697a      	ldr	r2, [r7, #20]
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	fbb2 f3f3 	udiv	r3, r2, r3
 8002026:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002028:	69bb      	ldr	r3, [r7, #24]
}
 800202a:	4618      	mov	r0, r3
 800202c:	3724      	adds	r7, #36	; 0x24
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	40021000 	.word	0x40021000
 800203c:	080074c4 	.word	0x080074c4
 8002040:	00f42400 	.word	0x00f42400
 8002044:	007a1200 	.word	0x007a1200

08002048 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800204c:	4b03      	ldr	r3, [pc, #12]	; (800205c <HAL_RCC_GetHCLKFreq+0x14>)
 800204e:	681b      	ldr	r3, [r3, #0]
}
 8002050:	4618      	mov	r0, r3
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr
 800205a:	bf00      	nop
 800205c:	20000000 	.word	0x20000000

08002060 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002064:	f7ff fff0 	bl	8002048 <HAL_RCC_GetHCLKFreq>
 8002068:	4602      	mov	r2, r0
 800206a:	4b06      	ldr	r3, [pc, #24]	; (8002084 <HAL_RCC_GetPCLK1Freq+0x24>)
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	0a1b      	lsrs	r3, r3, #8
 8002070:	f003 0307 	and.w	r3, r3, #7
 8002074:	4904      	ldr	r1, [pc, #16]	; (8002088 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002076:	5ccb      	ldrb	r3, [r1, r3]
 8002078:	f003 031f 	and.w	r3, r3, #31
 800207c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002080:	4618      	mov	r0, r3
 8002082:	bd80      	pop	{r7, pc}
 8002084:	40021000 	.word	0x40021000
 8002088:	080074bc 	.word	0x080074bc

0800208c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002090:	f7ff ffda 	bl	8002048 <HAL_RCC_GetHCLKFreq>
 8002094:	4602      	mov	r2, r0
 8002096:	4b06      	ldr	r3, [pc, #24]	; (80020b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	0adb      	lsrs	r3, r3, #11
 800209c:	f003 0307 	and.w	r3, r3, #7
 80020a0:	4904      	ldr	r1, [pc, #16]	; (80020b4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80020a2:	5ccb      	ldrb	r3, [r1, r3]
 80020a4:	f003 031f 	and.w	r3, r3, #31
 80020a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	40021000 	.word	0x40021000
 80020b4:	080074bc 	.word	0x080074bc

080020b8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	220f      	movs	r2, #15
 80020c6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80020c8:	4b12      	ldr	r3, [pc, #72]	; (8002114 <HAL_RCC_GetClockConfig+0x5c>)
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	f003 0203 	and.w	r2, r3, #3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80020d4:	4b0f      	ldr	r3, [pc, #60]	; (8002114 <HAL_RCC_GetClockConfig+0x5c>)
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80020e0:	4b0c      	ldr	r3, [pc, #48]	; (8002114 <HAL_RCC_GetClockConfig+0x5c>)
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80020ec:	4b09      	ldr	r3, [pc, #36]	; (8002114 <HAL_RCC_GetClockConfig+0x5c>)
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	08db      	lsrs	r3, r3, #3
 80020f2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80020fa:	4b07      	ldr	r3, [pc, #28]	; (8002118 <HAL_RCC_GetClockConfig+0x60>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 0207 	and.w	r2, r3, #7
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	601a      	str	r2, [r3, #0]
}
 8002106:	bf00      	nop
 8002108:	370c      	adds	r7, #12
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop
 8002114:	40021000 	.word	0x40021000
 8002118:	40022000 	.word	0x40022000

0800211c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b086      	sub	sp, #24
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002124:	2300      	movs	r3, #0
 8002126:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002128:	4b2a      	ldr	r3, [pc, #168]	; (80021d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800212a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800212c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002130:	2b00      	cmp	r3, #0
 8002132:	d003      	beq.n	800213c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002134:	f7ff f996 	bl	8001464 <HAL_PWREx_GetVoltageRange>
 8002138:	6178      	str	r0, [r7, #20]
 800213a:	e014      	b.n	8002166 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800213c:	4b25      	ldr	r3, [pc, #148]	; (80021d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800213e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002140:	4a24      	ldr	r2, [pc, #144]	; (80021d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002142:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002146:	6593      	str	r3, [r2, #88]	; 0x58
 8002148:	4b22      	ldr	r3, [pc, #136]	; (80021d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800214a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800214c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002150:	60fb      	str	r3, [r7, #12]
 8002152:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002154:	f7ff f986 	bl	8001464 <HAL_PWREx_GetVoltageRange>
 8002158:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800215a:	4b1e      	ldr	r3, [pc, #120]	; (80021d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800215c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800215e:	4a1d      	ldr	r2, [pc, #116]	; (80021d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002160:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002164:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800216c:	d10b      	bne.n	8002186 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2b80      	cmp	r3, #128	; 0x80
 8002172:	d919      	bls.n	80021a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2ba0      	cmp	r3, #160	; 0xa0
 8002178:	d902      	bls.n	8002180 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800217a:	2302      	movs	r3, #2
 800217c:	613b      	str	r3, [r7, #16]
 800217e:	e013      	b.n	80021a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002180:	2301      	movs	r3, #1
 8002182:	613b      	str	r3, [r7, #16]
 8002184:	e010      	b.n	80021a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2b80      	cmp	r3, #128	; 0x80
 800218a:	d902      	bls.n	8002192 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800218c:	2303      	movs	r3, #3
 800218e:	613b      	str	r3, [r7, #16]
 8002190:	e00a      	b.n	80021a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2b80      	cmp	r3, #128	; 0x80
 8002196:	d102      	bne.n	800219e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002198:	2302      	movs	r3, #2
 800219a:	613b      	str	r3, [r7, #16]
 800219c:	e004      	b.n	80021a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2b70      	cmp	r3, #112	; 0x70
 80021a2:	d101      	bne.n	80021a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80021a4:	2301      	movs	r3, #1
 80021a6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80021a8:	4b0b      	ldr	r3, [pc, #44]	; (80021d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f023 0207 	bic.w	r2, r3, #7
 80021b0:	4909      	ldr	r1, [pc, #36]	; (80021d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	4313      	orrs	r3, r2
 80021b6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80021b8:	4b07      	ldr	r3, [pc, #28]	; (80021d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 0307 	and.w	r3, r3, #7
 80021c0:	693a      	ldr	r2, [r7, #16]
 80021c2:	429a      	cmp	r2, r3
 80021c4:	d001      	beq.n	80021ca <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e000      	b.n	80021cc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80021ca:	2300      	movs	r3, #0
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	3718      	adds	r7, #24
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	40021000 	.word	0x40021000
 80021d8:	40022000 	.word	0x40022000

080021dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b086      	sub	sp, #24
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80021e4:	2300      	movs	r3, #0
 80021e6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80021e8:	2300      	movs	r3, #0
 80021ea:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d031      	beq.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021fc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002200:	d01a      	beq.n	8002238 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002202:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002206:	d814      	bhi.n	8002232 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002208:	2b00      	cmp	r3, #0
 800220a:	d009      	beq.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800220c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002210:	d10f      	bne.n	8002232 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002212:	4bac      	ldr	r3, [pc, #688]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002214:	68db      	ldr	r3, [r3, #12]
 8002216:	4aab      	ldr	r2, [pc, #684]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002218:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800221c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800221e:	e00c      	b.n	800223a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	3304      	adds	r3, #4
 8002224:	2100      	movs	r1, #0
 8002226:	4618      	mov	r0, r3
 8002228:	f000 f9dc 	bl	80025e4 <RCCEx_PLLSAI1_Config>
 800222c:	4603      	mov	r3, r0
 800222e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002230:	e003      	b.n	800223a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	74fb      	strb	r3, [r7, #19]
      break;
 8002236:	e000      	b.n	800223a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002238:	bf00      	nop
    }

    if(ret == HAL_OK)
 800223a:	7cfb      	ldrb	r3, [r7, #19]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d10b      	bne.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002240:	4ba0      	ldr	r3, [pc, #640]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002242:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002246:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800224e:	499d      	ldr	r1, [pc, #628]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002250:	4313      	orrs	r3, r2
 8002252:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002256:	e001      	b.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002258:	7cfb      	ldrb	r3, [r7, #19]
 800225a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002264:	2b00      	cmp	r3, #0
 8002266:	f000 8099 	beq.w	800239c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800226a:	2300      	movs	r3, #0
 800226c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800226e:	4b95      	ldr	r3, [pc, #596]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002270:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002272:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d101      	bne.n	800227e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800227a:	2301      	movs	r3, #1
 800227c:	e000      	b.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800227e:	2300      	movs	r3, #0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d00d      	beq.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002284:	4b8f      	ldr	r3, [pc, #572]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002286:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002288:	4a8e      	ldr	r2, [pc, #568]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800228a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800228e:	6593      	str	r3, [r2, #88]	; 0x58
 8002290:	4b8c      	ldr	r3, [pc, #560]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002292:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002294:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002298:	60bb      	str	r3, [r7, #8]
 800229a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800229c:	2301      	movs	r3, #1
 800229e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022a0:	4b89      	ldr	r3, [pc, #548]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a88      	ldr	r2, [pc, #544]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80022a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022aa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80022ac:	f7fe fe5a 	bl	8000f64 <HAL_GetTick>
 80022b0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80022b2:	e009      	b.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022b4:	f7fe fe56 	bl	8000f64 <HAL_GetTick>
 80022b8:	4602      	mov	r2, r0
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d902      	bls.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80022c2:	2303      	movs	r3, #3
 80022c4:	74fb      	strb	r3, [r7, #19]
        break;
 80022c6:	e005      	b.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80022c8:	4b7f      	ldr	r3, [pc, #508]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d0ef      	beq.n	80022b4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80022d4:	7cfb      	ldrb	r3, [r7, #19]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d155      	bne.n	8002386 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80022da:	4b7a      	ldr	r3, [pc, #488]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80022dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022e4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d01e      	beq.n	800232a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022f0:	697a      	ldr	r2, [r7, #20]
 80022f2:	429a      	cmp	r2, r3
 80022f4:	d019      	beq.n	800232a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80022f6:	4b73      	ldr	r3, [pc, #460]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80022f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002300:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002302:	4b70      	ldr	r3, [pc, #448]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002304:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002308:	4a6e      	ldr	r2, [pc, #440]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800230a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800230e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002312:	4b6c      	ldr	r3, [pc, #432]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002314:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002318:	4a6a      	ldr	r2, [pc, #424]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800231a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800231e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002322:	4a68      	ldr	r2, [pc, #416]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	f003 0301 	and.w	r3, r3, #1
 8002330:	2b00      	cmp	r3, #0
 8002332:	d016      	beq.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002334:	f7fe fe16 	bl	8000f64 <HAL_GetTick>
 8002338:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800233a:	e00b      	b.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800233c:	f7fe fe12 	bl	8000f64 <HAL_GetTick>
 8002340:	4602      	mov	r2, r0
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	f241 3288 	movw	r2, #5000	; 0x1388
 800234a:	4293      	cmp	r3, r2
 800234c:	d902      	bls.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800234e:	2303      	movs	r3, #3
 8002350:	74fb      	strb	r3, [r7, #19]
            break;
 8002352:	e006      	b.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002354:	4b5b      	ldr	r3, [pc, #364]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002356:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800235a:	f003 0302 	and.w	r3, r3, #2
 800235e:	2b00      	cmp	r3, #0
 8002360:	d0ec      	beq.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002362:	7cfb      	ldrb	r3, [r7, #19]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d10b      	bne.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002368:	4b56      	ldr	r3, [pc, #344]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800236a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800236e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002376:	4953      	ldr	r1, [pc, #332]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002378:	4313      	orrs	r3, r2
 800237a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800237e:	e004      	b.n	800238a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002380:	7cfb      	ldrb	r3, [r7, #19]
 8002382:	74bb      	strb	r3, [r7, #18]
 8002384:	e001      	b.n	800238a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002386:	7cfb      	ldrb	r3, [r7, #19]
 8002388:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800238a:	7c7b      	ldrb	r3, [r7, #17]
 800238c:	2b01      	cmp	r3, #1
 800238e:	d105      	bne.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002390:	4b4c      	ldr	r3, [pc, #304]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002392:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002394:	4a4b      	ldr	r2, [pc, #300]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002396:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800239a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 0301 	and.w	r3, r3, #1
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d00a      	beq.n	80023be <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80023a8:	4b46      	ldr	r3, [pc, #280]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80023aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ae:	f023 0203 	bic.w	r2, r3, #3
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6a1b      	ldr	r3, [r3, #32]
 80023b6:	4943      	ldr	r1, [pc, #268]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80023b8:	4313      	orrs	r3, r2
 80023ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0302 	and.w	r3, r3, #2
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d00a      	beq.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80023ca:	4b3e      	ldr	r3, [pc, #248]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80023cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023d0:	f023 020c 	bic.w	r2, r3, #12
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d8:	493a      	ldr	r1, [pc, #232]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80023da:	4313      	orrs	r3, r2
 80023dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 0320 	and.w	r3, r3, #32
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d00a      	beq.n	8002402 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80023ec:	4b35      	ldr	r3, [pc, #212]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80023ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023f2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023fa:	4932      	ldr	r1, [pc, #200]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80023fc:	4313      	orrs	r3, r2
 80023fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800240a:	2b00      	cmp	r3, #0
 800240c:	d00a      	beq.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800240e:	4b2d      	ldr	r3, [pc, #180]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002410:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002414:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800241c:	4929      	ldr	r1, [pc, #164]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800241e:	4313      	orrs	r3, r2
 8002420:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800242c:	2b00      	cmp	r3, #0
 800242e:	d00a      	beq.n	8002446 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002430:	4b24      	ldr	r3, [pc, #144]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002432:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002436:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800243e:	4921      	ldr	r1, [pc, #132]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002440:	4313      	orrs	r3, r2
 8002442:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800244e:	2b00      	cmp	r3, #0
 8002450:	d00a      	beq.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002452:	4b1c      	ldr	r3, [pc, #112]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002454:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002458:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002460:	4918      	ldr	r1, [pc, #96]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002462:	4313      	orrs	r3, r2
 8002464:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002470:	2b00      	cmp	r3, #0
 8002472:	d00a      	beq.n	800248a <HAL_RCCEx_PeriphCLKConfig+0x2ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002474:	4b13      	ldr	r3, [pc, #76]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002476:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800247a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002482:	4910      	ldr	r1, [pc, #64]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002484:	4313      	orrs	r3, r2
 8002486:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d02c      	beq.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002496:	4b0b      	ldr	r3, [pc, #44]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002498:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800249c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a4:	4907      	ldr	r1, [pc, #28]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80024a6:	4313      	orrs	r3, r2
 80024a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80024b4:	d10a      	bne.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024b6:	4b03      	ldr	r3, [pc, #12]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80024b8:	68db      	ldr	r3, [r3, #12]
 80024ba:	4a02      	ldr	r2, [pc, #8]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80024bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024c0:	60d3      	str	r3, [r2, #12]
 80024c2:	e015      	b.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x314>
 80024c4:	40021000 	.word	0x40021000
 80024c8:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80024d4:	d10c      	bne.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x314>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	3304      	adds	r3, #4
 80024da:	2101      	movs	r1, #1
 80024dc:	4618      	mov	r0, r3
 80024de:	f000 f881 	bl	80025e4 <RCCEx_PLLSAI1_Config>
 80024e2:	4603      	mov	r3, r0
 80024e4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80024e6:	7cfb      	ldrb	r3, [r7, #19]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d001      	beq.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x314>
        {
          /* set overall return value */
          status = ret;
 80024ec:	7cfb      	ldrb	r3, [r7, #19]
 80024ee:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d028      	beq.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x372>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80024fc:	4b30      	ldr	r3, [pc, #192]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80024fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002502:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800250a:	492d      	ldr	r1, [pc, #180]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800250c:	4313      	orrs	r3, r2
 800250e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002516:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800251a:	d106      	bne.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800251c:	4b28      	ldr	r3, [pc, #160]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	4a27      	ldr	r2, [pc, #156]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002522:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002526:	60d3      	str	r3, [r2, #12]
 8002528:	e011      	b.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x372>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800252e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002532:	d10c      	bne.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	3304      	adds	r3, #4
 8002538:	2101      	movs	r1, #1
 800253a:	4618      	mov	r0, r3
 800253c:	f000 f852 	bl	80025e4 <RCCEx_PLLSAI1_Config>
 8002540:	4603      	mov	r3, r0
 8002542:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002544:	7cfb      	ldrb	r3, [r7, #19]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d001      	beq.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x372>
      {
        /* set overall return value */
        status = ret;
 800254a:	7cfb      	ldrb	r3, [r7, #19]
 800254c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d01c      	beq.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800255a:	4b19      	ldr	r3, [pc, #100]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800255c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002560:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002568:	4915      	ldr	r1, [pc, #84]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800256a:	4313      	orrs	r3, r2
 800256c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002574:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002578:	d10c      	bne.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	3304      	adds	r3, #4
 800257e:	2102      	movs	r1, #2
 8002580:	4618      	mov	r0, r3
 8002582:	f000 f82f 	bl	80025e4 <RCCEx_PLLSAI1_Config>
 8002586:	4603      	mov	r3, r0
 8002588:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800258a:	7cfb      	ldrb	r3, [r7, #19]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d001      	beq.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8002590:	7cfb      	ldrb	r3, [r7, #19]
 8002592:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800259c:	2b00      	cmp	r3, #0
 800259e:	d00a      	beq.n	80025b6 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80025a0:	4b07      	ldr	r3, [pc, #28]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025a6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025ae:	4904      	ldr	r1, [pc, #16]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025b0:	4313      	orrs	r3, r2
 80025b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80025b6:	7cbb      	ldrb	r3, [r7, #18]
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3718      	adds	r7, #24
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	40021000 	.word	0x40021000

080025c4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80025c4:	b480      	push	{r7}
 80025c6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80025c8:	4b05      	ldr	r3, [pc, #20]	; (80025e0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a04      	ldr	r2, [pc, #16]	; (80025e0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80025ce:	f043 0304 	orr.w	r3, r3, #4
 80025d2:	6013      	str	r3, [r2, #0]
}
 80025d4:	bf00      	nop
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr
 80025de:	bf00      	nop
 80025e0:	40021000 	.word	0x40021000

080025e4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80025ee:	2300      	movs	r3, #0
 80025f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80025f2:	4b74      	ldr	r3, [pc, #464]	; (80027c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025f4:	68db      	ldr	r3, [r3, #12]
 80025f6:	f003 0303 	and.w	r3, r3, #3
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d018      	beq.n	8002630 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80025fe:	4b71      	ldr	r3, [pc, #452]	; (80027c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002600:	68db      	ldr	r3, [r3, #12]
 8002602:	f003 0203 	and.w	r2, r3, #3
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	429a      	cmp	r2, r3
 800260c:	d10d      	bne.n	800262a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
       ||
 8002612:	2b00      	cmp	r3, #0
 8002614:	d009      	beq.n	800262a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002616:	4b6b      	ldr	r3, [pc, #428]	; (80027c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002618:	68db      	ldr	r3, [r3, #12]
 800261a:	091b      	lsrs	r3, r3, #4
 800261c:	f003 0307 	and.w	r3, r3, #7
 8002620:	1c5a      	adds	r2, r3, #1
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	685b      	ldr	r3, [r3, #4]
       ||
 8002626:	429a      	cmp	r2, r3
 8002628:	d047      	beq.n	80026ba <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	73fb      	strb	r3, [r7, #15]
 800262e:	e044      	b.n	80026ba <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	2b03      	cmp	r3, #3
 8002636:	d018      	beq.n	800266a <RCCEx_PLLSAI1_Config+0x86>
 8002638:	2b03      	cmp	r3, #3
 800263a:	d825      	bhi.n	8002688 <RCCEx_PLLSAI1_Config+0xa4>
 800263c:	2b01      	cmp	r3, #1
 800263e:	d002      	beq.n	8002646 <RCCEx_PLLSAI1_Config+0x62>
 8002640:	2b02      	cmp	r3, #2
 8002642:	d009      	beq.n	8002658 <RCCEx_PLLSAI1_Config+0x74>
 8002644:	e020      	b.n	8002688 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002646:	4b5f      	ldr	r3, [pc, #380]	; (80027c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0302 	and.w	r3, r3, #2
 800264e:	2b00      	cmp	r3, #0
 8002650:	d11d      	bne.n	800268e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002656:	e01a      	b.n	800268e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002658:	4b5a      	ldr	r3, [pc, #360]	; (80027c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002660:	2b00      	cmp	r3, #0
 8002662:	d116      	bne.n	8002692 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002668:	e013      	b.n	8002692 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800266a:	4b56      	ldr	r3, [pc, #344]	; (80027c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d10f      	bne.n	8002696 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002676:	4b53      	ldr	r3, [pc, #332]	; (80027c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d109      	bne.n	8002696 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002686:	e006      	b.n	8002696 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	73fb      	strb	r3, [r7, #15]
      break;
 800268c:	e004      	b.n	8002698 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800268e:	bf00      	nop
 8002690:	e002      	b.n	8002698 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002692:	bf00      	nop
 8002694:	e000      	b.n	8002698 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002696:	bf00      	nop
    }

    if(status == HAL_OK)
 8002698:	7bfb      	ldrb	r3, [r7, #15]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d10d      	bne.n	80026ba <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800269e:	4b49      	ldr	r3, [pc, #292]	; (80027c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026a0:	68db      	ldr	r3, [r3, #12]
 80026a2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6819      	ldr	r1, [r3, #0]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	3b01      	subs	r3, #1
 80026b0:	011b      	lsls	r3, r3, #4
 80026b2:	430b      	orrs	r3, r1
 80026b4:	4943      	ldr	r1, [pc, #268]	; (80027c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026b6:	4313      	orrs	r3, r2
 80026b8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80026ba:	7bfb      	ldrb	r3, [r7, #15]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d17c      	bne.n	80027ba <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80026c0:	4b40      	ldr	r3, [pc, #256]	; (80027c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a3f      	ldr	r2, [pc, #252]	; (80027c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026c6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80026ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026cc:	f7fe fc4a 	bl	8000f64 <HAL_GetTick>
 80026d0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80026d2:	e009      	b.n	80026e8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80026d4:	f7fe fc46 	bl	8000f64 <HAL_GetTick>
 80026d8:	4602      	mov	r2, r0
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	2b02      	cmp	r3, #2
 80026e0:	d902      	bls.n	80026e8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80026e2:	2303      	movs	r3, #3
 80026e4:	73fb      	strb	r3, [r7, #15]
        break;
 80026e6:	e005      	b.n	80026f4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80026e8:	4b36      	ldr	r3, [pc, #216]	; (80027c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d1ef      	bne.n	80026d4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80026f4:	7bfb      	ldrb	r3, [r7, #15]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d15f      	bne.n	80027ba <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d110      	bne.n	8002722 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002700:	4b30      	ldr	r3, [pc, #192]	; (80027c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002702:	691b      	ldr	r3, [r3, #16]
 8002704:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002708:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800270c:	687a      	ldr	r2, [r7, #4]
 800270e:	6892      	ldr	r2, [r2, #8]
 8002710:	0211      	lsls	r1, r2, #8
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	68d2      	ldr	r2, [r2, #12]
 8002716:	06d2      	lsls	r2, r2, #27
 8002718:	430a      	orrs	r2, r1
 800271a:	492a      	ldr	r1, [pc, #168]	; (80027c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800271c:	4313      	orrs	r3, r2
 800271e:	610b      	str	r3, [r1, #16]
 8002720:	e027      	b.n	8002772 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	2b01      	cmp	r3, #1
 8002726:	d112      	bne.n	800274e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002728:	4b26      	ldr	r3, [pc, #152]	; (80027c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800272a:	691b      	ldr	r3, [r3, #16]
 800272c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002730:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002734:	687a      	ldr	r2, [r7, #4]
 8002736:	6892      	ldr	r2, [r2, #8]
 8002738:	0211      	lsls	r1, r2, #8
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	6912      	ldr	r2, [r2, #16]
 800273e:	0852      	lsrs	r2, r2, #1
 8002740:	3a01      	subs	r2, #1
 8002742:	0552      	lsls	r2, r2, #21
 8002744:	430a      	orrs	r2, r1
 8002746:	491f      	ldr	r1, [pc, #124]	; (80027c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002748:	4313      	orrs	r3, r2
 800274a:	610b      	str	r3, [r1, #16]
 800274c:	e011      	b.n	8002772 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800274e:	4b1d      	ldr	r3, [pc, #116]	; (80027c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002750:	691b      	ldr	r3, [r3, #16]
 8002752:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002756:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	6892      	ldr	r2, [r2, #8]
 800275e:	0211      	lsls	r1, r2, #8
 8002760:	687a      	ldr	r2, [r7, #4]
 8002762:	6952      	ldr	r2, [r2, #20]
 8002764:	0852      	lsrs	r2, r2, #1
 8002766:	3a01      	subs	r2, #1
 8002768:	0652      	lsls	r2, r2, #25
 800276a:	430a      	orrs	r2, r1
 800276c:	4915      	ldr	r1, [pc, #84]	; (80027c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800276e:	4313      	orrs	r3, r2
 8002770:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002772:	4b14      	ldr	r3, [pc, #80]	; (80027c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a13      	ldr	r2, [pc, #76]	; (80027c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002778:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800277c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800277e:	f7fe fbf1 	bl	8000f64 <HAL_GetTick>
 8002782:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002784:	e009      	b.n	800279a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002786:	f7fe fbed 	bl	8000f64 <HAL_GetTick>
 800278a:	4602      	mov	r2, r0
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	1ad3      	subs	r3, r2, r3
 8002790:	2b02      	cmp	r3, #2
 8002792:	d902      	bls.n	800279a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002794:	2303      	movs	r3, #3
 8002796:	73fb      	strb	r3, [r7, #15]
          break;
 8002798:	e005      	b.n	80027a6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800279a:	4b0a      	ldr	r3, [pc, #40]	; (80027c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d0ef      	beq.n	8002786 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80027a6:	7bfb      	ldrb	r3, [r7, #15]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d106      	bne.n	80027ba <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80027ac:	4b05      	ldr	r3, [pc, #20]	; (80027c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027ae:	691a      	ldr	r2, [r3, #16]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	699b      	ldr	r3, [r3, #24]
 80027b4:	4903      	ldr	r1, [pc, #12]	; (80027c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027b6:	4313      	orrs	r3, r2
 80027b8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80027ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3710      	adds	r7, #16
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	40021000 	.word	0x40021000

080027c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b082      	sub	sp, #8
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d101      	bne.n	80027da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e049      	b.n	800286e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d106      	bne.n	80027f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2200      	movs	r2, #0
 80027ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f7fe f930 	bl	8000a54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2202      	movs	r2, #2
 80027f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	3304      	adds	r3, #4
 8002804:	4619      	mov	r1, r3
 8002806:	4610      	mov	r0, r2
 8002808:	f000 f9d2 	bl	8002bb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2201      	movs	r2, #1
 8002810:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2201      	movs	r2, #1
 8002818:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2201      	movs	r2, #1
 8002820:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2201      	movs	r2, #1
 8002828:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2201      	movs	r2, #1
 8002830:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2201      	movs	r2, #1
 8002838:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2201      	movs	r2, #1
 8002840:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2201      	movs	r2, #1
 8002848:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2201      	movs	r2, #1
 8002850:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2201      	movs	r2, #1
 8002858:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2201      	movs	r2, #1
 8002860:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2201      	movs	r2, #1
 8002868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800286c:	2300      	movs	r3, #0
}
 800286e:	4618      	mov	r0, r3
 8002870:	3708      	adds	r7, #8
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
	...

08002878 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002878:	b480      	push	{r7}
 800287a:	b085      	sub	sp, #20
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002886:	b2db      	uxtb	r3, r3
 8002888:	2b01      	cmp	r3, #1
 800288a:	d001      	beq.n	8002890 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e03b      	b.n	8002908 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2202      	movs	r2, #2
 8002894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	68da      	ldr	r2, [r3, #12]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f042 0201 	orr.w	r2, r2, #1
 80028a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a19      	ldr	r2, [pc, #100]	; (8002914 <HAL_TIM_Base_Start_IT+0x9c>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d009      	beq.n	80028c6 <HAL_TIM_Base_Start_IT+0x4e>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028ba:	d004      	beq.n	80028c6 <HAL_TIM_Base_Start_IT+0x4e>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a15      	ldr	r2, [pc, #84]	; (8002918 <HAL_TIM_Base_Start_IT+0xa0>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d115      	bne.n	80028f2 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	689a      	ldr	r2, [r3, #8]
 80028cc:	4b13      	ldr	r3, [pc, #76]	; (800291c <HAL_TIM_Base_Start_IT+0xa4>)
 80028ce:	4013      	ands	r3, r2
 80028d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2b06      	cmp	r3, #6
 80028d6:	d015      	beq.n	8002904 <HAL_TIM_Base_Start_IT+0x8c>
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028de:	d011      	beq.n	8002904 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f042 0201 	orr.w	r2, r2, #1
 80028ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028f0:	e008      	b.n	8002904 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f042 0201 	orr.w	r2, r2, #1
 8002900:	601a      	str	r2, [r3, #0]
 8002902:	e000      	b.n	8002906 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002904:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002906:	2300      	movs	r3, #0
}
 8002908:	4618      	mov	r0, r3
 800290a:	3714      	adds	r7, #20
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr
 8002914:	40012c00 	.word	0x40012c00
 8002918:	40014000 	.word	0x40014000
 800291c:	00010007 	.word	0x00010007

08002920 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b082      	sub	sp, #8
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	691b      	ldr	r3, [r3, #16]
 800292e:	f003 0302 	and.w	r3, r3, #2
 8002932:	2b02      	cmp	r3, #2
 8002934:	d122      	bne.n	800297c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	f003 0302 	and.w	r3, r3, #2
 8002940:	2b02      	cmp	r3, #2
 8002942:	d11b      	bne.n	800297c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f06f 0202 	mvn.w	r2, #2
 800294c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2201      	movs	r2, #1
 8002952:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	699b      	ldr	r3, [r3, #24]
 800295a:	f003 0303 	and.w	r3, r3, #3
 800295e:	2b00      	cmp	r3, #0
 8002960:	d003      	beq.n	800296a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f000 f905 	bl	8002b72 <HAL_TIM_IC_CaptureCallback>
 8002968:	e005      	b.n	8002976 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f000 f8f7 	bl	8002b5e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002970:	6878      	ldr	r0, [r7, #4]
 8002972:	f000 f908 	bl	8002b86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2200      	movs	r2, #0
 800297a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	691b      	ldr	r3, [r3, #16]
 8002982:	f003 0304 	and.w	r3, r3, #4
 8002986:	2b04      	cmp	r3, #4
 8002988:	d122      	bne.n	80029d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	f003 0304 	and.w	r3, r3, #4
 8002994:	2b04      	cmp	r3, #4
 8002996:	d11b      	bne.n	80029d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f06f 0204 	mvn.w	r2, #4
 80029a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2202      	movs	r2, #2
 80029a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	699b      	ldr	r3, [r3, #24]
 80029ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d003      	beq.n	80029be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f000 f8db 	bl	8002b72 <HAL_TIM_IC_CaptureCallback>
 80029bc:	e005      	b.n	80029ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f000 f8cd 	bl	8002b5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	f000 f8de 	bl	8002b86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2200      	movs	r2, #0
 80029ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	691b      	ldr	r3, [r3, #16]
 80029d6:	f003 0308 	and.w	r3, r3, #8
 80029da:	2b08      	cmp	r3, #8
 80029dc:	d122      	bne.n	8002a24 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	68db      	ldr	r3, [r3, #12]
 80029e4:	f003 0308 	and.w	r3, r3, #8
 80029e8:	2b08      	cmp	r3, #8
 80029ea:	d11b      	bne.n	8002a24 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f06f 0208 	mvn.w	r2, #8
 80029f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2204      	movs	r2, #4
 80029fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	69db      	ldr	r3, [r3, #28]
 8002a02:	f003 0303 	and.w	r3, r3, #3
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d003      	beq.n	8002a12 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f000 f8b1 	bl	8002b72 <HAL_TIM_IC_CaptureCallback>
 8002a10:	e005      	b.n	8002a1e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f000 f8a3 	bl	8002b5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a18:	6878      	ldr	r0, [r7, #4]
 8002a1a:	f000 f8b4 	bl	8002b86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2200      	movs	r2, #0
 8002a22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	691b      	ldr	r3, [r3, #16]
 8002a2a:	f003 0310 	and.w	r3, r3, #16
 8002a2e:	2b10      	cmp	r3, #16
 8002a30:	d122      	bne.n	8002a78 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	f003 0310 	and.w	r3, r3, #16
 8002a3c:	2b10      	cmp	r3, #16
 8002a3e:	d11b      	bne.n	8002a78 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f06f 0210 	mvn.w	r2, #16
 8002a48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2208      	movs	r2, #8
 8002a4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	69db      	ldr	r3, [r3, #28]
 8002a56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d003      	beq.n	8002a66 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f000 f887 	bl	8002b72 <HAL_TIM_IC_CaptureCallback>
 8002a64:	e005      	b.n	8002a72 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f000 f879 	bl	8002b5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a6c:	6878      	ldr	r0, [r7, #4]
 8002a6e:	f000 f88a 	bl	8002b86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2200      	movs	r2, #0
 8002a76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	691b      	ldr	r3, [r3, #16]
 8002a7e:	f003 0301 	and.w	r3, r3, #1
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d10e      	bne.n	8002aa4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	f003 0301 	and.w	r3, r3, #1
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d107      	bne.n	8002aa4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f06f 0201 	mvn.w	r2, #1
 8002a9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f7fd fe84 	bl	80007ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	691b      	ldr	r3, [r3, #16]
 8002aaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aae:	2b80      	cmp	r3, #128	; 0x80
 8002ab0:	d10e      	bne.n	8002ad0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002abc:	2b80      	cmp	r3, #128	; 0x80
 8002abe:	d107      	bne.n	8002ad0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002ac8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f000 f944 	bl	8002d58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	691b      	ldr	r3, [r3, #16]
 8002ad6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ada:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ade:	d10e      	bne.n	8002afe <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	68db      	ldr	r3, [r3, #12]
 8002ae6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aea:	2b80      	cmp	r3, #128	; 0x80
 8002aec:	d107      	bne.n	8002afe <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002af6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f000 f937 	bl	8002d6c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	691b      	ldr	r3, [r3, #16]
 8002b04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b08:	2b40      	cmp	r3, #64	; 0x40
 8002b0a:	d10e      	bne.n	8002b2a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	68db      	ldr	r3, [r3, #12]
 8002b12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b16:	2b40      	cmp	r3, #64	; 0x40
 8002b18:	d107      	bne.n	8002b2a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002b22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b24:	6878      	ldr	r0, [r7, #4]
 8002b26:	f000 f838 	bl	8002b9a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	691b      	ldr	r3, [r3, #16]
 8002b30:	f003 0320 	and.w	r3, r3, #32
 8002b34:	2b20      	cmp	r3, #32
 8002b36:	d10e      	bne.n	8002b56 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	68db      	ldr	r3, [r3, #12]
 8002b3e:	f003 0320 	and.w	r3, r3, #32
 8002b42:	2b20      	cmp	r3, #32
 8002b44:	d107      	bne.n	8002b56 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f06f 0220 	mvn.w	r2, #32
 8002b4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b50:	6878      	ldr	r0, [r7, #4]
 8002b52:	f000 f8f7 	bl	8002d44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b56:	bf00      	nop
 8002b58:	3708      	adds	r7, #8
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}

08002b5e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b5e:	b480      	push	{r7}
 8002b60:	b083      	sub	sp, #12
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b66:	bf00      	nop
 8002b68:	370c      	adds	r7, #12
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr

08002b72 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b72:	b480      	push	{r7}
 8002b74:	b083      	sub	sp, #12
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b7a:	bf00      	nop
 8002b7c:	370c      	adds	r7, #12
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr

08002b86 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b86:	b480      	push	{r7}
 8002b88:	b083      	sub	sp, #12
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b8e:	bf00      	nop
 8002b90:	370c      	adds	r7, #12
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr

08002b9a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b9a:	b480      	push	{r7}
 8002b9c:	b083      	sub	sp, #12
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ba2:	bf00      	nop
 8002ba4:	370c      	adds	r7, #12
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr
	...

08002bb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b085      	sub	sp, #20
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	4a2a      	ldr	r2, [pc, #168]	; (8002c6c <TIM_Base_SetConfig+0xbc>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d003      	beq.n	8002bd0 <TIM_Base_SetConfig+0x20>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bce:	d108      	bne.n	8002be2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bd6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	68fa      	ldr	r2, [r7, #12]
 8002bde:	4313      	orrs	r3, r2
 8002be0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4a21      	ldr	r2, [pc, #132]	; (8002c6c <TIM_Base_SetConfig+0xbc>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d00b      	beq.n	8002c02 <TIM_Base_SetConfig+0x52>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bf0:	d007      	beq.n	8002c02 <TIM_Base_SetConfig+0x52>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4a1e      	ldr	r2, [pc, #120]	; (8002c70 <TIM_Base_SetConfig+0xc0>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d003      	beq.n	8002c02 <TIM_Base_SetConfig+0x52>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	4a1d      	ldr	r2, [pc, #116]	; (8002c74 <TIM_Base_SetConfig+0xc4>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d108      	bne.n	8002c14 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	68db      	ldr	r3, [r3, #12]
 8002c0e:	68fa      	ldr	r2, [r7, #12]
 8002c10:	4313      	orrs	r3, r2
 8002c12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	695b      	ldr	r3, [r3, #20]
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	68fa      	ldr	r2, [r7, #12]
 8002c26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	689a      	ldr	r2, [r3, #8]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	4a0c      	ldr	r2, [pc, #48]	; (8002c6c <TIM_Base_SetConfig+0xbc>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d007      	beq.n	8002c50 <TIM_Base_SetConfig+0xa0>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	4a0b      	ldr	r2, [pc, #44]	; (8002c70 <TIM_Base_SetConfig+0xc0>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d003      	beq.n	8002c50 <TIM_Base_SetConfig+0xa0>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	4a0a      	ldr	r2, [pc, #40]	; (8002c74 <TIM_Base_SetConfig+0xc4>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d103      	bne.n	8002c58 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	691a      	ldr	r2, [r3, #16]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	615a      	str	r2, [r3, #20]
}
 8002c5e:	bf00      	nop
 8002c60:	3714      	adds	r7, #20
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr
 8002c6a:	bf00      	nop
 8002c6c:	40012c00 	.word	0x40012c00
 8002c70:	40014000 	.word	0x40014000
 8002c74:	40014400 	.word	0x40014400

08002c78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b085      	sub	sp, #20
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
 8002c80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d101      	bne.n	8002c90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002c8c:	2302      	movs	r3, #2
 8002c8e:	e04f      	b.n	8002d30 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2201      	movs	r2, #1
 8002c94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2202      	movs	r2, #2
 8002c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a21      	ldr	r2, [pc, #132]	; (8002d3c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d108      	bne.n	8002ccc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002cc0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	68fa      	ldr	r2, [r7, #12]
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cd2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	68fa      	ldr	r2, [r7, #12]
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	68fa      	ldr	r2, [r7, #12]
 8002ce4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a14      	ldr	r2, [pc, #80]	; (8002d3c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d009      	beq.n	8002d04 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cf8:	d004      	beq.n	8002d04 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a10      	ldr	r2, [pc, #64]	; (8002d40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d10c      	bne.n	8002d1e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d0a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	68ba      	ldr	r2, [r7, #8]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	68ba      	ldr	r2, [r7, #8]
 8002d1c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2201      	movs	r2, #1
 8002d22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d2e:	2300      	movs	r3, #0
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	3714      	adds	r7, #20
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr
 8002d3c:	40012c00 	.word	0x40012c00
 8002d40:	40014000 	.word	0x40014000

08002d44 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d4c:	bf00      	nop
 8002d4e:	370c      	adds	r7, #12
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr

08002d58 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d60:	bf00      	nop
 8002d62:	370c      	adds	r7, #12
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr

08002d6c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b083      	sub	sp, #12
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002d74:	bf00      	nop
 8002d76:	370c      	adds	r7, #12
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr

08002d80 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b082      	sub	sp, #8
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d101      	bne.n	8002d92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e040      	b.n	8002e14 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d106      	bne.n	8002da8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f7fd fea6 	bl	8000af4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2224      	movs	r2, #36	; 0x24
 8002dac:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f022 0201 	bic.w	r2, r2, #1
 8002dbc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f000 f82c 	bl	8002e1c <UART_SetConfig>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d101      	bne.n	8002dce <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e022      	b.n	8002e14 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d002      	beq.n	8002ddc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f000 fa2c 	bl	8003234 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	685a      	ldr	r2, [r3, #4]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002dea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	689a      	ldr	r2, [r3, #8]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002dfa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f042 0201 	orr.w	r2, r2, #1
 8002e0a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	f000 fab3 	bl	8003378 <UART_CheckIdleState>
 8002e12:	4603      	mov	r3, r0
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	3708      	adds	r7, #8
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}

08002e1c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e1c:	b5b0      	push	{r4, r5, r7, lr}
 8002e1e:	b088      	sub	sp, #32
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002e24:	2300      	movs	r3, #0
 8002e26:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	689a      	ldr	r2, [r3, #8]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	691b      	ldr	r3, [r3, #16]
 8002e30:	431a      	orrs	r2, r3
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	695b      	ldr	r3, [r3, #20]
 8002e36:	431a      	orrs	r2, r3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	69db      	ldr	r3, [r3, #28]
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	4baf      	ldr	r3, [pc, #700]	; (8003104 <UART_SetConfig+0x2e8>)
 8002e48:	4013      	ands	r3, r2
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	6812      	ldr	r2, [r2, #0]
 8002e4e:	69f9      	ldr	r1, [r7, #28]
 8002e50:	430b      	orrs	r3, r1
 8002e52:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	68da      	ldr	r2, [r3, #12]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	430a      	orrs	r2, r1
 8002e68:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	699b      	ldr	r3, [r3, #24]
 8002e6e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4aa4      	ldr	r2, [pc, #656]	; (8003108 <UART_SetConfig+0x2ec>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d004      	beq.n	8002e84 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6a1b      	ldr	r3, [r3, #32]
 8002e7e:	69fa      	ldr	r2, [r7, #28]
 8002e80:	4313      	orrs	r3, r2
 8002e82:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	69fa      	ldr	r2, [r7, #28]
 8002e94:	430a      	orrs	r2, r1
 8002e96:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a9b      	ldr	r2, [pc, #620]	; (800310c <UART_SetConfig+0x2f0>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d121      	bne.n	8002ee6 <UART_SetConfig+0xca>
 8002ea2:	4b9b      	ldr	r3, [pc, #620]	; (8003110 <UART_SetConfig+0x2f4>)
 8002ea4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ea8:	f003 0303 	and.w	r3, r3, #3
 8002eac:	2b03      	cmp	r3, #3
 8002eae:	d817      	bhi.n	8002ee0 <UART_SetConfig+0xc4>
 8002eb0:	a201      	add	r2, pc, #4	; (adr r2, 8002eb8 <UART_SetConfig+0x9c>)
 8002eb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eb6:	bf00      	nop
 8002eb8:	08002ec9 	.word	0x08002ec9
 8002ebc:	08002ed5 	.word	0x08002ed5
 8002ec0:	08002ecf 	.word	0x08002ecf
 8002ec4:	08002edb 	.word	0x08002edb
 8002ec8:	2301      	movs	r3, #1
 8002eca:	76fb      	strb	r3, [r7, #27]
 8002ecc:	e070      	b.n	8002fb0 <UART_SetConfig+0x194>
 8002ece:	2302      	movs	r3, #2
 8002ed0:	76fb      	strb	r3, [r7, #27]
 8002ed2:	e06d      	b.n	8002fb0 <UART_SetConfig+0x194>
 8002ed4:	2304      	movs	r3, #4
 8002ed6:	76fb      	strb	r3, [r7, #27]
 8002ed8:	e06a      	b.n	8002fb0 <UART_SetConfig+0x194>
 8002eda:	2308      	movs	r3, #8
 8002edc:	76fb      	strb	r3, [r7, #27]
 8002ede:	e067      	b.n	8002fb0 <UART_SetConfig+0x194>
 8002ee0:	2310      	movs	r3, #16
 8002ee2:	76fb      	strb	r3, [r7, #27]
 8002ee4:	e064      	b.n	8002fb0 <UART_SetConfig+0x194>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a8a      	ldr	r2, [pc, #552]	; (8003114 <UART_SetConfig+0x2f8>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d132      	bne.n	8002f56 <UART_SetConfig+0x13a>
 8002ef0:	4b87      	ldr	r3, [pc, #540]	; (8003110 <UART_SetConfig+0x2f4>)
 8002ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ef6:	f003 030c 	and.w	r3, r3, #12
 8002efa:	2b0c      	cmp	r3, #12
 8002efc:	d828      	bhi.n	8002f50 <UART_SetConfig+0x134>
 8002efe:	a201      	add	r2, pc, #4	; (adr r2, 8002f04 <UART_SetConfig+0xe8>)
 8002f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f04:	08002f39 	.word	0x08002f39
 8002f08:	08002f51 	.word	0x08002f51
 8002f0c:	08002f51 	.word	0x08002f51
 8002f10:	08002f51 	.word	0x08002f51
 8002f14:	08002f45 	.word	0x08002f45
 8002f18:	08002f51 	.word	0x08002f51
 8002f1c:	08002f51 	.word	0x08002f51
 8002f20:	08002f51 	.word	0x08002f51
 8002f24:	08002f3f 	.word	0x08002f3f
 8002f28:	08002f51 	.word	0x08002f51
 8002f2c:	08002f51 	.word	0x08002f51
 8002f30:	08002f51 	.word	0x08002f51
 8002f34:	08002f4b 	.word	0x08002f4b
 8002f38:	2300      	movs	r3, #0
 8002f3a:	76fb      	strb	r3, [r7, #27]
 8002f3c:	e038      	b.n	8002fb0 <UART_SetConfig+0x194>
 8002f3e:	2302      	movs	r3, #2
 8002f40:	76fb      	strb	r3, [r7, #27]
 8002f42:	e035      	b.n	8002fb0 <UART_SetConfig+0x194>
 8002f44:	2304      	movs	r3, #4
 8002f46:	76fb      	strb	r3, [r7, #27]
 8002f48:	e032      	b.n	8002fb0 <UART_SetConfig+0x194>
 8002f4a:	2308      	movs	r3, #8
 8002f4c:	76fb      	strb	r3, [r7, #27]
 8002f4e:	e02f      	b.n	8002fb0 <UART_SetConfig+0x194>
 8002f50:	2310      	movs	r3, #16
 8002f52:	76fb      	strb	r3, [r7, #27]
 8002f54:	e02c      	b.n	8002fb0 <UART_SetConfig+0x194>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a6b      	ldr	r2, [pc, #428]	; (8003108 <UART_SetConfig+0x2ec>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d125      	bne.n	8002fac <UART_SetConfig+0x190>
 8002f60:	4b6b      	ldr	r3, [pc, #428]	; (8003110 <UART_SetConfig+0x2f4>)
 8002f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f66:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002f6a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002f6e:	d017      	beq.n	8002fa0 <UART_SetConfig+0x184>
 8002f70:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002f74:	d817      	bhi.n	8002fa6 <UART_SetConfig+0x18a>
 8002f76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f7a:	d00b      	beq.n	8002f94 <UART_SetConfig+0x178>
 8002f7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f80:	d811      	bhi.n	8002fa6 <UART_SetConfig+0x18a>
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d003      	beq.n	8002f8e <UART_SetConfig+0x172>
 8002f86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f8a:	d006      	beq.n	8002f9a <UART_SetConfig+0x17e>
 8002f8c:	e00b      	b.n	8002fa6 <UART_SetConfig+0x18a>
 8002f8e:	2300      	movs	r3, #0
 8002f90:	76fb      	strb	r3, [r7, #27]
 8002f92:	e00d      	b.n	8002fb0 <UART_SetConfig+0x194>
 8002f94:	2302      	movs	r3, #2
 8002f96:	76fb      	strb	r3, [r7, #27]
 8002f98:	e00a      	b.n	8002fb0 <UART_SetConfig+0x194>
 8002f9a:	2304      	movs	r3, #4
 8002f9c:	76fb      	strb	r3, [r7, #27]
 8002f9e:	e007      	b.n	8002fb0 <UART_SetConfig+0x194>
 8002fa0:	2308      	movs	r3, #8
 8002fa2:	76fb      	strb	r3, [r7, #27]
 8002fa4:	e004      	b.n	8002fb0 <UART_SetConfig+0x194>
 8002fa6:	2310      	movs	r3, #16
 8002fa8:	76fb      	strb	r3, [r7, #27]
 8002faa:	e001      	b.n	8002fb0 <UART_SetConfig+0x194>
 8002fac:	2310      	movs	r3, #16
 8002fae:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a54      	ldr	r2, [pc, #336]	; (8003108 <UART_SetConfig+0x2ec>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d173      	bne.n	80030a2 <UART_SetConfig+0x286>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002fba:	7efb      	ldrb	r3, [r7, #27]
 8002fbc:	2b08      	cmp	r3, #8
 8002fbe:	d824      	bhi.n	800300a <UART_SetConfig+0x1ee>
 8002fc0:	a201      	add	r2, pc, #4	; (adr r2, 8002fc8 <UART_SetConfig+0x1ac>)
 8002fc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fc6:	bf00      	nop
 8002fc8:	08002fed 	.word	0x08002fed
 8002fcc:	0800300b 	.word	0x0800300b
 8002fd0:	08002ff5 	.word	0x08002ff5
 8002fd4:	0800300b 	.word	0x0800300b
 8002fd8:	08002ffb 	.word	0x08002ffb
 8002fdc:	0800300b 	.word	0x0800300b
 8002fe0:	0800300b 	.word	0x0800300b
 8002fe4:	0800300b 	.word	0x0800300b
 8002fe8:	08003003 	.word	0x08003003
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002fec:	f7ff f838 	bl	8002060 <HAL_RCC_GetPCLK1Freq>
 8002ff0:	6178      	str	r0, [r7, #20]
        break;
 8002ff2:	e00f      	b.n	8003014 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ff4:	4b48      	ldr	r3, [pc, #288]	; (8003118 <UART_SetConfig+0x2fc>)
 8002ff6:	617b      	str	r3, [r7, #20]
        break;
 8002ff8:	e00c      	b.n	8003014 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ffa:	f7fe ff99 	bl	8001f30 <HAL_RCC_GetSysClockFreq>
 8002ffe:	6178      	str	r0, [r7, #20]
        break;
 8003000:	e008      	b.n	8003014 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003002:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003006:	617b      	str	r3, [r7, #20]
        break;
 8003008:	e004      	b.n	8003014 <UART_SetConfig+0x1f8>
      default:
        pclk = 0U;
 800300a:	2300      	movs	r3, #0
 800300c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	76bb      	strb	r3, [r7, #26]
        break;
 8003012:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	2b00      	cmp	r3, #0
 8003018:	f000 80fe 	beq.w	8003218 <UART_SetConfig+0x3fc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	685a      	ldr	r2, [r3, #4]
 8003020:	4613      	mov	r3, r2
 8003022:	005b      	lsls	r3, r3, #1
 8003024:	4413      	add	r3, r2
 8003026:	697a      	ldr	r2, [r7, #20]
 8003028:	429a      	cmp	r2, r3
 800302a:	d305      	bcc.n	8003038 <UART_SetConfig+0x21c>
          (pclk > (4096U * huart->Init.BaudRate)))
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003032:	697a      	ldr	r2, [r7, #20]
 8003034:	429a      	cmp	r2, r3
 8003036:	d902      	bls.n	800303e <UART_SetConfig+0x222>
      {
        ret = HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	76bb      	strb	r3, [r7, #26]
 800303c:	e0ec      	b.n	8003218 <UART_SetConfig+0x3fc>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	4618      	mov	r0, r3
 8003042:	f04f 0100 	mov.w	r1, #0
 8003046:	f04f 0200 	mov.w	r2, #0
 800304a:	f04f 0300 	mov.w	r3, #0
 800304e:	020b      	lsls	r3, r1, #8
 8003050:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003054:	0202      	lsls	r2, r0, #8
 8003056:	6879      	ldr	r1, [r7, #4]
 8003058:	6849      	ldr	r1, [r1, #4]
 800305a:	0849      	lsrs	r1, r1, #1
 800305c:	4608      	mov	r0, r1
 800305e:	f04f 0100 	mov.w	r1, #0
 8003062:	1814      	adds	r4, r2, r0
 8003064:	eb43 0501 	adc.w	r5, r3, r1
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	461a      	mov	r2, r3
 800306e:	f04f 0300 	mov.w	r3, #0
 8003072:	4620      	mov	r0, r4
 8003074:	4629      	mov	r1, r5
 8003076:	f7fd f903 	bl	8000280 <__aeabi_uldivmod>
 800307a:	4602      	mov	r2, r0
 800307c:	460b      	mov	r3, r1
 800307e:	4613      	mov	r3, r2
 8003080:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003088:	d308      	bcc.n	800309c <UART_SetConfig+0x280>
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003090:	d204      	bcs.n	800309c <UART_SetConfig+0x280>
        {
          huart->Instance->BRR = usartdiv;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	693a      	ldr	r2, [r7, #16]
 8003098:	60da      	str	r2, [r3, #12]
 800309a:	e0bd      	b.n	8003218 <UART_SetConfig+0x3fc>
        }
        else
        {
          ret = HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	76bb      	strb	r3, [r7, #26]
 80030a0:	e0ba      	b.n	8003218 <UART_SetConfig+0x3fc>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	69db      	ldr	r3, [r3, #28]
 80030a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030aa:	d168      	bne.n	800317e <UART_SetConfig+0x362>
  {
    switch (clocksource)
 80030ac:	7efb      	ldrb	r3, [r7, #27]
 80030ae:	2b08      	cmp	r3, #8
 80030b0:	d834      	bhi.n	800311c <UART_SetConfig+0x300>
 80030b2:	a201      	add	r2, pc, #4	; (adr r2, 80030b8 <UART_SetConfig+0x29c>)
 80030b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030b8:	080030dd 	.word	0x080030dd
 80030bc:	080030e5 	.word	0x080030e5
 80030c0:	080030ed 	.word	0x080030ed
 80030c4:	0800311d 	.word	0x0800311d
 80030c8:	080030f3 	.word	0x080030f3
 80030cc:	0800311d 	.word	0x0800311d
 80030d0:	0800311d 	.word	0x0800311d
 80030d4:	0800311d 	.word	0x0800311d
 80030d8:	080030fb 	.word	0x080030fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80030dc:	f7fe ffc0 	bl	8002060 <HAL_RCC_GetPCLK1Freq>
 80030e0:	6178      	str	r0, [r7, #20]
        break;
 80030e2:	e020      	b.n	8003126 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80030e4:	f7fe ffd2 	bl	800208c <HAL_RCC_GetPCLK2Freq>
 80030e8:	6178      	str	r0, [r7, #20]
        break;
 80030ea:	e01c      	b.n	8003126 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80030ec:	4b0a      	ldr	r3, [pc, #40]	; (8003118 <UART_SetConfig+0x2fc>)
 80030ee:	617b      	str	r3, [r7, #20]
        break;
 80030f0:	e019      	b.n	8003126 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80030f2:	f7fe ff1d 	bl	8001f30 <HAL_RCC_GetSysClockFreq>
 80030f6:	6178      	str	r0, [r7, #20]
        break;
 80030f8:	e015      	b.n	8003126 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030fe:	617b      	str	r3, [r7, #20]
        break;
 8003100:	e011      	b.n	8003126 <UART_SetConfig+0x30a>
 8003102:	bf00      	nop
 8003104:	efff69f3 	.word	0xefff69f3
 8003108:	40008000 	.word	0x40008000
 800310c:	40013800 	.word	0x40013800
 8003110:	40021000 	.word	0x40021000
 8003114:	40004400 	.word	0x40004400
 8003118:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800311c:	2300      	movs	r3, #0
 800311e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	76bb      	strb	r3, [r7, #26]
        break;
 8003124:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d075      	beq.n	8003218 <UART_SetConfig+0x3fc>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	005a      	lsls	r2, r3, #1
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	085b      	lsrs	r3, r3, #1
 8003136:	441a      	add	r2, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003140:	b29b      	uxth	r3, r3
 8003142:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	2b0f      	cmp	r3, #15
 8003148:	d916      	bls.n	8003178 <UART_SetConfig+0x35c>
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003150:	d212      	bcs.n	8003178 <UART_SetConfig+0x35c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	b29b      	uxth	r3, r3
 8003156:	f023 030f 	bic.w	r3, r3, #15
 800315a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	085b      	lsrs	r3, r3, #1
 8003160:	b29b      	uxth	r3, r3
 8003162:	f003 0307 	and.w	r3, r3, #7
 8003166:	b29a      	uxth	r2, r3
 8003168:	89fb      	ldrh	r3, [r7, #14]
 800316a:	4313      	orrs	r3, r2
 800316c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	89fa      	ldrh	r2, [r7, #14]
 8003174:	60da      	str	r2, [r3, #12]
 8003176:	e04f      	b.n	8003218 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	76bb      	strb	r3, [r7, #26]
 800317c:	e04c      	b.n	8003218 <UART_SetConfig+0x3fc>
      }
    }
  }
  else
  {
    switch (clocksource)
 800317e:	7efb      	ldrb	r3, [r7, #27]
 8003180:	2b08      	cmp	r3, #8
 8003182:	d828      	bhi.n	80031d6 <UART_SetConfig+0x3ba>
 8003184:	a201      	add	r2, pc, #4	; (adr r2, 800318c <UART_SetConfig+0x370>)
 8003186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800318a:	bf00      	nop
 800318c:	080031b1 	.word	0x080031b1
 8003190:	080031b9 	.word	0x080031b9
 8003194:	080031c1 	.word	0x080031c1
 8003198:	080031d7 	.word	0x080031d7
 800319c:	080031c7 	.word	0x080031c7
 80031a0:	080031d7 	.word	0x080031d7
 80031a4:	080031d7 	.word	0x080031d7
 80031a8:	080031d7 	.word	0x080031d7
 80031ac:	080031cf 	.word	0x080031cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031b0:	f7fe ff56 	bl	8002060 <HAL_RCC_GetPCLK1Freq>
 80031b4:	6178      	str	r0, [r7, #20]
        break;
 80031b6:	e013      	b.n	80031e0 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80031b8:	f7fe ff68 	bl	800208c <HAL_RCC_GetPCLK2Freq>
 80031bc:	6178      	str	r0, [r7, #20]
        break;
 80031be:	e00f      	b.n	80031e0 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031c0:	4b1b      	ldr	r3, [pc, #108]	; (8003230 <UART_SetConfig+0x414>)
 80031c2:	617b      	str	r3, [r7, #20]
        break;
 80031c4:	e00c      	b.n	80031e0 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031c6:	f7fe feb3 	bl	8001f30 <HAL_RCC_GetSysClockFreq>
 80031ca:	6178      	str	r0, [r7, #20]
        break;
 80031cc:	e008      	b.n	80031e0 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031d2:	617b      	str	r3, [r7, #20]
        break;
 80031d4:	e004      	b.n	80031e0 <UART_SetConfig+0x3c4>
      default:
        pclk = 0U;
 80031d6:	2300      	movs	r3, #0
 80031d8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	76bb      	strb	r3, [r7, #26]
        break;
 80031de:	bf00      	nop
    }

    if (pclk != 0U)
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d018      	beq.n	8003218 <UART_SetConfig+0x3fc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	085a      	lsrs	r2, r3, #1
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	441a      	add	r2, r3
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80031f8:	b29b      	uxth	r3, r3
 80031fa:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	2b0f      	cmp	r3, #15
 8003200:	d908      	bls.n	8003214 <UART_SetConfig+0x3f8>
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003208:	d204      	bcs.n	8003214 <UART_SetConfig+0x3f8>
      {
        huart->Instance->BRR = usartdiv;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	693a      	ldr	r2, [r7, #16]
 8003210:	60da      	str	r2, [r3, #12]
 8003212:	e001      	b.n	8003218 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2200      	movs	r2, #0
 800321c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2200      	movs	r2, #0
 8003222:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003224:	7ebb      	ldrb	r3, [r7, #26]
}
 8003226:	4618      	mov	r0, r3
 8003228:	3720      	adds	r7, #32
 800322a:	46bd      	mov	sp, r7
 800322c:	bdb0      	pop	{r4, r5, r7, pc}
 800322e:	bf00      	nop
 8003230:	00f42400 	.word	0x00f42400

08003234 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003234:	b480      	push	{r7}
 8003236:	b083      	sub	sp, #12
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003240:	f003 0301 	and.w	r3, r3, #1
 8003244:	2b00      	cmp	r3, #0
 8003246:	d00a      	beq.n	800325e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	430a      	orrs	r2, r1
 800325c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003262:	f003 0302 	and.w	r3, r3, #2
 8003266:	2b00      	cmp	r3, #0
 8003268:	d00a      	beq.n	8003280 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	430a      	orrs	r2, r1
 800327e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003284:	f003 0304 	and.w	r3, r3, #4
 8003288:	2b00      	cmp	r3, #0
 800328a:	d00a      	beq.n	80032a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	430a      	orrs	r2, r1
 80032a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a6:	f003 0308 	and.w	r3, r3, #8
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d00a      	beq.n	80032c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	430a      	orrs	r2, r1
 80032c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c8:	f003 0310 	and.w	r3, r3, #16
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d00a      	beq.n	80032e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	430a      	orrs	r2, r1
 80032e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ea:	f003 0320 	and.w	r3, r3, #32
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d00a      	beq.n	8003308 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	430a      	orrs	r2, r1
 8003306:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003310:	2b00      	cmp	r3, #0
 8003312:	d01a      	beq.n	800334a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	430a      	orrs	r2, r1
 8003328:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003332:	d10a      	bne.n	800334a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	430a      	orrs	r2, r1
 8003348:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800334e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003352:	2b00      	cmp	r3, #0
 8003354:	d00a      	beq.n	800336c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	430a      	orrs	r2, r1
 800336a:	605a      	str	r2, [r3, #4]
  }
}
 800336c:	bf00      	nop
 800336e:	370c      	adds	r7, #12
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr

08003378 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b086      	sub	sp, #24
 800337c:	af02      	add	r7, sp, #8
 800337e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2200      	movs	r2, #0
 8003384:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003388:	f7fd fdec 	bl	8000f64 <HAL_GetTick>
 800338c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 0308 	and.w	r3, r3, #8
 8003398:	2b08      	cmp	r3, #8
 800339a:	d10e      	bne.n	80033ba <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800339c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80033a0:	9300      	str	r3, [sp, #0]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2200      	movs	r2, #0
 80033a6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f000 f82d 	bl	800340a <UART_WaitOnFlagUntilTimeout>
 80033b0:	4603      	mov	r3, r0
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d001      	beq.n	80033ba <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80033b6:	2303      	movs	r3, #3
 80033b8:	e023      	b.n	8003402 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 0304 	and.w	r3, r3, #4
 80033c4:	2b04      	cmp	r3, #4
 80033c6:	d10e      	bne.n	80033e6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80033c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80033cc:	9300      	str	r3, [sp, #0]
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2200      	movs	r2, #0
 80033d2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f000 f817 	bl	800340a <UART_WaitOnFlagUntilTimeout>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d001      	beq.n	80033e6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80033e2:	2303      	movs	r3, #3
 80033e4:	e00d      	b.n	8003402 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2220      	movs	r2, #32
 80033ea:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2220      	movs	r2, #32
 80033f0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2200      	movs	r2, #0
 80033fc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003400:	2300      	movs	r3, #0
}
 8003402:	4618      	mov	r0, r3
 8003404:	3710      	adds	r7, #16
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}

0800340a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800340a:	b580      	push	{r7, lr}
 800340c:	b084      	sub	sp, #16
 800340e:	af00      	add	r7, sp, #0
 8003410:	60f8      	str	r0, [r7, #12]
 8003412:	60b9      	str	r1, [r7, #8]
 8003414:	603b      	str	r3, [r7, #0]
 8003416:	4613      	mov	r3, r2
 8003418:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800341a:	e05e      	b.n	80034da <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800341c:	69bb      	ldr	r3, [r7, #24]
 800341e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003422:	d05a      	beq.n	80034da <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003424:	f7fd fd9e 	bl	8000f64 <HAL_GetTick>
 8003428:	4602      	mov	r2, r0
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	69ba      	ldr	r2, [r7, #24]
 8003430:	429a      	cmp	r2, r3
 8003432:	d302      	bcc.n	800343a <UART_WaitOnFlagUntilTimeout+0x30>
 8003434:	69bb      	ldr	r3, [r7, #24]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d11b      	bne.n	8003472 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003448:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	689a      	ldr	r2, [r3, #8]
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f022 0201 	bic.w	r2, r2, #1
 8003458:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2220      	movs	r2, #32
 800345e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2220      	movs	r2, #32
 8003464:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2200      	movs	r2, #0
 800346a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800346e:	2303      	movs	r3, #3
 8003470:	e043      	b.n	80034fa <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 0304 	and.w	r3, r3, #4
 800347c:	2b00      	cmp	r3, #0
 800347e:	d02c      	beq.n	80034da <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	69db      	ldr	r3, [r3, #28]
 8003486:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800348a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800348e:	d124      	bne.n	80034da <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003498:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80034a8:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	689a      	ldr	r2, [r3, #8]
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f022 0201 	bic.w	r2, r2, #1
 80034b8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2220      	movs	r2, #32
 80034be:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2220      	movs	r2, #32
 80034c4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2220      	movs	r2, #32
 80034ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2200      	movs	r2, #0
 80034d2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e00f      	b.n	80034fa <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	69da      	ldr	r2, [r3, #28]
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	4013      	ands	r3, r2
 80034e4:	68ba      	ldr	r2, [r7, #8]
 80034e6:	429a      	cmp	r2, r3
 80034e8:	bf0c      	ite	eq
 80034ea:	2301      	moveq	r3, #1
 80034ec:	2300      	movne	r3, #0
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	461a      	mov	r2, r3
 80034f2:	79fb      	ldrb	r3, [r7, #7]
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d091      	beq.n	800341c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80034f8:	2300      	movs	r3, #0
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3710      	adds	r7, #16
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}

08003502 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003502:	b480      	push	{r7}
 8003504:	b083      	sub	sp, #12
 8003506:	af00      	add	r7, sp, #0
 8003508:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	f103 0208 	add.w	r2, r3, #8
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800351a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	f103 0208 	add.w	r2, r3, #8
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	f103 0208 	add.w	r2, r3, #8
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2200      	movs	r2, #0
 8003534:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003536:	bf00      	nop
 8003538:	370c      	adds	r7, #12
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr

08003542 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003542:	b480      	push	{r7}
 8003544:	b083      	sub	sp, #12
 8003546:	af00      	add	r7, sp, #0
 8003548:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2200      	movs	r2, #0
 800354e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003550:	bf00      	nop
 8003552:	370c      	adds	r7, #12
 8003554:	46bd      	mov	sp, r7
 8003556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355a:	4770      	bx	lr

0800355c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800355c:	b480      	push	{r7}
 800355e:	b085      	sub	sp, #20
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	68fa      	ldr	r2, [r7, #12]
 8003570:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	689a      	ldr	r2, [r3, #8]
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	683a      	ldr	r2, [r7, #0]
 8003580:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	683a      	ldr	r2, [r7, #0]
 8003586:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	687a      	ldr	r2, [r7, #4]
 800358c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	1c5a      	adds	r2, r3, #1
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	601a      	str	r2, [r3, #0]
}
 8003598:	bf00      	nop
 800359a:	3714      	adds	r7, #20
 800359c:	46bd      	mov	sp, r7
 800359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a2:	4770      	bx	lr

080035a4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80035a4:	b480      	push	{r7}
 80035a6:	b085      	sub	sp, #20
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
 80035ac:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80035ba:	d103      	bne.n	80035c4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	691b      	ldr	r3, [r3, #16]
 80035c0:	60fb      	str	r3, [r7, #12]
 80035c2:	e00c      	b.n	80035de <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	3308      	adds	r3, #8
 80035c8:	60fb      	str	r3, [r7, #12]
 80035ca:	e002      	b.n	80035d2 <vListInsert+0x2e>
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	60fb      	str	r3, [r7, #12]
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	68ba      	ldr	r2, [r7, #8]
 80035da:	429a      	cmp	r2, r3
 80035dc:	d2f6      	bcs.n	80035cc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	685a      	ldr	r2, [r3, #4]
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	683a      	ldr	r2, [r7, #0]
 80035ec:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	68fa      	ldr	r2, [r7, #12]
 80035f2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	683a      	ldr	r2, [r7, #0]
 80035f8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	687a      	ldr	r2, [r7, #4]
 80035fe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	1c5a      	adds	r2, r3, #1
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	601a      	str	r2, [r3, #0]
}
 800360a:	bf00      	nop
 800360c:	3714      	adds	r7, #20
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr

08003616 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003616:	b480      	push	{r7}
 8003618:	b085      	sub	sp, #20
 800361a:	af00      	add	r7, sp, #0
 800361c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	691b      	ldr	r3, [r3, #16]
 8003622:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	687a      	ldr	r2, [r7, #4]
 800362a:	6892      	ldr	r2, [r2, #8]
 800362c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	6852      	ldr	r2, [r2, #4]
 8003636:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	687a      	ldr	r2, [r7, #4]
 800363e:	429a      	cmp	r2, r3
 8003640:	d103      	bne.n	800364a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	689a      	ldr	r2, [r3, #8]
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	1e5a      	subs	r2, r3, #1
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
}
 800365e:	4618      	mov	r0, r3
 8003660:	3714      	adds	r7, #20
 8003662:	46bd      	mov	sp, r7
 8003664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003668:	4770      	bx	lr
	...

0800366c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b084      	sub	sp, #16
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d10a      	bne.n	8003696 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003684:	f383 8811 	msr	BASEPRI, r3
 8003688:	f3bf 8f6f 	isb	sy
 800368c:	f3bf 8f4f 	dsb	sy
 8003690:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003692:	bf00      	nop
 8003694:	e7fe      	b.n	8003694 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003696:	f002 f8e5 	bl	8005864 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036a2:	68f9      	ldr	r1, [r7, #12]
 80036a4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80036a6:	fb01 f303 	mul.w	r3, r1, r3
 80036aa:	441a      	add	r2, r3
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2200      	movs	r2, #0
 80036b4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036c6:	3b01      	subs	r3, #1
 80036c8:	68f9      	ldr	r1, [r7, #12]
 80036ca:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80036cc:	fb01 f303 	mul.w	r3, r1, r3
 80036d0:	441a      	add	r2, r3
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	22ff      	movs	r2, #255	; 0xff
 80036da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	22ff      	movs	r2, #255	; 0xff
 80036e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d114      	bne.n	8003716 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	691b      	ldr	r3, [r3, #16]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d01a      	beq.n	800372a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	3310      	adds	r3, #16
 80036f8:	4618      	mov	r0, r3
 80036fa:	f001 f929 	bl	8004950 <xTaskRemoveFromEventList>
 80036fe:	4603      	mov	r3, r0
 8003700:	2b00      	cmp	r3, #0
 8003702:	d012      	beq.n	800372a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003704:	4b0c      	ldr	r3, [pc, #48]	; (8003738 <xQueueGenericReset+0xcc>)
 8003706:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800370a:	601a      	str	r2, [r3, #0]
 800370c:	f3bf 8f4f 	dsb	sy
 8003710:	f3bf 8f6f 	isb	sy
 8003714:	e009      	b.n	800372a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	3310      	adds	r3, #16
 800371a:	4618      	mov	r0, r3
 800371c:	f7ff fef1 	bl	8003502 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	3324      	adds	r3, #36	; 0x24
 8003724:	4618      	mov	r0, r3
 8003726:	f7ff feec 	bl	8003502 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800372a:	f002 f8cb 	bl	80058c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800372e:	2301      	movs	r3, #1
}
 8003730:	4618      	mov	r0, r3
 8003732:	3710      	adds	r7, #16
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}
 8003738:	e000ed04 	.word	0xe000ed04

0800373c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800373c:	b580      	push	{r7, lr}
 800373e:	b08e      	sub	sp, #56	; 0x38
 8003740:	af02      	add	r7, sp, #8
 8003742:	60f8      	str	r0, [r7, #12]
 8003744:	60b9      	str	r1, [r7, #8]
 8003746:	607a      	str	r2, [r7, #4]
 8003748:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d10a      	bne.n	8003766 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003754:	f383 8811 	msr	BASEPRI, r3
 8003758:	f3bf 8f6f 	isb	sy
 800375c:	f3bf 8f4f 	dsb	sy
 8003760:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003762:	bf00      	nop
 8003764:	e7fe      	b.n	8003764 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d10a      	bne.n	8003782 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800376c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003770:	f383 8811 	msr	BASEPRI, r3
 8003774:	f3bf 8f6f 	isb	sy
 8003778:	f3bf 8f4f 	dsb	sy
 800377c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800377e:	bf00      	nop
 8003780:	e7fe      	b.n	8003780 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d002      	beq.n	800378e <xQueueGenericCreateStatic+0x52>
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d001      	beq.n	8003792 <xQueueGenericCreateStatic+0x56>
 800378e:	2301      	movs	r3, #1
 8003790:	e000      	b.n	8003794 <xQueueGenericCreateStatic+0x58>
 8003792:	2300      	movs	r3, #0
 8003794:	2b00      	cmp	r3, #0
 8003796:	d10a      	bne.n	80037ae <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800379c:	f383 8811 	msr	BASEPRI, r3
 80037a0:	f3bf 8f6f 	isb	sy
 80037a4:	f3bf 8f4f 	dsb	sy
 80037a8:	623b      	str	r3, [r7, #32]
}
 80037aa:	bf00      	nop
 80037ac:	e7fe      	b.n	80037ac <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d102      	bne.n	80037ba <xQueueGenericCreateStatic+0x7e>
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d101      	bne.n	80037be <xQueueGenericCreateStatic+0x82>
 80037ba:	2301      	movs	r3, #1
 80037bc:	e000      	b.n	80037c0 <xQueueGenericCreateStatic+0x84>
 80037be:	2300      	movs	r3, #0
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d10a      	bne.n	80037da <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80037c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037c8:	f383 8811 	msr	BASEPRI, r3
 80037cc:	f3bf 8f6f 	isb	sy
 80037d0:	f3bf 8f4f 	dsb	sy
 80037d4:	61fb      	str	r3, [r7, #28]
}
 80037d6:	bf00      	nop
 80037d8:	e7fe      	b.n	80037d8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80037da:	2348      	movs	r3, #72	; 0x48
 80037dc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	2b48      	cmp	r3, #72	; 0x48
 80037e2:	d00a      	beq.n	80037fa <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80037e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037e8:	f383 8811 	msr	BASEPRI, r3
 80037ec:	f3bf 8f6f 	isb	sy
 80037f0:	f3bf 8f4f 	dsb	sy
 80037f4:	61bb      	str	r3, [r7, #24]
}
 80037f6:	bf00      	nop
 80037f8:	e7fe      	b.n	80037f8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80037fa:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003802:	2b00      	cmp	r3, #0
 8003804:	d00d      	beq.n	8003822 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003808:	2201      	movs	r2, #1
 800380a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800380e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003814:	9300      	str	r3, [sp, #0]
 8003816:	4613      	mov	r3, r2
 8003818:	687a      	ldr	r2, [r7, #4]
 800381a:	68b9      	ldr	r1, [r7, #8]
 800381c:	68f8      	ldr	r0, [r7, #12]
 800381e:	f000 f805 	bl	800382c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003824:	4618      	mov	r0, r3
 8003826:	3730      	adds	r7, #48	; 0x30
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}

0800382c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b084      	sub	sp, #16
 8003830:	af00      	add	r7, sp, #0
 8003832:	60f8      	str	r0, [r7, #12]
 8003834:	60b9      	str	r1, [r7, #8]
 8003836:	607a      	str	r2, [r7, #4]
 8003838:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d103      	bne.n	8003848 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003840:	69bb      	ldr	r3, [r7, #24]
 8003842:	69ba      	ldr	r2, [r7, #24]
 8003844:	601a      	str	r2, [r3, #0]
 8003846:	e002      	b.n	800384e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003848:	69bb      	ldr	r3, [r7, #24]
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800384e:	69bb      	ldr	r3, [r7, #24]
 8003850:	68fa      	ldr	r2, [r7, #12]
 8003852:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003854:	69bb      	ldr	r3, [r7, #24]
 8003856:	68ba      	ldr	r2, [r7, #8]
 8003858:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800385a:	2101      	movs	r1, #1
 800385c:	69b8      	ldr	r0, [r7, #24]
 800385e:	f7ff ff05 	bl	800366c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003862:	bf00      	nop
 8003864:	3710      	adds	r7, #16
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}
	...

0800386c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b08e      	sub	sp, #56	; 0x38
 8003870:	af00      	add	r7, sp, #0
 8003872:	60f8      	str	r0, [r7, #12]
 8003874:	60b9      	str	r1, [r7, #8]
 8003876:	607a      	str	r2, [r7, #4]
 8003878:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800387a:	2300      	movs	r3, #0
 800387c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003884:	2b00      	cmp	r3, #0
 8003886:	d10a      	bne.n	800389e <xQueueGenericSend+0x32>
	__asm volatile
 8003888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800388c:	f383 8811 	msr	BASEPRI, r3
 8003890:	f3bf 8f6f 	isb	sy
 8003894:	f3bf 8f4f 	dsb	sy
 8003898:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800389a:	bf00      	nop
 800389c:	e7fe      	b.n	800389c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d103      	bne.n	80038ac <xQueueGenericSend+0x40>
 80038a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d101      	bne.n	80038b0 <xQueueGenericSend+0x44>
 80038ac:	2301      	movs	r3, #1
 80038ae:	e000      	b.n	80038b2 <xQueueGenericSend+0x46>
 80038b0:	2300      	movs	r3, #0
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d10a      	bne.n	80038cc <xQueueGenericSend+0x60>
	__asm volatile
 80038b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038ba:	f383 8811 	msr	BASEPRI, r3
 80038be:	f3bf 8f6f 	isb	sy
 80038c2:	f3bf 8f4f 	dsb	sy
 80038c6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80038c8:	bf00      	nop
 80038ca:	e7fe      	b.n	80038ca <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	2b02      	cmp	r3, #2
 80038d0:	d103      	bne.n	80038da <xQueueGenericSend+0x6e>
 80038d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d101      	bne.n	80038de <xQueueGenericSend+0x72>
 80038da:	2301      	movs	r3, #1
 80038dc:	e000      	b.n	80038e0 <xQueueGenericSend+0x74>
 80038de:	2300      	movs	r3, #0
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d10a      	bne.n	80038fa <xQueueGenericSend+0x8e>
	__asm volatile
 80038e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038e8:	f383 8811 	msr	BASEPRI, r3
 80038ec:	f3bf 8f6f 	isb	sy
 80038f0:	f3bf 8f4f 	dsb	sy
 80038f4:	623b      	str	r3, [r7, #32]
}
 80038f6:	bf00      	nop
 80038f8:	e7fe      	b.n	80038f8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80038fa:	f001 f9eb 	bl	8004cd4 <xTaskGetSchedulerState>
 80038fe:	4603      	mov	r3, r0
 8003900:	2b00      	cmp	r3, #0
 8003902:	d102      	bne.n	800390a <xQueueGenericSend+0x9e>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d101      	bne.n	800390e <xQueueGenericSend+0xa2>
 800390a:	2301      	movs	r3, #1
 800390c:	e000      	b.n	8003910 <xQueueGenericSend+0xa4>
 800390e:	2300      	movs	r3, #0
 8003910:	2b00      	cmp	r3, #0
 8003912:	d10a      	bne.n	800392a <xQueueGenericSend+0xbe>
	__asm volatile
 8003914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003918:	f383 8811 	msr	BASEPRI, r3
 800391c:	f3bf 8f6f 	isb	sy
 8003920:	f3bf 8f4f 	dsb	sy
 8003924:	61fb      	str	r3, [r7, #28]
}
 8003926:	bf00      	nop
 8003928:	e7fe      	b.n	8003928 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800392a:	f001 ff9b 	bl	8005864 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800392e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003930:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003934:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003936:	429a      	cmp	r2, r3
 8003938:	d302      	bcc.n	8003940 <xQueueGenericSend+0xd4>
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	2b02      	cmp	r3, #2
 800393e:	d129      	bne.n	8003994 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003940:	683a      	ldr	r2, [r7, #0]
 8003942:	68b9      	ldr	r1, [r7, #8]
 8003944:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003946:	f000 fa0b 	bl	8003d60 <prvCopyDataToQueue>
 800394a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800394c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800394e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003950:	2b00      	cmp	r3, #0
 8003952:	d010      	beq.n	8003976 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003956:	3324      	adds	r3, #36	; 0x24
 8003958:	4618      	mov	r0, r3
 800395a:	f000 fff9 	bl	8004950 <xTaskRemoveFromEventList>
 800395e:	4603      	mov	r3, r0
 8003960:	2b00      	cmp	r3, #0
 8003962:	d013      	beq.n	800398c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003964:	4b3f      	ldr	r3, [pc, #252]	; (8003a64 <xQueueGenericSend+0x1f8>)
 8003966:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800396a:	601a      	str	r2, [r3, #0]
 800396c:	f3bf 8f4f 	dsb	sy
 8003970:	f3bf 8f6f 	isb	sy
 8003974:	e00a      	b.n	800398c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003978:	2b00      	cmp	r3, #0
 800397a:	d007      	beq.n	800398c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800397c:	4b39      	ldr	r3, [pc, #228]	; (8003a64 <xQueueGenericSend+0x1f8>)
 800397e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003982:	601a      	str	r2, [r3, #0]
 8003984:	f3bf 8f4f 	dsb	sy
 8003988:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800398c:	f001 ff9a 	bl	80058c4 <vPortExitCritical>
				return pdPASS;
 8003990:	2301      	movs	r3, #1
 8003992:	e063      	b.n	8003a5c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d103      	bne.n	80039a2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800399a:	f001 ff93 	bl	80058c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800399e:	2300      	movs	r3, #0
 80039a0:	e05c      	b.n	8003a5c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80039a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d106      	bne.n	80039b6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80039a8:	f107 0314 	add.w	r3, r7, #20
 80039ac:	4618      	mov	r0, r3
 80039ae:	f001 f831 	bl	8004a14 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80039b2:	2301      	movs	r3, #1
 80039b4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80039b6:	f001 ff85 	bl	80058c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80039ba:	f000 fd8d 	bl	80044d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80039be:	f001 ff51 	bl	8005864 <vPortEnterCritical>
 80039c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80039c8:	b25b      	sxtb	r3, r3
 80039ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80039ce:	d103      	bne.n	80039d8 <xQueueGenericSend+0x16c>
 80039d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039d2:	2200      	movs	r2, #0
 80039d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80039de:	b25b      	sxtb	r3, r3
 80039e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80039e4:	d103      	bne.n	80039ee <xQueueGenericSend+0x182>
 80039e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039e8:	2200      	movs	r2, #0
 80039ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80039ee:	f001 ff69 	bl	80058c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80039f2:	1d3a      	adds	r2, r7, #4
 80039f4:	f107 0314 	add.w	r3, r7, #20
 80039f8:	4611      	mov	r1, r2
 80039fa:	4618      	mov	r0, r3
 80039fc:	f001 f820 	bl	8004a40 <xTaskCheckForTimeOut>
 8003a00:	4603      	mov	r3, r0
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d124      	bne.n	8003a50 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003a06:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a08:	f000 faa2 	bl	8003f50 <prvIsQueueFull>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d018      	beq.n	8003a44 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a14:	3310      	adds	r3, #16
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	4611      	mov	r1, r2
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f000 ff48 	bl	80048b0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003a20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a22:	f000 fa2d 	bl	8003e80 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003a26:	f000 fd65 	bl	80044f4 <xTaskResumeAll>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	f47f af7c 	bne.w	800392a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003a32:	4b0c      	ldr	r3, [pc, #48]	; (8003a64 <xQueueGenericSend+0x1f8>)
 8003a34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a38:	601a      	str	r2, [r3, #0]
 8003a3a:	f3bf 8f4f 	dsb	sy
 8003a3e:	f3bf 8f6f 	isb	sy
 8003a42:	e772      	b.n	800392a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003a44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a46:	f000 fa1b 	bl	8003e80 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003a4a:	f000 fd53 	bl	80044f4 <xTaskResumeAll>
 8003a4e:	e76c      	b.n	800392a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003a50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a52:	f000 fa15 	bl	8003e80 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003a56:	f000 fd4d 	bl	80044f4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003a5a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3738      	adds	r7, #56	; 0x38
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}
 8003a64:	e000ed04 	.word	0xe000ed04

08003a68 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b090      	sub	sp, #64	; 0x40
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	60f8      	str	r0, [r7, #12]
 8003a70:	60b9      	str	r1, [r7, #8]
 8003a72:	607a      	str	r2, [r7, #4]
 8003a74:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8003a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d10a      	bne.n	8003a96 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a84:	f383 8811 	msr	BASEPRI, r3
 8003a88:	f3bf 8f6f 	isb	sy
 8003a8c:	f3bf 8f4f 	dsb	sy
 8003a90:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003a92:	bf00      	nop
 8003a94:	e7fe      	b.n	8003a94 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d103      	bne.n	8003aa4 <xQueueGenericSendFromISR+0x3c>
 8003a9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d101      	bne.n	8003aa8 <xQueueGenericSendFromISR+0x40>
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	e000      	b.n	8003aaa <xQueueGenericSendFromISR+0x42>
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d10a      	bne.n	8003ac4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ab2:	f383 8811 	msr	BASEPRI, r3
 8003ab6:	f3bf 8f6f 	isb	sy
 8003aba:	f3bf 8f4f 	dsb	sy
 8003abe:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003ac0:	bf00      	nop
 8003ac2:	e7fe      	b.n	8003ac2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	2b02      	cmp	r3, #2
 8003ac8:	d103      	bne.n	8003ad2 <xQueueGenericSendFromISR+0x6a>
 8003aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003acc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	d101      	bne.n	8003ad6 <xQueueGenericSendFromISR+0x6e>
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e000      	b.n	8003ad8 <xQueueGenericSendFromISR+0x70>
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d10a      	bne.n	8003af2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ae0:	f383 8811 	msr	BASEPRI, r3
 8003ae4:	f3bf 8f6f 	isb	sy
 8003ae8:	f3bf 8f4f 	dsb	sy
 8003aec:	623b      	str	r3, [r7, #32]
}
 8003aee:	bf00      	nop
 8003af0:	e7fe      	b.n	8003af0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003af2:	f001 ff99 	bl	8005a28 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003af6:	f3ef 8211 	mrs	r2, BASEPRI
 8003afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003afe:	f383 8811 	msr	BASEPRI, r3
 8003b02:	f3bf 8f6f 	isb	sy
 8003b06:	f3bf 8f4f 	dsb	sy
 8003b0a:	61fa      	str	r2, [r7, #28]
 8003b0c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003b0e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003b10:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	d302      	bcc.n	8003b24 <xQueueGenericSendFromISR+0xbc>
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	2b02      	cmp	r3, #2
 8003b22:	d12f      	bne.n	8003b84 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b26:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b32:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003b34:	683a      	ldr	r2, [r7, #0]
 8003b36:	68b9      	ldr	r1, [r7, #8]
 8003b38:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003b3a:	f000 f911 	bl	8003d60 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003b3e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003b42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b46:	d112      	bne.n	8003b6e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003b48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d016      	beq.n	8003b7e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b52:	3324      	adds	r3, #36	; 0x24
 8003b54:	4618      	mov	r0, r3
 8003b56:	f000 fefb 	bl	8004950 <xTaskRemoveFromEventList>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d00e      	beq.n	8003b7e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d00b      	beq.n	8003b7e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2201      	movs	r2, #1
 8003b6a:	601a      	str	r2, [r3, #0]
 8003b6c:	e007      	b.n	8003b7e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003b6e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003b72:	3301      	adds	r3, #1
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	b25a      	sxtb	r2, r3
 8003b78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8003b82:	e001      	b.n	8003b88 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003b84:	2300      	movs	r3, #0
 8003b86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b8a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003b92:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003b94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3740      	adds	r7, #64	; 0x40
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}
	...

08003ba0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b08c      	sub	sp, #48	; 0x30
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	60f8      	str	r0, [r7, #12]
 8003ba8:	60b9      	str	r1, [r7, #8]
 8003baa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003bac:	2300      	movs	r3, #0
 8003bae:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d10a      	bne.n	8003bd0 <xQueueReceive+0x30>
	__asm volatile
 8003bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bbe:	f383 8811 	msr	BASEPRI, r3
 8003bc2:	f3bf 8f6f 	isb	sy
 8003bc6:	f3bf 8f4f 	dsb	sy
 8003bca:	623b      	str	r3, [r7, #32]
}
 8003bcc:	bf00      	nop
 8003bce:	e7fe      	b.n	8003bce <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d103      	bne.n	8003bde <xQueueReceive+0x3e>
 8003bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d101      	bne.n	8003be2 <xQueueReceive+0x42>
 8003bde:	2301      	movs	r3, #1
 8003be0:	e000      	b.n	8003be4 <xQueueReceive+0x44>
 8003be2:	2300      	movs	r3, #0
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d10a      	bne.n	8003bfe <xQueueReceive+0x5e>
	__asm volatile
 8003be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bec:	f383 8811 	msr	BASEPRI, r3
 8003bf0:	f3bf 8f6f 	isb	sy
 8003bf4:	f3bf 8f4f 	dsb	sy
 8003bf8:	61fb      	str	r3, [r7, #28]
}
 8003bfa:	bf00      	nop
 8003bfc:	e7fe      	b.n	8003bfc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003bfe:	f001 f869 	bl	8004cd4 <xTaskGetSchedulerState>
 8003c02:	4603      	mov	r3, r0
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d102      	bne.n	8003c0e <xQueueReceive+0x6e>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d101      	bne.n	8003c12 <xQueueReceive+0x72>
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e000      	b.n	8003c14 <xQueueReceive+0x74>
 8003c12:	2300      	movs	r3, #0
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d10a      	bne.n	8003c2e <xQueueReceive+0x8e>
	__asm volatile
 8003c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c1c:	f383 8811 	msr	BASEPRI, r3
 8003c20:	f3bf 8f6f 	isb	sy
 8003c24:	f3bf 8f4f 	dsb	sy
 8003c28:	61bb      	str	r3, [r7, #24]
}
 8003c2a:	bf00      	nop
 8003c2c:	e7fe      	b.n	8003c2c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003c2e:	f001 fe19 	bl	8005864 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c36:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d01f      	beq.n	8003c7e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003c3e:	68b9      	ldr	r1, [r7, #8]
 8003c40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c42:	f000 f8f7 	bl	8003e34 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c48:	1e5a      	subs	r2, r3, #1
 8003c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c4c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c50:	691b      	ldr	r3, [r3, #16]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d00f      	beq.n	8003c76 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c58:	3310      	adds	r3, #16
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f000 fe78 	bl	8004950 <xTaskRemoveFromEventList>
 8003c60:	4603      	mov	r3, r0
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d007      	beq.n	8003c76 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003c66:	4b3d      	ldr	r3, [pc, #244]	; (8003d5c <xQueueReceive+0x1bc>)
 8003c68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c6c:	601a      	str	r2, [r3, #0]
 8003c6e:	f3bf 8f4f 	dsb	sy
 8003c72:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003c76:	f001 fe25 	bl	80058c4 <vPortExitCritical>
				return pdPASS;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e069      	b.n	8003d52 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d103      	bne.n	8003c8c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003c84:	f001 fe1e 	bl	80058c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	e062      	b.n	8003d52 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d106      	bne.n	8003ca0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003c92:	f107 0310 	add.w	r3, r7, #16
 8003c96:	4618      	mov	r0, r3
 8003c98:	f000 febc 	bl	8004a14 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003ca0:	f001 fe10 	bl	80058c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003ca4:	f000 fc18 	bl	80044d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003ca8:	f001 fddc 	bl	8005864 <vPortEnterCritical>
 8003cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003cb2:	b25b      	sxtb	r3, r3
 8003cb4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003cb8:	d103      	bne.n	8003cc2 <xQueueReceive+0x122>
 8003cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cc4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003cc8:	b25b      	sxtb	r3, r3
 8003cca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003cce:	d103      	bne.n	8003cd8 <xQueueReceive+0x138>
 8003cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003cd8:	f001 fdf4 	bl	80058c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003cdc:	1d3a      	adds	r2, r7, #4
 8003cde:	f107 0310 	add.w	r3, r7, #16
 8003ce2:	4611      	mov	r1, r2
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f000 feab 	bl	8004a40 <xTaskCheckForTimeOut>
 8003cea:	4603      	mov	r3, r0
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d123      	bne.n	8003d38 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003cf0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003cf2:	f000 f917 	bl	8003f24 <prvIsQueueEmpty>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d017      	beq.n	8003d2c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cfe:	3324      	adds	r3, #36	; 0x24
 8003d00:	687a      	ldr	r2, [r7, #4]
 8003d02:	4611      	mov	r1, r2
 8003d04:	4618      	mov	r0, r3
 8003d06:	f000 fdd3 	bl	80048b0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003d0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d0c:	f000 f8b8 	bl	8003e80 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003d10:	f000 fbf0 	bl	80044f4 <xTaskResumeAll>
 8003d14:	4603      	mov	r3, r0
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d189      	bne.n	8003c2e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003d1a:	4b10      	ldr	r3, [pc, #64]	; (8003d5c <xQueueReceive+0x1bc>)
 8003d1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d20:	601a      	str	r2, [r3, #0]
 8003d22:	f3bf 8f4f 	dsb	sy
 8003d26:	f3bf 8f6f 	isb	sy
 8003d2a:	e780      	b.n	8003c2e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003d2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d2e:	f000 f8a7 	bl	8003e80 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003d32:	f000 fbdf 	bl	80044f4 <xTaskResumeAll>
 8003d36:	e77a      	b.n	8003c2e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003d38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d3a:	f000 f8a1 	bl	8003e80 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003d3e:	f000 fbd9 	bl	80044f4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003d42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d44:	f000 f8ee 	bl	8003f24 <prvIsQueueEmpty>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	f43f af6f 	beq.w	8003c2e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003d50:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	3730      	adds	r7, #48	; 0x30
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}
 8003d5a:	bf00      	nop
 8003d5c:	e000ed04 	.word	0xe000ed04

08003d60 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b086      	sub	sp, #24
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	60f8      	str	r0, [r7, #12]
 8003d68:	60b9      	str	r1, [r7, #8]
 8003d6a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d74:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d10d      	bne.n	8003d9a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d14d      	bne.n	8003e22 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f000 ffc0 	bl	8004d10 <xTaskPriorityDisinherit>
 8003d90:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2200      	movs	r2, #0
 8003d96:	609a      	str	r2, [r3, #8]
 8003d98:	e043      	b.n	8003e22 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d119      	bne.n	8003dd4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	6858      	ldr	r0, [r3, #4]
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da8:	461a      	mov	r2, r3
 8003daa:	68b9      	ldr	r1, [r7, #8]
 8003dac:	f002 fe7e 	bl	8006aac <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	685a      	ldr	r2, [r3, #4]
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db8:	441a      	add	r2, r3
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	685a      	ldr	r2, [r3, #4]
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	d32b      	bcc.n	8003e22 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	605a      	str	r2, [r3, #4]
 8003dd2:	e026      	b.n	8003e22 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	68d8      	ldr	r0, [r3, #12]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ddc:	461a      	mov	r2, r3
 8003dde:	68b9      	ldr	r1, [r7, #8]
 8003de0:	f002 fe64 	bl	8006aac <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	68da      	ldr	r2, [r3, #12]
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dec:	425b      	negs	r3, r3
 8003dee:	441a      	add	r2, r3
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	68da      	ldr	r2, [r3, #12]
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d207      	bcs.n	8003e10 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	689a      	ldr	r2, [r3, #8]
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e08:	425b      	negs	r3, r3
 8003e0a:	441a      	add	r2, r3
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2b02      	cmp	r3, #2
 8003e14:	d105      	bne.n	8003e22 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d002      	beq.n	8003e22 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	3b01      	subs	r3, #1
 8003e20:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	1c5a      	adds	r2, r3, #1
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003e2a:	697b      	ldr	r3, [r7, #20]
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	3718      	adds	r7, #24
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}

08003e34 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b082      	sub	sp, #8
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
 8003e3c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d018      	beq.n	8003e78 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	68da      	ldr	r2, [r3, #12]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4e:	441a      	add	r2, r3
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	68da      	ldr	r2, [r3, #12]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d303      	bcc.n	8003e68 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	68d9      	ldr	r1, [r3, #12]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e70:	461a      	mov	r2, r3
 8003e72:	6838      	ldr	r0, [r7, #0]
 8003e74:	f002 fe1a 	bl	8006aac <memcpy>
	}
}
 8003e78:	bf00      	nop
 8003e7a:	3708      	adds	r7, #8
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}

08003e80 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b084      	sub	sp, #16
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003e88:	f001 fcec 	bl	8005864 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e92:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003e94:	e011      	b.n	8003eba <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d012      	beq.n	8003ec4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	3324      	adds	r3, #36	; 0x24
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f000 fd54 	bl	8004950 <xTaskRemoveFromEventList>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d001      	beq.n	8003eb2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003eae:	f000 fe29 	bl	8004b04 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003eb2:	7bfb      	ldrb	r3, [r7, #15]
 8003eb4:	3b01      	subs	r3, #1
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003eba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	dce9      	bgt.n	8003e96 <prvUnlockQueue+0x16>
 8003ec2:	e000      	b.n	8003ec6 <prvUnlockQueue+0x46>
					break;
 8003ec4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	22ff      	movs	r2, #255	; 0xff
 8003eca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003ece:	f001 fcf9 	bl	80058c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003ed2:	f001 fcc7 	bl	8005864 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003edc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003ede:	e011      	b.n	8003f04 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	691b      	ldr	r3, [r3, #16]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d012      	beq.n	8003f0e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	3310      	adds	r3, #16
 8003eec:	4618      	mov	r0, r3
 8003eee:	f000 fd2f 	bl	8004950 <xTaskRemoveFromEventList>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d001      	beq.n	8003efc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003ef8:	f000 fe04 	bl	8004b04 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003efc:	7bbb      	ldrb	r3, [r7, #14]
 8003efe:	3b01      	subs	r3, #1
 8003f00:	b2db      	uxtb	r3, r3
 8003f02:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003f04:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	dce9      	bgt.n	8003ee0 <prvUnlockQueue+0x60>
 8003f0c:	e000      	b.n	8003f10 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003f0e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	22ff      	movs	r2, #255	; 0xff
 8003f14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003f18:	f001 fcd4 	bl	80058c4 <vPortExitCritical>
}
 8003f1c:	bf00      	nop
 8003f1e:	3710      	adds	r7, #16
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}

08003f24 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b084      	sub	sp, #16
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003f2c:	f001 fc9a 	bl	8005864 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d102      	bne.n	8003f3e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	60fb      	str	r3, [r7, #12]
 8003f3c:	e001      	b.n	8003f42 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003f42:	f001 fcbf 	bl	80058c4 <vPortExitCritical>

	return xReturn;
 8003f46:	68fb      	ldr	r3, [r7, #12]
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	3710      	adds	r7, #16
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}

08003f50 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b084      	sub	sp, #16
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003f58:	f001 fc84 	bl	8005864 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d102      	bne.n	8003f6e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	60fb      	str	r3, [r7, #12]
 8003f6c:	e001      	b.n	8003f72 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003f72:	f001 fca7 	bl	80058c4 <vPortExitCritical>

	return xReturn;
 8003f76:	68fb      	ldr	r3, [r7, #12]
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	3710      	adds	r7, #16
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}

08003f80 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003f80:	b480      	push	{r7}
 8003f82:	b085      	sub	sp, #20
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
 8003f88:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	60fb      	str	r3, [r7, #12]
 8003f8e:	e014      	b.n	8003fba <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003f90:	4a0f      	ldr	r2, [pc, #60]	; (8003fd0 <vQueueAddToRegistry+0x50>)
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d10b      	bne.n	8003fb4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003f9c:	490c      	ldr	r1, [pc, #48]	; (8003fd0 <vQueueAddToRegistry+0x50>)
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	683a      	ldr	r2, [r7, #0]
 8003fa2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003fa6:	4a0a      	ldr	r2, [pc, #40]	; (8003fd0 <vQueueAddToRegistry+0x50>)
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	00db      	lsls	r3, r3, #3
 8003fac:	4413      	add	r3, r2
 8003fae:	687a      	ldr	r2, [r7, #4]
 8003fb0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003fb2:	e006      	b.n	8003fc2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	3301      	adds	r3, #1
 8003fb8:	60fb      	str	r3, [r7, #12]
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2b07      	cmp	r3, #7
 8003fbe:	d9e7      	bls.n	8003f90 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003fc0:	bf00      	nop
 8003fc2:	bf00      	nop
 8003fc4:	3714      	adds	r7, #20
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fcc:	4770      	bx	lr
 8003fce:	bf00      	nop
 8003fd0:	2000203c 	.word	0x2000203c

08003fd4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b086      	sub	sp, #24
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	60f8      	str	r0, [r7, #12]
 8003fdc:	60b9      	str	r1, [r7, #8]
 8003fde:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003fe4:	f001 fc3e 	bl	8005864 <vPortEnterCritical>
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003fee:	b25b      	sxtb	r3, r3
 8003ff0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ff4:	d103      	bne.n	8003ffe <vQueueWaitForMessageRestricted+0x2a>
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004004:	b25b      	sxtb	r3, r3
 8004006:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800400a:	d103      	bne.n	8004014 <vQueueWaitForMessageRestricted+0x40>
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	2200      	movs	r2, #0
 8004010:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004014:	f001 fc56 	bl	80058c4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800401c:	2b00      	cmp	r3, #0
 800401e:	d106      	bne.n	800402e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	3324      	adds	r3, #36	; 0x24
 8004024:	687a      	ldr	r2, [r7, #4]
 8004026:	68b9      	ldr	r1, [r7, #8]
 8004028:	4618      	mov	r0, r3
 800402a:	f000 fc65 	bl	80048f8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800402e:	6978      	ldr	r0, [r7, #20]
 8004030:	f7ff ff26 	bl	8003e80 <prvUnlockQueue>
	}
 8004034:	bf00      	nop
 8004036:	3718      	adds	r7, #24
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}

0800403c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800403c:	b580      	push	{r7, lr}
 800403e:	b08e      	sub	sp, #56	; 0x38
 8004040:	af04      	add	r7, sp, #16
 8004042:	60f8      	str	r0, [r7, #12]
 8004044:	60b9      	str	r1, [r7, #8]
 8004046:	607a      	str	r2, [r7, #4]
 8004048:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800404a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800404c:	2b00      	cmp	r3, #0
 800404e:	d10a      	bne.n	8004066 <xTaskCreateStatic+0x2a>
	__asm volatile
 8004050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004054:	f383 8811 	msr	BASEPRI, r3
 8004058:	f3bf 8f6f 	isb	sy
 800405c:	f3bf 8f4f 	dsb	sy
 8004060:	623b      	str	r3, [r7, #32]
}
 8004062:	bf00      	nop
 8004064:	e7fe      	b.n	8004064 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004068:	2b00      	cmp	r3, #0
 800406a:	d10a      	bne.n	8004082 <xTaskCreateStatic+0x46>
	__asm volatile
 800406c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004070:	f383 8811 	msr	BASEPRI, r3
 8004074:	f3bf 8f6f 	isb	sy
 8004078:	f3bf 8f4f 	dsb	sy
 800407c:	61fb      	str	r3, [r7, #28]
}
 800407e:	bf00      	nop
 8004080:	e7fe      	b.n	8004080 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004082:	23c4      	movs	r3, #196	; 0xc4
 8004084:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	2bc4      	cmp	r3, #196	; 0xc4
 800408a:	d00a      	beq.n	80040a2 <xTaskCreateStatic+0x66>
	__asm volatile
 800408c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004090:	f383 8811 	msr	BASEPRI, r3
 8004094:	f3bf 8f6f 	isb	sy
 8004098:	f3bf 8f4f 	dsb	sy
 800409c:	61bb      	str	r3, [r7, #24]
}
 800409e:	bf00      	nop
 80040a0:	e7fe      	b.n	80040a0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80040a2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80040a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d01e      	beq.n	80040e8 <xTaskCreateStatic+0xac>
 80040aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d01b      	beq.n	80040e8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80040b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040b2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80040b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80040b8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80040ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040bc:	2202      	movs	r2, #2
 80040be:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80040c2:	2300      	movs	r3, #0
 80040c4:	9303      	str	r3, [sp, #12]
 80040c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c8:	9302      	str	r3, [sp, #8]
 80040ca:	f107 0314 	add.w	r3, r7, #20
 80040ce:	9301      	str	r3, [sp, #4]
 80040d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040d2:	9300      	str	r3, [sp, #0]
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	687a      	ldr	r2, [r7, #4]
 80040d8:	68b9      	ldr	r1, [r7, #8]
 80040da:	68f8      	ldr	r0, [r7, #12]
 80040dc:	f000 f850 	bl	8004180 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80040e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80040e2:	f000 f8eb 	bl	80042bc <prvAddNewTaskToReadyList>
 80040e6:	e001      	b.n	80040ec <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80040e8:	2300      	movs	r3, #0
 80040ea:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80040ec:	697b      	ldr	r3, [r7, #20]
	}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3728      	adds	r7, #40	; 0x28
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}

080040f6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80040f6:	b580      	push	{r7, lr}
 80040f8:	b08c      	sub	sp, #48	; 0x30
 80040fa:	af04      	add	r7, sp, #16
 80040fc:	60f8      	str	r0, [r7, #12]
 80040fe:	60b9      	str	r1, [r7, #8]
 8004100:	603b      	str	r3, [r7, #0]
 8004102:	4613      	mov	r3, r2
 8004104:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004106:	88fb      	ldrh	r3, [r7, #6]
 8004108:	009b      	lsls	r3, r3, #2
 800410a:	4618      	mov	r0, r3
 800410c:	f001 fccc 	bl	8005aa8 <pvPortMalloc>
 8004110:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d00e      	beq.n	8004136 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004118:	20c4      	movs	r0, #196	; 0xc4
 800411a:	f001 fcc5 	bl	8005aa8 <pvPortMalloc>
 800411e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004120:	69fb      	ldr	r3, [r7, #28]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d003      	beq.n	800412e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004126:	69fb      	ldr	r3, [r7, #28]
 8004128:	697a      	ldr	r2, [r7, #20]
 800412a:	631a      	str	r2, [r3, #48]	; 0x30
 800412c:	e005      	b.n	800413a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800412e:	6978      	ldr	r0, [r7, #20]
 8004130:	f001 fd8a 	bl	8005c48 <vPortFree>
 8004134:	e001      	b.n	800413a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004136:	2300      	movs	r3, #0
 8004138:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800413a:	69fb      	ldr	r3, [r7, #28]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d017      	beq.n	8004170 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004140:	69fb      	ldr	r3, [r7, #28]
 8004142:	2200      	movs	r2, #0
 8004144:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004148:	88fa      	ldrh	r2, [r7, #6]
 800414a:	2300      	movs	r3, #0
 800414c:	9303      	str	r3, [sp, #12]
 800414e:	69fb      	ldr	r3, [r7, #28]
 8004150:	9302      	str	r3, [sp, #8]
 8004152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004154:	9301      	str	r3, [sp, #4]
 8004156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004158:	9300      	str	r3, [sp, #0]
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	68b9      	ldr	r1, [r7, #8]
 800415e:	68f8      	ldr	r0, [r7, #12]
 8004160:	f000 f80e 	bl	8004180 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004164:	69f8      	ldr	r0, [r7, #28]
 8004166:	f000 f8a9 	bl	80042bc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800416a:	2301      	movs	r3, #1
 800416c:	61bb      	str	r3, [r7, #24]
 800416e:	e002      	b.n	8004176 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004170:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004174:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004176:	69bb      	ldr	r3, [r7, #24]
	}
 8004178:	4618      	mov	r0, r3
 800417a:	3720      	adds	r7, #32
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}

08004180 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b088      	sub	sp, #32
 8004184:	af00      	add	r7, sp, #0
 8004186:	60f8      	str	r0, [r7, #12]
 8004188:	60b9      	str	r1, [r7, #8]
 800418a:	607a      	str	r2, [r7, #4]
 800418c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800418e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004190:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004198:	3b01      	subs	r3, #1
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	4413      	add	r3, r2
 800419e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80041a0:	69bb      	ldr	r3, [r7, #24]
 80041a2:	f023 0307 	bic.w	r3, r3, #7
 80041a6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80041a8:	69bb      	ldr	r3, [r7, #24]
 80041aa:	f003 0307 	and.w	r3, r3, #7
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d00a      	beq.n	80041c8 <prvInitialiseNewTask+0x48>
	__asm volatile
 80041b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041b6:	f383 8811 	msr	BASEPRI, r3
 80041ba:	f3bf 8f6f 	isb	sy
 80041be:	f3bf 8f4f 	dsb	sy
 80041c2:	617b      	str	r3, [r7, #20]
}
 80041c4:	bf00      	nop
 80041c6:	e7fe      	b.n	80041c6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d01f      	beq.n	800420e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80041ce:	2300      	movs	r3, #0
 80041d0:	61fb      	str	r3, [r7, #28]
 80041d2:	e012      	b.n	80041fa <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80041d4:	68ba      	ldr	r2, [r7, #8]
 80041d6:	69fb      	ldr	r3, [r7, #28]
 80041d8:	4413      	add	r3, r2
 80041da:	7819      	ldrb	r1, [r3, #0]
 80041dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041de:	69fb      	ldr	r3, [r7, #28]
 80041e0:	4413      	add	r3, r2
 80041e2:	3334      	adds	r3, #52	; 0x34
 80041e4:	460a      	mov	r2, r1
 80041e6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80041e8:	68ba      	ldr	r2, [r7, #8]
 80041ea:	69fb      	ldr	r3, [r7, #28]
 80041ec:	4413      	add	r3, r2
 80041ee:	781b      	ldrb	r3, [r3, #0]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d006      	beq.n	8004202 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80041f4:	69fb      	ldr	r3, [r7, #28]
 80041f6:	3301      	adds	r3, #1
 80041f8:	61fb      	str	r3, [r7, #28]
 80041fa:	69fb      	ldr	r3, [r7, #28]
 80041fc:	2b1f      	cmp	r3, #31
 80041fe:	d9e9      	bls.n	80041d4 <prvInitialiseNewTask+0x54>
 8004200:	e000      	b.n	8004204 <prvInitialiseNewTask+0x84>
			{
				break;
 8004202:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004206:	2200      	movs	r2, #0
 8004208:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 800420c:	e003      	b.n	8004216 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800420e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004210:	2200      	movs	r2, #0
 8004212:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004218:	2b06      	cmp	r3, #6
 800421a:	d901      	bls.n	8004220 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800421c:	2306      	movs	r3, #6
 800421e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004222:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004224:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004228:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800422a:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->uxMutexesHeld = 0;
 800422c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800422e:	2200      	movs	r2, #0
 8004230:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004234:	3304      	adds	r3, #4
 8004236:	4618      	mov	r0, r3
 8004238:	f7ff f983 	bl	8003542 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800423c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800423e:	3318      	adds	r3, #24
 8004240:	4618      	mov	r0, r3
 8004242:	f7ff f97e 	bl	8003542 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004248:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800424a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800424c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800424e:	f1c3 0207 	rsb	r2, r3, #7
 8004252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004254:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004258:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800425a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800425c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800425e:	2200      	movs	r2, #0
 8004260:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004266:	2200      	movs	r2, #0
 8004268:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800426c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800426e:	335c      	adds	r3, #92	; 0x5c
 8004270:	2260      	movs	r2, #96	; 0x60
 8004272:	2100      	movs	r1, #0
 8004274:	4618      	mov	r0, r3
 8004276:	f002 fc41 	bl	8006afc <memset>
 800427a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800427c:	4a0c      	ldr	r2, [pc, #48]	; (80042b0 <prvInitialiseNewTask+0x130>)
 800427e:	661a      	str	r2, [r3, #96]	; 0x60
 8004280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004282:	4a0c      	ldr	r2, [pc, #48]	; (80042b4 <prvInitialiseNewTask+0x134>)
 8004284:	665a      	str	r2, [r3, #100]	; 0x64
 8004286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004288:	4a0b      	ldr	r2, [pc, #44]	; (80042b8 <prvInitialiseNewTask+0x138>)
 800428a:	669a      	str	r2, [r3, #104]	; 0x68
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800428c:	683a      	ldr	r2, [r7, #0]
 800428e:	68f9      	ldr	r1, [r7, #12]
 8004290:	69b8      	ldr	r0, [r7, #24]
 8004292:	f001 f9bb 	bl	800560c <pxPortInitialiseStack>
 8004296:	4602      	mov	r2, r0
 8004298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800429a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800429c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d002      	beq.n	80042a8 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80042a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042a6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80042a8:	bf00      	nop
 80042aa:	3720      	adds	r7, #32
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}
 80042b0:	08007564 	.word	0x08007564
 80042b4:	08007584 	.word	0x08007584
 80042b8:	08007544 	.word	0x08007544

080042bc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b082      	sub	sp, #8
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80042c4:	f001 face 	bl	8005864 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80042c8:	4b2a      	ldr	r3, [pc, #168]	; (8004374 <prvAddNewTaskToReadyList+0xb8>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	3301      	adds	r3, #1
 80042ce:	4a29      	ldr	r2, [pc, #164]	; (8004374 <prvAddNewTaskToReadyList+0xb8>)
 80042d0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80042d2:	4b29      	ldr	r3, [pc, #164]	; (8004378 <prvAddNewTaskToReadyList+0xbc>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d109      	bne.n	80042ee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80042da:	4a27      	ldr	r2, [pc, #156]	; (8004378 <prvAddNewTaskToReadyList+0xbc>)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80042e0:	4b24      	ldr	r3, [pc, #144]	; (8004374 <prvAddNewTaskToReadyList+0xb8>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d110      	bne.n	800430a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80042e8:	f000 fc32 	bl	8004b50 <prvInitialiseTaskLists>
 80042ec:	e00d      	b.n	800430a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80042ee:	4b23      	ldr	r3, [pc, #140]	; (800437c <prvAddNewTaskToReadyList+0xc0>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d109      	bne.n	800430a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80042f6:	4b20      	ldr	r3, [pc, #128]	; (8004378 <prvAddNewTaskToReadyList+0xbc>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004300:	429a      	cmp	r2, r3
 8004302:	d802      	bhi.n	800430a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004304:	4a1c      	ldr	r2, [pc, #112]	; (8004378 <prvAddNewTaskToReadyList+0xbc>)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800430a:	4b1d      	ldr	r3, [pc, #116]	; (8004380 <prvAddNewTaskToReadyList+0xc4>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	3301      	adds	r3, #1
 8004310:	4a1b      	ldr	r2, [pc, #108]	; (8004380 <prvAddNewTaskToReadyList+0xc4>)
 8004312:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004318:	2201      	movs	r2, #1
 800431a:	409a      	lsls	r2, r3
 800431c:	4b19      	ldr	r3, [pc, #100]	; (8004384 <prvAddNewTaskToReadyList+0xc8>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4313      	orrs	r3, r2
 8004322:	4a18      	ldr	r2, [pc, #96]	; (8004384 <prvAddNewTaskToReadyList+0xc8>)
 8004324:	6013      	str	r3, [r2, #0]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800432a:	4613      	mov	r3, r2
 800432c:	009b      	lsls	r3, r3, #2
 800432e:	4413      	add	r3, r2
 8004330:	009b      	lsls	r3, r3, #2
 8004332:	4a15      	ldr	r2, [pc, #84]	; (8004388 <prvAddNewTaskToReadyList+0xcc>)
 8004334:	441a      	add	r2, r3
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	3304      	adds	r3, #4
 800433a:	4619      	mov	r1, r3
 800433c:	4610      	mov	r0, r2
 800433e:	f7ff f90d 	bl	800355c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004342:	f001 fabf 	bl	80058c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004346:	4b0d      	ldr	r3, [pc, #52]	; (800437c <prvAddNewTaskToReadyList+0xc0>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d00e      	beq.n	800436c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800434e:	4b0a      	ldr	r3, [pc, #40]	; (8004378 <prvAddNewTaskToReadyList+0xbc>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004358:	429a      	cmp	r2, r3
 800435a:	d207      	bcs.n	800436c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800435c:	4b0b      	ldr	r3, [pc, #44]	; (800438c <prvAddNewTaskToReadyList+0xd0>)
 800435e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004362:	601a      	str	r2, [r3, #0]
 8004364:	f3bf 8f4f 	dsb	sy
 8004368:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800436c:	bf00      	nop
 800436e:	3708      	adds	r7, #8
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}
 8004374:	2000091c 	.word	0x2000091c
 8004378:	2000081c 	.word	0x2000081c
 800437c:	20000928 	.word	0x20000928
 8004380:	20000938 	.word	0x20000938
 8004384:	20000924 	.word	0x20000924
 8004388:	20000820 	.word	0x20000820
 800438c:	e000ed04 	.word	0xe000ed04

08004390 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004390:	b580      	push	{r7, lr}
 8004392:	b084      	sub	sp, #16
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004398:	2300      	movs	r3, #0
 800439a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d017      	beq.n	80043d2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80043a2:	4b13      	ldr	r3, [pc, #76]	; (80043f0 <vTaskDelay+0x60>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d00a      	beq.n	80043c0 <vTaskDelay+0x30>
	__asm volatile
 80043aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ae:	f383 8811 	msr	BASEPRI, r3
 80043b2:	f3bf 8f6f 	isb	sy
 80043b6:	f3bf 8f4f 	dsb	sy
 80043ba:	60bb      	str	r3, [r7, #8]
}
 80043bc:	bf00      	nop
 80043be:	e7fe      	b.n	80043be <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80043c0:	f000 f88a 	bl	80044d8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80043c4:	2100      	movs	r1, #0
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f000 fd88 	bl	8004edc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80043cc:	f000 f892 	bl	80044f4 <xTaskResumeAll>
 80043d0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d107      	bne.n	80043e8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80043d8:	4b06      	ldr	r3, [pc, #24]	; (80043f4 <vTaskDelay+0x64>)
 80043da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043de:	601a      	str	r2, [r3, #0]
 80043e0:	f3bf 8f4f 	dsb	sy
 80043e4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80043e8:	bf00      	nop
 80043ea:	3710      	adds	r7, #16
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}
 80043f0:	20000944 	.word	0x20000944
 80043f4:	e000ed04 	.word	0xe000ed04

080043f8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b08a      	sub	sp, #40	; 0x28
 80043fc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80043fe:	2300      	movs	r3, #0
 8004400:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004402:	2300      	movs	r3, #0
 8004404:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004406:	463a      	mov	r2, r7
 8004408:	1d39      	adds	r1, r7, #4
 800440a:	f107 0308 	add.w	r3, r7, #8
 800440e:	4618      	mov	r0, r3
 8004410:	f7fc f8d2 	bl	80005b8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004414:	6839      	ldr	r1, [r7, #0]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	68ba      	ldr	r2, [r7, #8]
 800441a:	9202      	str	r2, [sp, #8]
 800441c:	9301      	str	r3, [sp, #4]
 800441e:	2300      	movs	r3, #0
 8004420:	9300      	str	r3, [sp, #0]
 8004422:	2300      	movs	r3, #0
 8004424:	460a      	mov	r2, r1
 8004426:	4924      	ldr	r1, [pc, #144]	; (80044b8 <vTaskStartScheduler+0xc0>)
 8004428:	4824      	ldr	r0, [pc, #144]	; (80044bc <vTaskStartScheduler+0xc4>)
 800442a:	f7ff fe07 	bl	800403c <xTaskCreateStatic>
 800442e:	4603      	mov	r3, r0
 8004430:	4a23      	ldr	r2, [pc, #140]	; (80044c0 <vTaskStartScheduler+0xc8>)
 8004432:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004434:	4b22      	ldr	r3, [pc, #136]	; (80044c0 <vTaskStartScheduler+0xc8>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d002      	beq.n	8004442 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800443c:	2301      	movs	r3, #1
 800443e:	617b      	str	r3, [r7, #20]
 8004440:	e001      	b.n	8004446 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004442:	2300      	movs	r3, #0
 8004444:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	2b01      	cmp	r3, #1
 800444a:	d102      	bne.n	8004452 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800444c:	f000 fdac 	bl	8004fa8 <xTimerCreateTimerTask>
 8004450:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	2b01      	cmp	r3, #1
 8004456:	d11b      	bne.n	8004490 <vTaskStartScheduler+0x98>
	__asm volatile
 8004458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800445c:	f383 8811 	msr	BASEPRI, r3
 8004460:	f3bf 8f6f 	isb	sy
 8004464:	f3bf 8f4f 	dsb	sy
 8004468:	613b      	str	r3, [r7, #16]
}
 800446a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800446c:	4b15      	ldr	r3, [pc, #84]	; (80044c4 <vTaskStartScheduler+0xcc>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	335c      	adds	r3, #92	; 0x5c
 8004472:	4a15      	ldr	r2, [pc, #84]	; (80044c8 <vTaskStartScheduler+0xd0>)
 8004474:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004476:	4b15      	ldr	r3, [pc, #84]	; (80044cc <vTaskStartScheduler+0xd4>)
 8004478:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800447c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800447e:	4b14      	ldr	r3, [pc, #80]	; (80044d0 <vTaskStartScheduler+0xd8>)
 8004480:	2201      	movs	r2, #1
 8004482:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004484:	4b13      	ldr	r3, [pc, #76]	; (80044d4 <vTaskStartScheduler+0xdc>)
 8004486:	2200      	movs	r2, #0
 8004488:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800448a:	f001 f949 	bl	8005720 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800448e:	e00e      	b.n	80044ae <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004496:	d10a      	bne.n	80044ae <vTaskStartScheduler+0xb6>
	__asm volatile
 8004498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800449c:	f383 8811 	msr	BASEPRI, r3
 80044a0:	f3bf 8f6f 	isb	sy
 80044a4:	f3bf 8f4f 	dsb	sy
 80044a8:	60fb      	str	r3, [r7, #12]
}
 80044aa:	bf00      	nop
 80044ac:	e7fe      	b.n	80044ac <vTaskStartScheduler+0xb4>
}
 80044ae:	bf00      	nop
 80044b0:	3718      	adds	r7, #24
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}
 80044b6:	bf00      	nop
 80044b8:	08007428 	.word	0x08007428
 80044bc:	08004b1d 	.word	0x08004b1d
 80044c0:	20000940 	.word	0x20000940
 80044c4:	2000081c 	.word	0x2000081c
 80044c8:	20000010 	.word	0x20000010
 80044cc:	2000093c 	.word	0x2000093c
 80044d0:	20000928 	.word	0x20000928
 80044d4:	20000920 	.word	0x20000920

080044d8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80044d8:	b480      	push	{r7}
 80044da:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80044dc:	4b04      	ldr	r3, [pc, #16]	; (80044f0 <vTaskSuspendAll+0x18>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	3301      	adds	r3, #1
 80044e2:	4a03      	ldr	r2, [pc, #12]	; (80044f0 <vTaskSuspendAll+0x18>)
 80044e4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80044e6:	bf00      	nop
 80044e8:	46bd      	mov	sp, r7
 80044ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ee:	4770      	bx	lr
 80044f0:	20000944 	.word	0x20000944

080044f4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b084      	sub	sp, #16
 80044f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80044fa:	2300      	movs	r3, #0
 80044fc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80044fe:	2300      	movs	r3, #0
 8004500:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004502:	4b41      	ldr	r3, [pc, #260]	; (8004608 <xTaskResumeAll+0x114>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d10a      	bne.n	8004520 <xTaskResumeAll+0x2c>
	__asm volatile
 800450a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800450e:	f383 8811 	msr	BASEPRI, r3
 8004512:	f3bf 8f6f 	isb	sy
 8004516:	f3bf 8f4f 	dsb	sy
 800451a:	603b      	str	r3, [r7, #0]
}
 800451c:	bf00      	nop
 800451e:	e7fe      	b.n	800451e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004520:	f001 f9a0 	bl	8005864 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004524:	4b38      	ldr	r3, [pc, #224]	; (8004608 <xTaskResumeAll+0x114>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	3b01      	subs	r3, #1
 800452a:	4a37      	ldr	r2, [pc, #220]	; (8004608 <xTaskResumeAll+0x114>)
 800452c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800452e:	4b36      	ldr	r3, [pc, #216]	; (8004608 <xTaskResumeAll+0x114>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d161      	bne.n	80045fa <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004536:	4b35      	ldr	r3, [pc, #212]	; (800460c <xTaskResumeAll+0x118>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d05d      	beq.n	80045fa <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800453e:	e02e      	b.n	800459e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004540:	4b33      	ldr	r3, [pc, #204]	; (8004610 <xTaskResumeAll+0x11c>)
 8004542:	68db      	ldr	r3, [r3, #12]
 8004544:	68db      	ldr	r3, [r3, #12]
 8004546:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	3318      	adds	r3, #24
 800454c:	4618      	mov	r0, r3
 800454e:	f7ff f862 	bl	8003616 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	3304      	adds	r3, #4
 8004556:	4618      	mov	r0, r3
 8004558:	f7ff f85d 	bl	8003616 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004560:	2201      	movs	r2, #1
 8004562:	409a      	lsls	r2, r3
 8004564:	4b2b      	ldr	r3, [pc, #172]	; (8004614 <xTaskResumeAll+0x120>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4313      	orrs	r3, r2
 800456a:	4a2a      	ldr	r2, [pc, #168]	; (8004614 <xTaskResumeAll+0x120>)
 800456c:	6013      	str	r3, [r2, #0]
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004572:	4613      	mov	r3, r2
 8004574:	009b      	lsls	r3, r3, #2
 8004576:	4413      	add	r3, r2
 8004578:	009b      	lsls	r3, r3, #2
 800457a:	4a27      	ldr	r2, [pc, #156]	; (8004618 <xTaskResumeAll+0x124>)
 800457c:	441a      	add	r2, r3
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	3304      	adds	r3, #4
 8004582:	4619      	mov	r1, r3
 8004584:	4610      	mov	r0, r2
 8004586:	f7fe ffe9 	bl	800355c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800458e:	4b23      	ldr	r3, [pc, #140]	; (800461c <xTaskResumeAll+0x128>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004594:	429a      	cmp	r2, r3
 8004596:	d302      	bcc.n	800459e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004598:	4b21      	ldr	r3, [pc, #132]	; (8004620 <xTaskResumeAll+0x12c>)
 800459a:	2201      	movs	r2, #1
 800459c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800459e:	4b1c      	ldr	r3, [pc, #112]	; (8004610 <xTaskResumeAll+0x11c>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d1cc      	bne.n	8004540 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d001      	beq.n	80045b0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80045ac:	f000 fb72 	bl	8004c94 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80045b0:	4b1c      	ldr	r3, [pc, #112]	; (8004624 <xTaskResumeAll+0x130>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d010      	beq.n	80045de <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80045bc:	f000 f846 	bl	800464c <xTaskIncrementTick>
 80045c0:	4603      	mov	r3, r0
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d002      	beq.n	80045cc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80045c6:	4b16      	ldr	r3, [pc, #88]	; (8004620 <xTaskResumeAll+0x12c>)
 80045c8:	2201      	movs	r2, #1
 80045ca:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	3b01      	subs	r3, #1
 80045d0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d1f1      	bne.n	80045bc <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80045d8:	4b12      	ldr	r3, [pc, #72]	; (8004624 <xTaskResumeAll+0x130>)
 80045da:	2200      	movs	r2, #0
 80045dc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80045de:	4b10      	ldr	r3, [pc, #64]	; (8004620 <xTaskResumeAll+0x12c>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d009      	beq.n	80045fa <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80045e6:	2301      	movs	r3, #1
 80045e8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80045ea:	4b0f      	ldr	r3, [pc, #60]	; (8004628 <xTaskResumeAll+0x134>)
 80045ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045f0:	601a      	str	r2, [r3, #0]
 80045f2:	f3bf 8f4f 	dsb	sy
 80045f6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80045fa:	f001 f963 	bl	80058c4 <vPortExitCritical>

	return xAlreadyYielded;
 80045fe:	68bb      	ldr	r3, [r7, #8]
}
 8004600:	4618      	mov	r0, r3
 8004602:	3710      	adds	r7, #16
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}
 8004608:	20000944 	.word	0x20000944
 800460c:	2000091c 	.word	0x2000091c
 8004610:	200008dc 	.word	0x200008dc
 8004614:	20000924 	.word	0x20000924
 8004618:	20000820 	.word	0x20000820
 800461c:	2000081c 	.word	0x2000081c
 8004620:	20000930 	.word	0x20000930
 8004624:	2000092c 	.word	0x2000092c
 8004628:	e000ed04 	.word	0xe000ed04

0800462c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800462c:	b480      	push	{r7}
 800462e:	b083      	sub	sp, #12
 8004630:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004632:	4b05      	ldr	r3, [pc, #20]	; (8004648 <xTaskGetTickCount+0x1c>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004638:	687b      	ldr	r3, [r7, #4]
}
 800463a:	4618      	mov	r0, r3
 800463c:	370c      	adds	r7, #12
 800463e:	46bd      	mov	sp, r7
 8004640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004644:	4770      	bx	lr
 8004646:	bf00      	nop
 8004648:	20000920 	.word	0x20000920

0800464c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b086      	sub	sp, #24
 8004650:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004652:	2300      	movs	r3, #0
 8004654:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004656:	4b52      	ldr	r3, [pc, #328]	; (80047a0 <xTaskIncrementTick+0x154>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	2b00      	cmp	r3, #0
 800465c:	f040 8094 	bne.w	8004788 <xTaskIncrementTick+0x13c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004660:	4b50      	ldr	r3, [pc, #320]	; (80047a4 <xTaskIncrementTick+0x158>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	3301      	adds	r3, #1
 8004666:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004668:	4a4e      	ldr	r2, [pc, #312]	; (80047a4 <xTaskIncrementTick+0x158>)
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d120      	bne.n	80046b6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004674:	4b4c      	ldr	r3, [pc, #304]	; (80047a8 <xTaskIncrementTick+0x15c>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d00a      	beq.n	8004694 <xTaskIncrementTick+0x48>
	__asm volatile
 800467e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004682:	f383 8811 	msr	BASEPRI, r3
 8004686:	f3bf 8f6f 	isb	sy
 800468a:	f3bf 8f4f 	dsb	sy
 800468e:	603b      	str	r3, [r7, #0]
}
 8004690:	bf00      	nop
 8004692:	e7fe      	b.n	8004692 <xTaskIncrementTick+0x46>
 8004694:	4b44      	ldr	r3, [pc, #272]	; (80047a8 <xTaskIncrementTick+0x15c>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	60fb      	str	r3, [r7, #12]
 800469a:	4b44      	ldr	r3, [pc, #272]	; (80047ac <xTaskIncrementTick+0x160>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a42      	ldr	r2, [pc, #264]	; (80047a8 <xTaskIncrementTick+0x15c>)
 80046a0:	6013      	str	r3, [r2, #0]
 80046a2:	4a42      	ldr	r2, [pc, #264]	; (80047ac <xTaskIncrementTick+0x160>)
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	6013      	str	r3, [r2, #0]
 80046a8:	4b41      	ldr	r3, [pc, #260]	; (80047b0 <xTaskIncrementTick+0x164>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	3301      	adds	r3, #1
 80046ae:	4a40      	ldr	r2, [pc, #256]	; (80047b0 <xTaskIncrementTick+0x164>)
 80046b0:	6013      	str	r3, [r2, #0]
 80046b2:	f000 faef 	bl	8004c94 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80046b6:	4b3f      	ldr	r3, [pc, #252]	; (80047b4 <xTaskIncrementTick+0x168>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	693a      	ldr	r2, [r7, #16]
 80046bc:	429a      	cmp	r2, r3
 80046be:	d348      	bcc.n	8004752 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80046c0:	4b39      	ldr	r3, [pc, #228]	; (80047a8 <xTaskIncrementTick+0x15c>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d104      	bne.n	80046d4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80046ca:	4b3a      	ldr	r3, [pc, #232]	; (80047b4 <xTaskIncrementTick+0x168>)
 80046cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80046d0:	601a      	str	r2, [r3, #0]
					break;
 80046d2:	e03e      	b.n	8004752 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046d4:	4b34      	ldr	r3, [pc, #208]	; (80047a8 <xTaskIncrementTick+0x15c>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	68db      	ldr	r3, [r3, #12]
 80046da:	68db      	ldr	r3, [r3, #12]
 80046dc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80046e4:	693a      	ldr	r2, [r7, #16]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	429a      	cmp	r2, r3
 80046ea:	d203      	bcs.n	80046f4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80046ec:	4a31      	ldr	r2, [pc, #196]	; (80047b4 <xTaskIncrementTick+0x168>)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80046f2:	e02e      	b.n	8004752 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	3304      	adds	r3, #4
 80046f8:	4618      	mov	r0, r3
 80046fa:	f7fe ff8c 	bl	8003616 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004702:	2b00      	cmp	r3, #0
 8004704:	d004      	beq.n	8004710 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	3318      	adds	r3, #24
 800470a:	4618      	mov	r0, r3
 800470c:	f7fe ff83 	bl	8003616 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004714:	2201      	movs	r2, #1
 8004716:	409a      	lsls	r2, r3
 8004718:	4b27      	ldr	r3, [pc, #156]	; (80047b8 <xTaskIncrementTick+0x16c>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4313      	orrs	r3, r2
 800471e:	4a26      	ldr	r2, [pc, #152]	; (80047b8 <xTaskIncrementTick+0x16c>)
 8004720:	6013      	str	r3, [r2, #0]
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004726:	4613      	mov	r3, r2
 8004728:	009b      	lsls	r3, r3, #2
 800472a:	4413      	add	r3, r2
 800472c:	009b      	lsls	r3, r3, #2
 800472e:	4a23      	ldr	r2, [pc, #140]	; (80047bc <xTaskIncrementTick+0x170>)
 8004730:	441a      	add	r2, r3
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	3304      	adds	r3, #4
 8004736:	4619      	mov	r1, r3
 8004738:	4610      	mov	r0, r2
 800473a:	f7fe ff0f 	bl	800355c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004742:	4b1f      	ldr	r3, [pc, #124]	; (80047c0 <xTaskIncrementTick+0x174>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004748:	429a      	cmp	r2, r3
 800474a:	d3b9      	bcc.n	80046c0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800474c:	2301      	movs	r3, #1
 800474e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004750:	e7b6      	b.n	80046c0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004752:	4b1b      	ldr	r3, [pc, #108]	; (80047c0 <xTaskIncrementTick+0x174>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004758:	4918      	ldr	r1, [pc, #96]	; (80047bc <xTaskIncrementTick+0x170>)
 800475a:	4613      	mov	r3, r2
 800475c:	009b      	lsls	r3, r3, #2
 800475e:	4413      	add	r3, r2
 8004760:	009b      	lsls	r3, r3, #2
 8004762:	440b      	add	r3, r1
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	2b01      	cmp	r3, #1
 8004768:	d901      	bls.n	800476e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800476a:	2301      	movs	r3, #1
 800476c:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( xPendedTicks == ( TickType_t ) 0 )
 800476e:	4b15      	ldr	r3, [pc, #84]	; (80047c4 <xTaskIncrementTick+0x178>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d101      	bne.n	800477a <xTaskIncrementTick+0x12e>
			{
				vApplicationTickHook();
 8004776:	f7fb ff06 	bl	8000586 <vApplicationTickHook>
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800477a:	4b13      	ldr	r3, [pc, #76]	; (80047c8 <xTaskIncrementTick+0x17c>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d009      	beq.n	8004796 <xTaskIncrementTick+0x14a>
			{
				xSwitchRequired = pdTRUE;
 8004782:	2301      	movs	r3, #1
 8004784:	617b      	str	r3, [r7, #20]
 8004786:	e006      	b.n	8004796 <xTaskIncrementTick+0x14a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004788:	4b0e      	ldr	r3, [pc, #56]	; (80047c4 <xTaskIncrementTick+0x178>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	3301      	adds	r3, #1
 800478e:	4a0d      	ldr	r2, [pc, #52]	; (80047c4 <xTaskIncrementTick+0x178>)
 8004790:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 8004792:	f7fb fef8 	bl	8000586 <vApplicationTickHook>
		}
		#endif
	}

	return xSwitchRequired;
 8004796:	697b      	ldr	r3, [r7, #20]
}
 8004798:	4618      	mov	r0, r3
 800479a:	3718      	adds	r7, #24
 800479c:	46bd      	mov	sp, r7
 800479e:	bd80      	pop	{r7, pc}
 80047a0:	20000944 	.word	0x20000944
 80047a4:	20000920 	.word	0x20000920
 80047a8:	200008d4 	.word	0x200008d4
 80047ac:	200008d8 	.word	0x200008d8
 80047b0:	20000934 	.word	0x20000934
 80047b4:	2000093c 	.word	0x2000093c
 80047b8:	20000924 	.word	0x20000924
 80047bc:	20000820 	.word	0x20000820
 80047c0:	2000081c 	.word	0x2000081c
 80047c4:	2000092c 	.word	0x2000092c
 80047c8:	20000930 	.word	0x20000930

080047cc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b086      	sub	sp, #24
 80047d0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80047d2:	4b31      	ldr	r3, [pc, #196]	; (8004898 <vTaskSwitchContext+0xcc>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d003      	beq.n	80047e2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80047da:	4b30      	ldr	r3, [pc, #192]	; (800489c <vTaskSwitchContext+0xd0>)
 80047dc:	2201      	movs	r2, #1
 80047de:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80047e0:	e055      	b.n	800488e <vTaskSwitchContext+0xc2>
		xYieldPending = pdFALSE;
 80047e2:	4b2e      	ldr	r3, [pc, #184]	; (800489c <vTaskSwitchContext+0xd0>)
 80047e4:	2200      	movs	r2, #0
 80047e6:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 80047e8:	4b2d      	ldr	r3, [pc, #180]	; (80048a0 <vTaskSwitchContext+0xd4>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	4b2c      	ldr	r3, [pc, #176]	; (80048a0 <vTaskSwitchContext+0xd4>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047f4:	429a      	cmp	r2, r3
 80047f6:	d808      	bhi.n	800480a <vTaskSwitchContext+0x3e>
 80047f8:	4b29      	ldr	r3, [pc, #164]	; (80048a0 <vTaskSwitchContext+0xd4>)
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	4b28      	ldr	r3, [pc, #160]	; (80048a0 <vTaskSwitchContext+0xd4>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	3334      	adds	r3, #52	; 0x34
 8004802:	4619      	mov	r1, r3
 8004804:	4610      	mov	r0, r2
 8004806:	f7fb fec5 	bl	8000594 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800480a:	4b26      	ldr	r3, [pc, #152]	; (80048a4 <vTaskSwitchContext+0xd8>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	fab3 f383 	clz	r3, r3
 8004816:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004818:	7afb      	ldrb	r3, [r7, #11]
 800481a:	f1c3 031f 	rsb	r3, r3, #31
 800481e:	617b      	str	r3, [r7, #20]
 8004820:	4921      	ldr	r1, [pc, #132]	; (80048a8 <vTaskSwitchContext+0xdc>)
 8004822:	697a      	ldr	r2, [r7, #20]
 8004824:	4613      	mov	r3, r2
 8004826:	009b      	lsls	r3, r3, #2
 8004828:	4413      	add	r3, r2
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	440b      	add	r3, r1
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d10a      	bne.n	800484a <vTaskSwitchContext+0x7e>
	__asm volatile
 8004834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004838:	f383 8811 	msr	BASEPRI, r3
 800483c:	f3bf 8f6f 	isb	sy
 8004840:	f3bf 8f4f 	dsb	sy
 8004844:	607b      	str	r3, [r7, #4]
}
 8004846:	bf00      	nop
 8004848:	e7fe      	b.n	8004848 <vTaskSwitchContext+0x7c>
 800484a:	697a      	ldr	r2, [r7, #20]
 800484c:	4613      	mov	r3, r2
 800484e:	009b      	lsls	r3, r3, #2
 8004850:	4413      	add	r3, r2
 8004852:	009b      	lsls	r3, r3, #2
 8004854:	4a14      	ldr	r2, [pc, #80]	; (80048a8 <vTaskSwitchContext+0xdc>)
 8004856:	4413      	add	r3, r2
 8004858:	613b      	str	r3, [r7, #16]
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	685a      	ldr	r2, [r3, #4]
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	605a      	str	r2, [r3, #4]
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	685a      	ldr	r2, [r3, #4]
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	3308      	adds	r3, #8
 800486c:	429a      	cmp	r2, r3
 800486e:	d104      	bne.n	800487a <vTaskSwitchContext+0xae>
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	685a      	ldr	r2, [r3, #4]
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	605a      	str	r2, [r3, #4]
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	68db      	ldr	r3, [r3, #12]
 8004880:	4a07      	ldr	r2, [pc, #28]	; (80048a0 <vTaskSwitchContext+0xd4>)
 8004882:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004884:	4b06      	ldr	r3, [pc, #24]	; (80048a0 <vTaskSwitchContext+0xd4>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	335c      	adds	r3, #92	; 0x5c
 800488a:	4a08      	ldr	r2, [pc, #32]	; (80048ac <vTaskSwitchContext+0xe0>)
 800488c:	6013      	str	r3, [r2, #0]
}
 800488e:	bf00      	nop
 8004890:	3718      	adds	r7, #24
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}
 8004896:	bf00      	nop
 8004898:	20000944 	.word	0x20000944
 800489c:	20000930 	.word	0x20000930
 80048a0:	2000081c 	.word	0x2000081c
 80048a4:	20000924 	.word	0x20000924
 80048a8:	20000820 	.word	0x20000820
 80048ac:	20000010 	.word	0x20000010

080048b0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b084      	sub	sp, #16
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
 80048b8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d10a      	bne.n	80048d6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80048c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048c4:	f383 8811 	msr	BASEPRI, r3
 80048c8:	f3bf 8f6f 	isb	sy
 80048cc:	f3bf 8f4f 	dsb	sy
 80048d0:	60fb      	str	r3, [r7, #12]
}
 80048d2:	bf00      	nop
 80048d4:	e7fe      	b.n	80048d4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80048d6:	4b07      	ldr	r3, [pc, #28]	; (80048f4 <vTaskPlaceOnEventList+0x44>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	3318      	adds	r3, #24
 80048dc:	4619      	mov	r1, r3
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f7fe fe60 	bl	80035a4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80048e4:	2101      	movs	r1, #1
 80048e6:	6838      	ldr	r0, [r7, #0]
 80048e8:	f000 faf8 	bl	8004edc <prvAddCurrentTaskToDelayedList>
}
 80048ec:	bf00      	nop
 80048ee:	3710      	adds	r7, #16
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}
 80048f4:	2000081c 	.word	0x2000081c

080048f8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b086      	sub	sp, #24
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	60f8      	str	r0, [r7, #12]
 8004900:	60b9      	str	r1, [r7, #8]
 8004902:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d10a      	bne.n	8004920 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800490a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800490e:	f383 8811 	msr	BASEPRI, r3
 8004912:	f3bf 8f6f 	isb	sy
 8004916:	f3bf 8f4f 	dsb	sy
 800491a:	617b      	str	r3, [r7, #20]
}
 800491c:	bf00      	nop
 800491e:	e7fe      	b.n	800491e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004920:	4b0a      	ldr	r3, [pc, #40]	; (800494c <vTaskPlaceOnEventListRestricted+0x54>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	3318      	adds	r3, #24
 8004926:	4619      	mov	r1, r3
 8004928:	68f8      	ldr	r0, [r7, #12]
 800492a:	f7fe fe17 	bl	800355c <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d002      	beq.n	800493a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004934:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004938:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800493a:	6879      	ldr	r1, [r7, #4]
 800493c:	68b8      	ldr	r0, [r7, #8]
 800493e:	f000 facd 	bl	8004edc <prvAddCurrentTaskToDelayedList>
	}
 8004942:	bf00      	nop
 8004944:	3718      	adds	r7, #24
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}
 800494a:	bf00      	nop
 800494c:	2000081c 	.word	0x2000081c

08004950 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b086      	sub	sp, #24
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	68db      	ldr	r3, [r3, #12]
 800495c:	68db      	ldr	r3, [r3, #12]
 800495e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d10a      	bne.n	800497c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800496a:	f383 8811 	msr	BASEPRI, r3
 800496e:	f3bf 8f6f 	isb	sy
 8004972:	f3bf 8f4f 	dsb	sy
 8004976:	60fb      	str	r3, [r7, #12]
}
 8004978:	bf00      	nop
 800497a:	e7fe      	b.n	800497a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	3318      	adds	r3, #24
 8004980:	4618      	mov	r0, r3
 8004982:	f7fe fe48 	bl	8003616 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004986:	4b1d      	ldr	r3, [pc, #116]	; (80049fc <xTaskRemoveFromEventList+0xac>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d11c      	bne.n	80049c8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	3304      	adds	r3, #4
 8004992:	4618      	mov	r0, r3
 8004994:	f7fe fe3f 	bl	8003616 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800499c:	2201      	movs	r2, #1
 800499e:	409a      	lsls	r2, r3
 80049a0:	4b17      	ldr	r3, [pc, #92]	; (8004a00 <xTaskRemoveFromEventList+0xb0>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4313      	orrs	r3, r2
 80049a6:	4a16      	ldr	r2, [pc, #88]	; (8004a00 <xTaskRemoveFromEventList+0xb0>)
 80049a8:	6013      	str	r3, [r2, #0]
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049ae:	4613      	mov	r3, r2
 80049b0:	009b      	lsls	r3, r3, #2
 80049b2:	4413      	add	r3, r2
 80049b4:	009b      	lsls	r3, r3, #2
 80049b6:	4a13      	ldr	r2, [pc, #76]	; (8004a04 <xTaskRemoveFromEventList+0xb4>)
 80049b8:	441a      	add	r2, r3
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	3304      	adds	r3, #4
 80049be:	4619      	mov	r1, r3
 80049c0:	4610      	mov	r0, r2
 80049c2:	f7fe fdcb 	bl	800355c <vListInsertEnd>
 80049c6:	e005      	b.n	80049d4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80049c8:	693b      	ldr	r3, [r7, #16]
 80049ca:	3318      	adds	r3, #24
 80049cc:	4619      	mov	r1, r3
 80049ce:	480e      	ldr	r0, [pc, #56]	; (8004a08 <xTaskRemoveFromEventList+0xb8>)
 80049d0:	f7fe fdc4 	bl	800355c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049d8:	4b0c      	ldr	r3, [pc, #48]	; (8004a0c <xTaskRemoveFromEventList+0xbc>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049de:	429a      	cmp	r2, r3
 80049e0:	d905      	bls.n	80049ee <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80049e2:	2301      	movs	r3, #1
 80049e4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80049e6:	4b0a      	ldr	r3, [pc, #40]	; (8004a10 <xTaskRemoveFromEventList+0xc0>)
 80049e8:	2201      	movs	r2, #1
 80049ea:	601a      	str	r2, [r3, #0]
 80049ec:	e001      	b.n	80049f2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80049ee:	2300      	movs	r3, #0
 80049f0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80049f2:	697b      	ldr	r3, [r7, #20]
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	3718      	adds	r7, #24
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}
 80049fc:	20000944 	.word	0x20000944
 8004a00:	20000924 	.word	0x20000924
 8004a04:	20000820 	.word	0x20000820
 8004a08:	200008dc 	.word	0x200008dc
 8004a0c:	2000081c 	.word	0x2000081c
 8004a10:	20000930 	.word	0x20000930

08004a14 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004a14:	b480      	push	{r7}
 8004a16:	b083      	sub	sp, #12
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004a1c:	4b06      	ldr	r3, [pc, #24]	; (8004a38 <vTaskInternalSetTimeOutState+0x24>)
 8004a1e:	681a      	ldr	r2, [r3, #0]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004a24:	4b05      	ldr	r3, [pc, #20]	; (8004a3c <vTaskInternalSetTimeOutState+0x28>)
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	605a      	str	r2, [r3, #4]
}
 8004a2c:	bf00      	nop
 8004a2e:	370c      	adds	r7, #12
 8004a30:	46bd      	mov	sp, r7
 8004a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a36:	4770      	bx	lr
 8004a38:	20000934 	.word	0x20000934
 8004a3c:	20000920 	.word	0x20000920

08004a40 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b088      	sub	sp, #32
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
 8004a48:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d10a      	bne.n	8004a66 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a54:	f383 8811 	msr	BASEPRI, r3
 8004a58:	f3bf 8f6f 	isb	sy
 8004a5c:	f3bf 8f4f 	dsb	sy
 8004a60:	613b      	str	r3, [r7, #16]
}
 8004a62:	bf00      	nop
 8004a64:	e7fe      	b.n	8004a64 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d10a      	bne.n	8004a82 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a70:	f383 8811 	msr	BASEPRI, r3
 8004a74:	f3bf 8f6f 	isb	sy
 8004a78:	f3bf 8f4f 	dsb	sy
 8004a7c:	60fb      	str	r3, [r7, #12]
}
 8004a7e:	bf00      	nop
 8004a80:	e7fe      	b.n	8004a80 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004a82:	f000 feef 	bl	8005864 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004a86:	4b1d      	ldr	r3, [pc, #116]	; (8004afc <xTaskCheckForTimeOut+0xbc>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	69ba      	ldr	r2, [r7, #24]
 8004a92:	1ad3      	subs	r3, r2, r3
 8004a94:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a9e:	d102      	bne.n	8004aa6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	61fb      	str	r3, [r7, #28]
 8004aa4:	e023      	b.n	8004aee <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	4b15      	ldr	r3, [pc, #84]	; (8004b00 <xTaskCheckForTimeOut+0xc0>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	d007      	beq.n	8004ac2 <xTaskCheckForTimeOut+0x82>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	69ba      	ldr	r2, [r7, #24]
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	d302      	bcc.n	8004ac2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004abc:	2301      	movs	r3, #1
 8004abe:	61fb      	str	r3, [r7, #28]
 8004ac0:	e015      	b.n	8004aee <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	697a      	ldr	r2, [r7, #20]
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	d20b      	bcs.n	8004ae4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	681a      	ldr	r2, [r3, #0]
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	1ad2      	subs	r2, r2, r3
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004ad8:	6878      	ldr	r0, [r7, #4]
 8004ada:	f7ff ff9b 	bl	8004a14 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	61fb      	str	r3, [r7, #28]
 8004ae2:	e004      	b.n	8004aee <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004aea:	2301      	movs	r3, #1
 8004aec:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004aee:	f000 fee9 	bl	80058c4 <vPortExitCritical>

	return xReturn;
 8004af2:	69fb      	ldr	r3, [r7, #28]
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	3720      	adds	r7, #32
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}
 8004afc:	20000920 	.word	0x20000920
 8004b00:	20000934 	.word	0x20000934

08004b04 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004b04:	b480      	push	{r7}
 8004b06:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004b08:	4b03      	ldr	r3, [pc, #12]	; (8004b18 <vTaskMissedYield+0x14>)
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	601a      	str	r2, [r3, #0]
}
 8004b0e:	bf00      	nop
 8004b10:	46bd      	mov	sp, r7
 8004b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b16:	4770      	bx	lr
 8004b18:	20000930 	.word	0x20000930

08004b1c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b082      	sub	sp, #8
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004b24:	f000 f854 	bl	8004bd0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004b28:	4b07      	ldr	r3, [pc, #28]	; (8004b48 <prvIdleTask+0x2c>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	d907      	bls.n	8004b40 <prvIdleTask+0x24>
			{
				taskYIELD();
 8004b30:	4b06      	ldr	r3, [pc, #24]	; (8004b4c <prvIdleTask+0x30>)
 8004b32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b36:	601a      	str	r2, [r3, #0]
 8004b38:	f3bf 8f4f 	dsb	sy
 8004b3c:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8004b40:	f7fb fd1a 	bl	8000578 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8004b44:	e7ee      	b.n	8004b24 <prvIdleTask+0x8>
 8004b46:	bf00      	nop
 8004b48:	20000820 	.word	0x20000820
 8004b4c:	e000ed04 	.word	0xe000ed04

08004b50 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b082      	sub	sp, #8
 8004b54:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004b56:	2300      	movs	r3, #0
 8004b58:	607b      	str	r3, [r7, #4]
 8004b5a:	e00c      	b.n	8004b76 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004b5c:	687a      	ldr	r2, [r7, #4]
 8004b5e:	4613      	mov	r3, r2
 8004b60:	009b      	lsls	r3, r3, #2
 8004b62:	4413      	add	r3, r2
 8004b64:	009b      	lsls	r3, r3, #2
 8004b66:	4a12      	ldr	r2, [pc, #72]	; (8004bb0 <prvInitialiseTaskLists+0x60>)
 8004b68:	4413      	add	r3, r2
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f7fe fcc9 	bl	8003502 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	3301      	adds	r3, #1
 8004b74:	607b      	str	r3, [r7, #4]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2b06      	cmp	r3, #6
 8004b7a:	d9ef      	bls.n	8004b5c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004b7c:	480d      	ldr	r0, [pc, #52]	; (8004bb4 <prvInitialiseTaskLists+0x64>)
 8004b7e:	f7fe fcc0 	bl	8003502 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004b82:	480d      	ldr	r0, [pc, #52]	; (8004bb8 <prvInitialiseTaskLists+0x68>)
 8004b84:	f7fe fcbd 	bl	8003502 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004b88:	480c      	ldr	r0, [pc, #48]	; (8004bbc <prvInitialiseTaskLists+0x6c>)
 8004b8a:	f7fe fcba 	bl	8003502 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004b8e:	480c      	ldr	r0, [pc, #48]	; (8004bc0 <prvInitialiseTaskLists+0x70>)
 8004b90:	f7fe fcb7 	bl	8003502 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004b94:	480b      	ldr	r0, [pc, #44]	; (8004bc4 <prvInitialiseTaskLists+0x74>)
 8004b96:	f7fe fcb4 	bl	8003502 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004b9a:	4b0b      	ldr	r3, [pc, #44]	; (8004bc8 <prvInitialiseTaskLists+0x78>)
 8004b9c:	4a05      	ldr	r2, [pc, #20]	; (8004bb4 <prvInitialiseTaskLists+0x64>)
 8004b9e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004ba0:	4b0a      	ldr	r3, [pc, #40]	; (8004bcc <prvInitialiseTaskLists+0x7c>)
 8004ba2:	4a05      	ldr	r2, [pc, #20]	; (8004bb8 <prvInitialiseTaskLists+0x68>)
 8004ba4:	601a      	str	r2, [r3, #0]
}
 8004ba6:	bf00      	nop
 8004ba8:	3708      	adds	r7, #8
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}
 8004bae:	bf00      	nop
 8004bb0:	20000820 	.word	0x20000820
 8004bb4:	200008ac 	.word	0x200008ac
 8004bb8:	200008c0 	.word	0x200008c0
 8004bbc:	200008dc 	.word	0x200008dc
 8004bc0:	200008f0 	.word	0x200008f0
 8004bc4:	20000908 	.word	0x20000908
 8004bc8:	200008d4 	.word	0x200008d4
 8004bcc:	200008d8 	.word	0x200008d8

08004bd0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b082      	sub	sp, #8
 8004bd4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004bd6:	e019      	b.n	8004c0c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004bd8:	f000 fe44 	bl	8005864 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004bdc:	4b10      	ldr	r3, [pc, #64]	; (8004c20 <prvCheckTasksWaitingTermination+0x50>)
 8004bde:	68db      	ldr	r3, [r3, #12]
 8004be0:	68db      	ldr	r3, [r3, #12]
 8004be2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	3304      	adds	r3, #4
 8004be8:	4618      	mov	r0, r3
 8004bea:	f7fe fd14 	bl	8003616 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004bee:	4b0d      	ldr	r3, [pc, #52]	; (8004c24 <prvCheckTasksWaitingTermination+0x54>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	3b01      	subs	r3, #1
 8004bf4:	4a0b      	ldr	r2, [pc, #44]	; (8004c24 <prvCheckTasksWaitingTermination+0x54>)
 8004bf6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004bf8:	4b0b      	ldr	r3, [pc, #44]	; (8004c28 <prvCheckTasksWaitingTermination+0x58>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	3b01      	subs	r3, #1
 8004bfe:	4a0a      	ldr	r2, [pc, #40]	; (8004c28 <prvCheckTasksWaitingTermination+0x58>)
 8004c00:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004c02:	f000 fe5f 	bl	80058c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f000 f810 	bl	8004c2c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004c0c:	4b06      	ldr	r3, [pc, #24]	; (8004c28 <prvCheckTasksWaitingTermination+0x58>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d1e1      	bne.n	8004bd8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004c14:	bf00      	nop
 8004c16:	bf00      	nop
 8004c18:	3708      	adds	r7, #8
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}
 8004c1e:	bf00      	nop
 8004c20:	200008f0 	.word	0x200008f0
 8004c24:	2000091c 	.word	0x2000091c
 8004c28:	20000904 	.word	0x20000904

08004c2c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b084      	sub	sp, #16
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	335c      	adds	r3, #92	; 0x5c
 8004c38:	4618      	mov	r0, r3
 8004c3a:	f002 f81f 	bl	8006c7c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d108      	bne.n	8004c5a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	f000 fffb 	bl	8005c48 <vPortFree>
				vPortFree( pxTCB );
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f000 fff8 	bl	8005c48 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004c58:	e018      	b.n	8004c8c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8004c60:	2b01      	cmp	r3, #1
 8004c62:	d103      	bne.n	8004c6c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004c64:	6878      	ldr	r0, [r7, #4]
 8004c66:	f000 ffef 	bl	8005c48 <vPortFree>
	}
 8004c6a:	e00f      	b.n	8004c8c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8004c72:	2b02      	cmp	r3, #2
 8004c74:	d00a      	beq.n	8004c8c <prvDeleteTCB+0x60>
	__asm volatile
 8004c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c7a:	f383 8811 	msr	BASEPRI, r3
 8004c7e:	f3bf 8f6f 	isb	sy
 8004c82:	f3bf 8f4f 	dsb	sy
 8004c86:	60fb      	str	r3, [r7, #12]
}
 8004c88:	bf00      	nop
 8004c8a:	e7fe      	b.n	8004c8a <prvDeleteTCB+0x5e>
	}
 8004c8c:	bf00      	nop
 8004c8e:	3710      	adds	r7, #16
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}

08004c94 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004c94:	b480      	push	{r7}
 8004c96:	b083      	sub	sp, #12
 8004c98:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004c9a:	4b0c      	ldr	r3, [pc, #48]	; (8004ccc <prvResetNextTaskUnblockTime+0x38>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d104      	bne.n	8004cae <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004ca4:	4b0a      	ldr	r3, [pc, #40]	; (8004cd0 <prvResetNextTaskUnblockTime+0x3c>)
 8004ca6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004caa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004cac:	e008      	b.n	8004cc0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004cae:	4b07      	ldr	r3, [pc, #28]	; (8004ccc <prvResetNextTaskUnblockTime+0x38>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	68db      	ldr	r3, [r3, #12]
 8004cb4:	68db      	ldr	r3, [r3, #12]
 8004cb6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	4a04      	ldr	r2, [pc, #16]	; (8004cd0 <prvResetNextTaskUnblockTime+0x3c>)
 8004cbe:	6013      	str	r3, [r2, #0]
}
 8004cc0:	bf00      	nop
 8004cc2:	370c      	adds	r7, #12
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cca:	4770      	bx	lr
 8004ccc:	200008d4 	.word	0x200008d4
 8004cd0:	2000093c 	.word	0x2000093c

08004cd4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b083      	sub	sp, #12
 8004cd8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004cda:	4b0b      	ldr	r3, [pc, #44]	; (8004d08 <xTaskGetSchedulerState+0x34>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d102      	bne.n	8004ce8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	607b      	str	r3, [r7, #4]
 8004ce6:	e008      	b.n	8004cfa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ce8:	4b08      	ldr	r3, [pc, #32]	; (8004d0c <xTaskGetSchedulerState+0x38>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d102      	bne.n	8004cf6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004cf0:	2302      	movs	r3, #2
 8004cf2:	607b      	str	r3, [r7, #4]
 8004cf4:	e001      	b.n	8004cfa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004cfa:	687b      	ldr	r3, [r7, #4]
	}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	370c      	adds	r7, #12
 8004d00:	46bd      	mov	sp, r7
 8004d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d06:	4770      	bx	lr
 8004d08:	20000928 	.word	0x20000928
 8004d0c:	20000944 	.word	0x20000944

08004d10 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b086      	sub	sp, #24
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d06e      	beq.n	8004e04 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004d26:	4b3a      	ldr	r3, [pc, #232]	; (8004e10 <xTaskPriorityDisinherit+0x100>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	693a      	ldr	r2, [r7, #16]
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	d00a      	beq.n	8004d46 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d34:	f383 8811 	msr	BASEPRI, r3
 8004d38:	f3bf 8f6f 	isb	sy
 8004d3c:	f3bf 8f4f 	dsb	sy
 8004d40:	60fb      	str	r3, [r7, #12]
}
 8004d42:	bf00      	nop
 8004d44:	e7fe      	b.n	8004d44 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d10a      	bne.n	8004d64 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d52:	f383 8811 	msr	BASEPRI, r3
 8004d56:	f3bf 8f6f 	isb	sy
 8004d5a:	f3bf 8f4f 	dsb	sy
 8004d5e:	60bb      	str	r3, [r7, #8]
}
 8004d60:	bf00      	nop
 8004d62:	e7fe      	b.n	8004d62 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d68:	1e5a      	subs	r2, r3, #1
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	659a      	str	r2, [r3, #88]	; 0x58

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d76:	429a      	cmp	r2, r3
 8004d78:	d044      	beq.n	8004e04 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d140      	bne.n	8004e04 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	3304      	adds	r3, #4
 8004d86:	4618      	mov	r0, r3
 8004d88:	f7fe fc45 	bl	8003616 <uxListRemove>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d115      	bne.n	8004dbe <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d96:	491f      	ldr	r1, [pc, #124]	; (8004e14 <xTaskPriorityDisinherit+0x104>)
 8004d98:	4613      	mov	r3, r2
 8004d9a:	009b      	lsls	r3, r3, #2
 8004d9c:	4413      	add	r3, r2
 8004d9e:	009b      	lsls	r3, r3, #2
 8004da0:	440b      	add	r3, r1
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d10a      	bne.n	8004dbe <xTaskPriorityDisinherit+0xae>
 8004da8:	693b      	ldr	r3, [r7, #16]
 8004daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dac:	2201      	movs	r2, #1
 8004dae:	fa02 f303 	lsl.w	r3, r2, r3
 8004db2:	43da      	mvns	r2, r3
 8004db4:	4b18      	ldr	r3, [pc, #96]	; (8004e18 <xTaskPriorityDisinherit+0x108>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4013      	ands	r3, r2
 8004dba:	4a17      	ldr	r2, [pc, #92]	; (8004e18 <xTaskPriorityDisinherit+0x108>)
 8004dbc:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004dbe:	693b      	ldr	r3, [r7, #16]
 8004dc0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dca:	f1c3 0207 	rsb	r2, r3, #7
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	409a      	lsls	r2, r3
 8004dda:	4b0f      	ldr	r3, [pc, #60]	; (8004e18 <xTaskPriorityDisinherit+0x108>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4313      	orrs	r3, r2
 8004de0:	4a0d      	ldr	r2, [pc, #52]	; (8004e18 <xTaskPriorityDisinherit+0x108>)
 8004de2:	6013      	str	r3, [r2, #0]
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004de8:	4613      	mov	r3, r2
 8004dea:	009b      	lsls	r3, r3, #2
 8004dec:	4413      	add	r3, r2
 8004dee:	009b      	lsls	r3, r3, #2
 8004df0:	4a08      	ldr	r2, [pc, #32]	; (8004e14 <xTaskPriorityDisinherit+0x104>)
 8004df2:	441a      	add	r2, r3
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	3304      	adds	r3, #4
 8004df8:	4619      	mov	r1, r3
 8004dfa:	4610      	mov	r0, r2
 8004dfc:	f7fe fbae 	bl	800355c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004e00:	2301      	movs	r3, #1
 8004e02:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004e04:	697b      	ldr	r3, [r7, #20]
	}
 8004e06:	4618      	mov	r0, r3
 8004e08:	3718      	adds	r7, #24
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}
 8004e0e:	bf00      	nop
 8004e10:	2000081c 	.word	0x2000081c
 8004e14:	20000820 	.word	0x20000820
 8004e18:	20000924 	.word	0x20000924

08004e1c <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b086      	sub	sp, #24
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	60f8      	str	r0, [r7, #12]
 8004e24:	60b9      	str	r1, [r7, #8]
 8004e26:	607a      	str	r2, [r7, #4]
 8004e28:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8004e2a:	f000 fd1b 	bl	8005864 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8004e2e:	4b29      	ldr	r3, [pc, #164]	; (8004ed4 <xTaskNotifyWait+0xb8>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8004e36:	b2db      	uxtb	r3, r3
 8004e38:	2b02      	cmp	r3, #2
 8004e3a:	d01c      	beq.n	8004e76 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8004e3c:	4b25      	ldr	r3, [pc, #148]	; (8004ed4 <xTaskNotifyWait+0xb8>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f8d3 10bc 	ldr.w	r1, [r3, #188]	; 0xbc
 8004e44:	68fa      	ldr	r2, [r7, #12]
 8004e46:	43d2      	mvns	r2, r2
 8004e48:	400a      	ands	r2, r1
 8004e4a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8004e4e:	4b21      	ldr	r3, [pc, #132]	; (8004ed4 <xTaskNotifyWait+0xb8>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	2201      	movs	r2, #1
 8004e54:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

				if( xTicksToWait > ( TickType_t ) 0 )
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d00b      	beq.n	8004e76 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004e5e:	2101      	movs	r1, #1
 8004e60:	6838      	ldr	r0, [r7, #0]
 8004e62:	f000 f83b 	bl	8004edc <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8004e66:	4b1c      	ldr	r3, [pc, #112]	; (8004ed8 <xTaskNotifyWait+0xbc>)
 8004e68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e6c:	601a      	str	r2, [r3, #0]
 8004e6e:	f3bf 8f4f 	dsb	sy
 8004e72:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8004e76:	f000 fd25 	bl	80058c4 <vPortExitCritical>

		taskENTER_CRITICAL();
 8004e7a:	f000 fcf3 	bl	8005864 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d005      	beq.n	8004e90 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8004e84:	4b13      	ldr	r3, [pc, #76]	; (8004ed4 <xTaskNotifyWait+0xb8>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8004e90:	4b10      	ldr	r3, [pc, #64]	; (8004ed4 <xTaskNotifyWait+0xb8>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8004e98:	b2db      	uxtb	r3, r3
 8004e9a:	2b02      	cmp	r3, #2
 8004e9c:	d002      	beq.n	8004ea4 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	617b      	str	r3, [r7, #20]
 8004ea2:	e00a      	b.n	8004eba <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8004ea4:	4b0b      	ldr	r3, [pc, #44]	; (8004ed4 <xTaskNotifyWait+0xb8>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f8d3 10bc 	ldr.w	r1, [r3, #188]	; 0xbc
 8004eac:	68ba      	ldr	r2, [r7, #8]
 8004eae:	43d2      	mvns	r2, r2
 8004eb0:	400a      	ands	r2, r1
 8004eb2:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
				xReturn = pdTRUE;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004eba:	4b06      	ldr	r3, [pc, #24]	; (8004ed4 <xTaskNotifyWait+0xb8>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
		}
		taskEXIT_CRITICAL();
 8004ec4:	f000 fcfe 	bl	80058c4 <vPortExitCritical>

		return xReturn;
 8004ec8:	697b      	ldr	r3, [r7, #20]
	}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3718      	adds	r7, #24
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}
 8004ed2:	bf00      	nop
 8004ed4:	2000081c 	.word	0x2000081c
 8004ed8:	e000ed04 	.word	0xe000ed04

08004edc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b084      	sub	sp, #16
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
 8004ee4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004ee6:	4b29      	ldr	r3, [pc, #164]	; (8004f8c <prvAddCurrentTaskToDelayedList+0xb0>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004eec:	4b28      	ldr	r3, [pc, #160]	; (8004f90 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	3304      	adds	r3, #4
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	f7fe fb8f 	bl	8003616 <uxListRemove>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d10b      	bne.n	8004f16 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004efe:	4b24      	ldr	r3, [pc, #144]	; (8004f90 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f04:	2201      	movs	r2, #1
 8004f06:	fa02 f303 	lsl.w	r3, r2, r3
 8004f0a:	43da      	mvns	r2, r3
 8004f0c:	4b21      	ldr	r3, [pc, #132]	; (8004f94 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4013      	ands	r3, r2
 8004f12:	4a20      	ldr	r2, [pc, #128]	; (8004f94 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004f14:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f1c:	d10a      	bne.n	8004f34 <prvAddCurrentTaskToDelayedList+0x58>
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d007      	beq.n	8004f34 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004f24:	4b1a      	ldr	r3, [pc, #104]	; (8004f90 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	3304      	adds	r3, #4
 8004f2a:	4619      	mov	r1, r3
 8004f2c:	481a      	ldr	r0, [pc, #104]	; (8004f98 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004f2e:	f7fe fb15 	bl	800355c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004f32:	e026      	b.n	8004f82 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004f34:	68fa      	ldr	r2, [r7, #12]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	4413      	add	r3, r2
 8004f3a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004f3c:	4b14      	ldr	r3, [pc, #80]	; (8004f90 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	68ba      	ldr	r2, [r7, #8]
 8004f42:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004f44:	68ba      	ldr	r2, [r7, #8]
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	d209      	bcs.n	8004f60 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004f4c:	4b13      	ldr	r3, [pc, #76]	; (8004f9c <prvAddCurrentTaskToDelayedList+0xc0>)
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	4b0f      	ldr	r3, [pc, #60]	; (8004f90 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	3304      	adds	r3, #4
 8004f56:	4619      	mov	r1, r3
 8004f58:	4610      	mov	r0, r2
 8004f5a:	f7fe fb23 	bl	80035a4 <vListInsert>
}
 8004f5e:	e010      	b.n	8004f82 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004f60:	4b0f      	ldr	r3, [pc, #60]	; (8004fa0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004f62:	681a      	ldr	r2, [r3, #0]
 8004f64:	4b0a      	ldr	r3, [pc, #40]	; (8004f90 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	3304      	adds	r3, #4
 8004f6a:	4619      	mov	r1, r3
 8004f6c:	4610      	mov	r0, r2
 8004f6e:	f7fe fb19 	bl	80035a4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004f72:	4b0c      	ldr	r3, [pc, #48]	; (8004fa4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	68ba      	ldr	r2, [r7, #8]
 8004f78:	429a      	cmp	r2, r3
 8004f7a:	d202      	bcs.n	8004f82 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004f7c:	4a09      	ldr	r2, [pc, #36]	; (8004fa4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	6013      	str	r3, [r2, #0]
}
 8004f82:	bf00      	nop
 8004f84:	3710      	adds	r7, #16
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}
 8004f8a:	bf00      	nop
 8004f8c:	20000920 	.word	0x20000920
 8004f90:	2000081c 	.word	0x2000081c
 8004f94:	20000924 	.word	0x20000924
 8004f98:	20000908 	.word	0x20000908
 8004f9c:	200008d8 	.word	0x200008d8
 8004fa0:	200008d4 	.word	0x200008d4
 8004fa4:	2000093c 	.word	0x2000093c

08004fa8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b08a      	sub	sp, #40	; 0x28
 8004fac:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004fae:	2300      	movs	r3, #0
 8004fb0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004fb2:	f000 faeb 	bl	800558c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004fb6:	4b1c      	ldr	r3, [pc, #112]	; (8005028 <xTimerCreateTimerTask+0x80>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d021      	beq.n	8005002 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004fc6:	1d3a      	adds	r2, r7, #4
 8004fc8:	f107 0108 	add.w	r1, r7, #8
 8004fcc:	f107 030c 	add.w	r3, r7, #12
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	f7fb fb0b 	bl	80005ec <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004fd6:	6879      	ldr	r1, [r7, #4]
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	68fa      	ldr	r2, [r7, #12]
 8004fdc:	9202      	str	r2, [sp, #8]
 8004fde:	9301      	str	r3, [sp, #4]
 8004fe0:	2302      	movs	r3, #2
 8004fe2:	9300      	str	r3, [sp, #0]
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	460a      	mov	r2, r1
 8004fe8:	4910      	ldr	r1, [pc, #64]	; (800502c <xTimerCreateTimerTask+0x84>)
 8004fea:	4811      	ldr	r0, [pc, #68]	; (8005030 <xTimerCreateTimerTask+0x88>)
 8004fec:	f7ff f826 	bl	800403c <xTaskCreateStatic>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	4a10      	ldr	r2, [pc, #64]	; (8005034 <xTimerCreateTimerTask+0x8c>)
 8004ff4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004ff6:	4b0f      	ldr	r3, [pc, #60]	; (8005034 <xTimerCreateTimerTask+0x8c>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d001      	beq.n	8005002 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004ffe:	2301      	movs	r3, #1
 8005000:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d10a      	bne.n	800501e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800500c:	f383 8811 	msr	BASEPRI, r3
 8005010:	f3bf 8f6f 	isb	sy
 8005014:	f3bf 8f4f 	dsb	sy
 8005018:	613b      	str	r3, [r7, #16]
}
 800501a:	bf00      	nop
 800501c:	e7fe      	b.n	800501c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800501e:	697b      	ldr	r3, [r7, #20]
}
 8005020:	4618      	mov	r0, r3
 8005022:	3718      	adds	r7, #24
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}
 8005028:	20000978 	.word	0x20000978
 800502c:	08007430 	.word	0x08007430
 8005030:	0800516d 	.word	0x0800516d
 8005034:	2000097c 	.word	0x2000097c

08005038 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b08a      	sub	sp, #40	; 0x28
 800503c:	af00      	add	r7, sp, #0
 800503e:	60f8      	str	r0, [r7, #12]
 8005040:	60b9      	str	r1, [r7, #8]
 8005042:	607a      	str	r2, [r7, #4]
 8005044:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005046:	2300      	movs	r3, #0
 8005048:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d10a      	bne.n	8005066 <xTimerGenericCommand+0x2e>
	__asm volatile
 8005050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005054:	f383 8811 	msr	BASEPRI, r3
 8005058:	f3bf 8f6f 	isb	sy
 800505c:	f3bf 8f4f 	dsb	sy
 8005060:	623b      	str	r3, [r7, #32]
}
 8005062:	bf00      	nop
 8005064:	e7fe      	b.n	8005064 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005066:	4b1a      	ldr	r3, [pc, #104]	; (80050d0 <xTimerGenericCommand+0x98>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d02a      	beq.n	80050c4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	2b05      	cmp	r3, #5
 800507e:	dc18      	bgt.n	80050b2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005080:	f7ff fe28 	bl	8004cd4 <xTaskGetSchedulerState>
 8005084:	4603      	mov	r3, r0
 8005086:	2b02      	cmp	r3, #2
 8005088:	d109      	bne.n	800509e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800508a:	4b11      	ldr	r3, [pc, #68]	; (80050d0 <xTimerGenericCommand+0x98>)
 800508c:	6818      	ldr	r0, [r3, #0]
 800508e:	f107 0114 	add.w	r1, r7, #20
 8005092:	2300      	movs	r3, #0
 8005094:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005096:	f7fe fbe9 	bl	800386c <xQueueGenericSend>
 800509a:	6278      	str	r0, [r7, #36]	; 0x24
 800509c:	e012      	b.n	80050c4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800509e:	4b0c      	ldr	r3, [pc, #48]	; (80050d0 <xTimerGenericCommand+0x98>)
 80050a0:	6818      	ldr	r0, [r3, #0]
 80050a2:	f107 0114 	add.w	r1, r7, #20
 80050a6:	2300      	movs	r3, #0
 80050a8:	2200      	movs	r2, #0
 80050aa:	f7fe fbdf 	bl	800386c <xQueueGenericSend>
 80050ae:	6278      	str	r0, [r7, #36]	; 0x24
 80050b0:	e008      	b.n	80050c4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80050b2:	4b07      	ldr	r3, [pc, #28]	; (80050d0 <xTimerGenericCommand+0x98>)
 80050b4:	6818      	ldr	r0, [r3, #0]
 80050b6:	f107 0114 	add.w	r1, r7, #20
 80050ba:	2300      	movs	r3, #0
 80050bc:	683a      	ldr	r2, [r7, #0]
 80050be:	f7fe fcd3 	bl	8003a68 <xQueueGenericSendFromISR>
 80050c2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80050c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	3728      	adds	r7, #40	; 0x28
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}
 80050ce:	bf00      	nop
 80050d0:	20000978 	.word	0x20000978

080050d4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b088      	sub	sp, #32
 80050d8:	af02      	add	r7, sp, #8
 80050da:	6078      	str	r0, [r7, #4]
 80050dc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050de:	4b22      	ldr	r3, [pc, #136]	; (8005168 <prvProcessExpiredTimer+0x94>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	68db      	ldr	r3, [r3, #12]
 80050e4:	68db      	ldr	r3, [r3, #12]
 80050e6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	3304      	adds	r3, #4
 80050ec:	4618      	mov	r0, r3
 80050ee:	f7fe fa92 	bl	8003616 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80050f8:	f003 0304 	and.w	r3, r3, #4
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d022      	beq.n	8005146 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005100:	697b      	ldr	r3, [r7, #20]
 8005102:	699a      	ldr	r2, [r3, #24]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	18d1      	adds	r1, r2, r3
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	683a      	ldr	r2, [r7, #0]
 800510c:	6978      	ldr	r0, [r7, #20]
 800510e:	f000 f8d1 	bl	80052b4 <prvInsertTimerInActiveList>
 8005112:	4603      	mov	r3, r0
 8005114:	2b00      	cmp	r3, #0
 8005116:	d01f      	beq.n	8005158 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005118:	2300      	movs	r3, #0
 800511a:	9300      	str	r3, [sp, #0]
 800511c:	2300      	movs	r3, #0
 800511e:	687a      	ldr	r2, [r7, #4]
 8005120:	2100      	movs	r1, #0
 8005122:	6978      	ldr	r0, [r7, #20]
 8005124:	f7ff ff88 	bl	8005038 <xTimerGenericCommand>
 8005128:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d113      	bne.n	8005158 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005134:	f383 8811 	msr	BASEPRI, r3
 8005138:	f3bf 8f6f 	isb	sy
 800513c:	f3bf 8f4f 	dsb	sy
 8005140:	60fb      	str	r3, [r7, #12]
}
 8005142:	bf00      	nop
 8005144:	e7fe      	b.n	8005144 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800514c:	f023 0301 	bic.w	r3, r3, #1
 8005150:	b2da      	uxtb	r2, r3
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	6a1b      	ldr	r3, [r3, #32]
 800515c:	6978      	ldr	r0, [r7, #20]
 800515e:	4798      	blx	r3
}
 8005160:	bf00      	nop
 8005162:	3718      	adds	r7, #24
 8005164:	46bd      	mov	sp, r7
 8005166:	bd80      	pop	{r7, pc}
 8005168:	20000970 	.word	0x20000970

0800516c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b084      	sub	sp, #16
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005174:	f107 0308 	add.w	r3, r7, #8
 8005178:	4618      	mov	r0, r3
 800517a:	f000 f857 	bl	800522c <prvGetNextExpireTime>
 800517e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	4619      	mov	r1, r3
 8005184:	68f8      	ldr	r0, [r7, #12]
 8005186:	f000 f803 	bl	8005190 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800518a:	f000 f8d5 	bl	8005338 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800518e:	e7f1      	b.n	8005174 <prvTimerTask+0x8>

08005190 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b084      	sub	sp, #16
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
 8005198:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800519a:	f7ff f99d 	bl	80044d8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800519e:	f107 0308 	add.w	r3, r7, #8
 80051a2:	4618      	mov	r0, r3
 80051a4:	f000 f866 	bl	8005274 <prvSampleTimeNow>
 80051a8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d130      	bne.n	8005212 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d10a      	bne.n	80051cc <prvProcessTimerOrBlockTask+0x3c>
 80051b6:	687a      	ldr	r2, [r7, #4]
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	429a      	cmp	r2, r3
 80051bc:	d806      	bhi.n	80051cc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80051be:	f7ff f999 	bl	80044f4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80051c2:	68f9      	ldr	r1, [r7, #12]
 80051c4:	6878      	ldr	r0, [r7, #4]
 80051c6:	f7ff ff85 	bl	80050d4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80051ca:	e024      	b.n	8005216 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d008      	beq.n	80051e4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80051d2:	4b13      	ldr	r3, [pc, #76]	; (8005220 <prvProcessTimerOrBlockTask+0x90>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d101      	bne.n	80051e0 <prvProcessTimerOrBlockTask+0x50>
 80051dc:	2301      	movs	r3, #1
 80051de:	e000      	b.n	80051e2 <prvProcessTimerOrBlockTask+0x52>
 80051e0:	2300      	movs	r3, #0
 80051e2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80051e4:	4b0f      	ldr	r3, [pc, #60]	; (8005224 <prvProcessTimerOrBlockTask+0x94>)
 80051e6:	6818      	ldr	r0, [r3, #0]
 80051e8:	687a      	ldr	r2, [r7, #4]
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	1ad3      	subs	r3, r2, r3
 80051ee:	683a      	ldr	r2, [r7, #0]
 80051f0:	4619      	mov	r1, r3
 80051f2:	f7fe feef 	bl	8003fd4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80051f6:	f7ff f97d 	bl	80044f4 <xTaskResumeAll>
 80051fa:	4603      	mov	r3, r0
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d10a      	bne.n	8005216 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005200:	4b09      	ldr	r3, [pc, #36]	; (8005228 <prvProcessTimerOrBlockTask+0x98>)
 8005202:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005206:	601a      	str	r2, [r3, #0]
 8005208:	f3bf 8f4f 	dsb	sy
 800520c:	f3bf 8f6f 	isb	sy
}
 8005210:	e001      	b.n	8005216 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005212:	f7ff f96f 	bl	80044f4 <xTaskResumeAll>
}
 8005216:	bf00      	nop
 8005218:	3710      	adds	r7, #16
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}
 800521e:	bf00      	nop
 8005220:	20000974 	.word	0x20000974
 8005224:	20000978 	.word	0x20000978
 8005228:	e000ed04 	.word	0xe000ed04

0800522c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800522c:	b480      	push	{r7}
 800522e:	b085      	sub	sp, #20
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005234:	4b0e      	ldr	r3, [pc, #56]	; (8005270 <prvGetNextExpireTime+0x44>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d101      	bne.n	8005242 <prvGetNextExpireTime+0x16>
 800523e:	2201      	movs	r2, #1
 8005240:	e000      	b.n	8005244 <prvGetNextExpireTime+0x18>
 8005242:	2200      	movs	r2, #0
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d105      	bne.n	800525c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005250:	4b07      	ldr	r3, [pc, #28]	; (8005270 <prvGetNextExpireTime+0x44>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	68db      	ldr	r3, [r3, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	60fb      	str	r3, [r7, #12]
 800525a:	e001      	b.n	8005260 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800525c:	2300      	movs	r3, #0
 800525e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005260:	68fb      	ldr	r3, [r7, #12]
}
 8005262:	4618      	mov	r0, r3
 8005264:	3714      	adds	r7, #20
 8005266:	46bd      	mov	sp, r7
 8005268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526c:	4770      	bx	lr
 800526e:	bf00      	nop
 8005270:	20000970 	.word	0x20000970

08005274 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b084      	sub	sp, #16
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800527c:	f7ff f9d6 	bl	800462c <xTaskGetTickCount>
 8005280:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005282:	4b0b      	ldr	r3, [pc, #44]	; (80052b0 <prvSampleTimeNow+0x3c>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	68fa      	ldr	r2, [r7, #12]
 8005288:	429a      	cmp	r2, r3
 800528a:	d205      	bcs.n	8005298 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800528c:	f000 f91a 	bl	80054c4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2201      	movs	r2, #1
 8005294:	601a      	str	r2, [r3, #0]
 8005296:	e002      	b.n	800529e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2200      	movs	r2, #0
 800529c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800529e:	4a04      	ldr	r2, [pc, #16]	; (80052b0 <prvSampleTimeNow+0x3c>)
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80052a4:	68fb      	ldr	r3, [r7, #12]
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	3710      	adds	r7, #16
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}
 80052ae:	bf00      	nop
 80052b0:	20000980 	.word	0x20000980

080052b4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b086      	sub	sp, #24
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	60f8      	str	r0, [r7, #12]
 80052bc:	60b9      	str	r1, [r7, #8]
 80052be:	607a      	str	r2, [r7, #4]
 80052c0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80052c2:	2300      	movs	r3, #0
 80052c4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	68ba      	ldr	r2, [r7, #8]
 80052ca:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	68fa      	ldr	r2, [r7, #12]
 80052d0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80052d2:	68ba      	ldr	r2, [r7, #8]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	429a      	cmp	r2, r3
 80052d8:	d812      	bhi.n	8005300 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052da:	687a      	ldr	r2, [r7, #4]
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	1ad2      	subs	r2, r2, r3
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	699b      	ldr	r3, [r3, #24]
 80052e4:	429a      	cmp	r2, r3
 80052e6:	d302      	bcc.n	80052ee <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80052e8:	2301      	movs	r3, #1
 80052ea:	617b      	str	r3, [r7, #20]
 80052ec:	e01b      	b.n	8005326 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80052ee:	4b10      	ldr	r3, [pc, #64]	; (8005330 <prvInsertTimerInActiveList+0x7c>)
 80052f0:	681a      	ldr	r2, [r3, #0]
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	3304      	adds	r3, #4
 80052f6:	4619      	mov	r1, r3
 80052f8:	4610      	mov	r0, r2
 80052fa:	f7fe f953 	bl	80035a4 <vListInsert>
 80052fe:	e012      	b.n	8005326 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005300:	687a      	ldr	r2, [r7, #4]
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	429a      	cmp	r2, r3
 8005306:	d206      	bcs.n	8005316 <prvInsertTimerInActiveList+0x62>
 8005308:	68ba      	ldr	r2, [r7, #8]
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	429a      	cmp	r2, r3
 800530e:	d302      	bcc.n	8005316 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005310:	2301      	movs	r3, #1
 8005312:	617b      	str	r3, [r7, #20]
 8005314:	e007      	b.n	8005326 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005316:	4b07      	ldr	r3, [pc, #28]	; (8005334 <prvInsertTimerInActiveList+0x80>)
 8005318:	681a      	ldr	r2, [r3, #0]
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	3304      	adds	r3, #4
 800531e:	4619      	mov	r1, r3
 8005320:	4610      	mov	r0, r2
 8005322:	f7fe f93f 	bl	80035a4 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005326:	697b      	ldr	r3, [r7, #20]
}
 8005328:	4618      	mov	r0, r3
 800532a:	3718      	adds	r7, #24
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}
 8005330:	20000974 	.word	0x20000974
 8005334:	20000970 	.word	0x20000970

08005338 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b08c      	sub	sp, #48	; 0x30
 800533c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800533e:	e0ae      	b.n	800549e <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	2b00      	cmp	r3, #0
 8005344:	f2c0 80aa 	blt.w	800549c <prvProcessReceivedCommands+0x164>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800534c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800534e:	695b      	ldr	r3, [r3, #20]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d004      	beq.n	800535e <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005356:	3304      	adds	r3, #4
 8005358:	4618      	mov	r0, r3
 800535a:	f7fe f95c 	bl	8003616 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800535e:	1d3b      	adds	r3, r7, #4
 8005360:	4618      	mov	r0, r3
 8005362:	f7ff ff87 	bl	8005274 <prvSampleTimeNow>
 8005366:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	2b09      	cmp	r3, #9
 800536c:	f200 8097 	bhi.w	800549e <prvProcessReceivedCommands+0x166>
 8005370:	a201      	add	r2, pc, #4	; (adr r2, 8005378 <prvProcessReceivedCommands+0x40>)
 8005372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005376:	bf00      	nop
 8005378:	080053a1 	.word	0x080053a1
 800537c:	080053a1 	.word	0x080053a1
 8005380:	080053a1 	.word	0x080053a1
 8005384:	08005415 	.word	0x08005415
 8005388:	08005429 	.word	0x08005429
 800538c:	08005473 	.word	0x08005473
 8005390:	080053a1 	.word	0x080053a1
 8005394:	080053a1 	.word	0x080053a1
 8005398:	08005415 	.word	0x08005415
 800539c:	08005429 	.word	0x08005429
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80053a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80053a6:	f043 0301 	orr.w	r3, r3, #1
 80053aa:	b2da      	uxtb	r2, r3
 80053ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80053b2:	68fa      	ldr	r2, [r7, #12]
 80053b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b6:	699b      	ldr	r3, [r3, #24]
 80053b8:	18d1      	adds	r1, r2, r3
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	6a3a      	ldr	r2, [r7, #32]
 80053be:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80053c0:	f7ff ff78 	bl	80052b4 <prvInsertTimerInActiveList>
 80053c4:	4603      	mov	r3, r0
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d069      	beq.n	800549e <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80053ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053cc:	6a1b      	ldr	r3, [r3, #32]
 80053ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80053d0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80053d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80053d8:	f003 0304 	and.w	r3, r3, #4
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d05e      	beq.n	800549e <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80053e0:	68fa      	ldr	r2, [r7, #12]
 80053e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e4:	699b      	ldr	r3, [r3, #24]
 80053e6:	441a      	add	r2, r3
 80053e8:	2300      	movs	r3, #0
 80053ea:	9300      	str	r3, [sp, #0]
 80053ec:	2300      	movs	r3, #0
 80053ee:	2100      	movs	r1, #0
 80053f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80053f2:	f7ff fe21 	bl	8005038 <xTimerGenericCommand>
 80053f6:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 80053f8:	69fb      	ldr	r3, [r7, #28]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d14f      	bne.n	800549e <prvProcessReceivedCommands+0x166>
	__asm volatile
 80053fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005402:	f383 8811 	msr	BASEPRI, r3
 8005406:	f3bf 8f6f 	isb	sy
 800540a:	f3bf 8f4f 	dsb	sy
 800540e:	61bb      	str	r3, [r7, #24]
}
 8005410:	bf00      	nop
 8005412:	e7fe      	b.n	8005412 <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005416:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800541a:	f023 0301 	bic.w	r3, r3, #1
 800541e:	b2da      	uxtb	r2, r3
 8005420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005422:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 8005426:	e03a      	b.n	800549e <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800542a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800542e:	f043 0301 	orr.w	r3, r3, #1
 8005432:	b2da      	uxtb	r2, r3
 8005434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005436:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800543a:	68fa      	ldr	r2, [r7, #12]
 800543c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800543e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005442:	699b      	ldr	r3, [r3, #24]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d10a      	bne.n	800545e <prvProcessReceivedCommands+0x126>
	__asm volatile
 8005448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800544c:	f383 8811 	msr	BASEPRI, r3
 8005450:	f3bf 8f6f 	isb	sy
 8005454:	f3bf 8f4f 	dsb	sy
 8005458:	617b      	str	r3, [r7, #20]
}
 800545a:	bf00      	nop
 800545c:	e7fe      	b.n	800545c <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800545e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005460:	699a      	ldr	r2, [r3, #24]
 8005462:	6a3b      	ldr	r3, [r7, #32]
 8005464:	18d1      	adds	r1, r2, r3
 8005466:	6a3b      	ldr	r3, [r7, #32]
 8005468:	6a3a      	ldr	r2, [r7, #32]
 800546a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800546c:	f7ff ff22 	bl	80052b4 <prvInsertTimerInActiveList>
					break;
 8005470:	e015      	b.n	800549e <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005474:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005478:	f003 0302 	and.w	r3, r3, #2
 800547c:	2b00      	cmp	r3, #0
 800547e:	d103      	bne.n	8005488 <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 8005480:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005482:	f000 fbe1 	bl	8005c48 <vPortFree>
 8005486:	e00a      	b.n	800549e <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800548a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800548e:	f023 0301 	bic.w	r3, r3, #1
 8005492:	b2da      	uxtb	r2, r3
 8005494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005496:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800549a:	e000      	b.n	800549e <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800549c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800549e:	4b08      	ldr	r3, [pc, #32]	; (80054c0 <prvProcessReceivedCommands+0x188>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f107 0108 	add.w	r1, r7, #8
 80054a6:	2200      	movs	r2, #0
 80054a8:	4618      	mov	r0, r3
 80054aa:	f7fe fb79 	bl	8003ba0 <xQueueReceive>
 80054ae:	4603      	mov	r3, r0
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	f47f af45 	bne.w	8005340 <prvProcessReceivedCommands+0x8>
	}
}
 80054b6:	bf00      	nop
 80054b8:	bf00      	nop
 80054ba:	3728      	adds	r7, #40	; 0x28
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}
 80054c0:	20000978 	.word	0x20000978

080054c4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b088      	sub	sp, #32
 80054c8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80054ca:	e048      	b.n	800555e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80054cc:	4b2d      	ldr	r3, [pc, #180]	; (8005584 <prvSwitchTimerLists+0xc0>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	68db      	ldr	r3, [r3, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054d6:	4b2b      	ldr	r3, [pc, #172]	; (8005584 <prvSwitchTimerLists+0xc0>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	68db      	ldr	r3, [r3, #12]
 80054dc:	68db      	ldr	r3, [r3, #12]
 80054de:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	3304      	adds	r3, #4
 80054e4:	4618      	mov	r0, r3
 80054e6:	f7fe f896 	bl	8003616 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	6a1b      	ldr	r3, [r3, #32]
 80054ee:	68f8      	ldr	r0, [r7, #12]
 80054f0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80054f8:	f003 0304 	and.w	r3, r3, #4
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d02e      	beq.n	800555e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	699b      	ldr	r3, [r3, #24]
 8005504:	693a      	ldr	r2, [r7, #16]
 8005506:	4413      	add	r3, r2
 8005508:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800550a:	68ba      	ldr	r2, [r7, #8]
 800550c:	693b      	ldr	r3, [r7, #16]
 800550e:	429a      	cmp	r2, r3
 8005510:	d90e      	bls.n	8005530 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	68ba      	ldr	r2, [r7, #8]
 8005516:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	68fa      	ldr	r2, [r7, #12]
 800551c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800551e:	4b19      	ldr	r3, [pc, #100]	; (8005584 <prvSwitchTimerLists+0xc0>)
 8005520:	681a      	ldr	r2, [r3, #0]
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	3304      	adds	r3, #4
 8005526:	4619      	mov	r1, r3
 8005528:	4610      	mov	r0, r2
 800552a:	f7fe f83b 	bl	80035a4 <vListInsert>
 800552e:	e016      	b.n	800555e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005530:	2300      	movs	r3, #0
 8005532:	9300      	str	r3, [sp, #0]
 8005534:	2300      	movs	r3, #0
 8005536:	693a      	ldr	r2, [r7, #16]
 8005538:	2100      	movs	r1, #0
 800553a:	68f8      	ldr	r0, [r7, #12]
 800553c:	f7ff fd7c 	bl	8005038 <xTimerGenericCommand>
 8005540:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d10a      	bne.n	800555e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8005548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800554c:	f383 8811 	msr	BASEPRI, r3
 8005550:	f3bf 8f6f 	isb	sy
 8005554:	f3bf 8f4f 	dsb	sy
 8005558:	603b      	str	r3, [r7, #0]
}
 800555a:	bf00      	nop
 800555c:	e7fe      	b.n	800555c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800555e:	4b09      	ldr	r3, [pc, #36]	; (8005584 <prvSwitchTimerLists+0xc0>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d1b1      	bne.n	80054cc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005568:	4b06      	ldr	r3, [pc, #24]	; (8005584 <prvSwitchTimerLists+0xc0>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800556e:	4b06      	ldr	r3, [pc, #24]	; (8005588 <prvSwitchTimerLists+0xc4>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a04      	ldr	r2, [pc, #16]	; (8005584 <prvSwitchTimerLists+0xc0>)
 8005574:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005576:	4a04      	ldr	r2, [pc, #16]	; (8005588 <prvSwitchTimerLists+0xc4>)
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	6013      	str	r3, [r2, #0]
}
 800557c:	bf00      	nop
 800557e:	3718      	adds	r7, #24
 8005580:	46bd      	mov	sp, r7
 8005582:	bd80      	pop	{r7, pc}
 8005584:	20000970 	.word	0x20000970
 8005588:	20000974 	.word	0x20000974

0800558c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b082      	sub	sp, #8
 8005590:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005592:	f000 f967 	bl	8005864 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005596:	4b15      	ldr	r3, [pc, #84]	; (80055ec <prvCheckForValidListAndQueue+0x60>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d120      	bne.n	80055e0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800559e:	4814      	ldr	r0, [pc, #80]	; (80055f0 <prvCheckForValidListAndQueue+0x64>)
 80055a0:	f7fd ffaf 	bl	8003502 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80055a4:	4813      	ldr	r0, [pc, #76]	; (80055f4 <prvCheckForValidListAndQueue+0x68>)
 80055a6:	f7fd ffac 	bl	8003502 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80055aa:	4b13      	ldr	r3, [pc, #76]	; (80055f8 <prvCheckForValidListAndQueue+0x6c>)
 80055ac:	4a10      	ldr	r2, [pc, #64]	; (80055f0 <prvCheckForValidListAndQueue+0x64>)
 80055ae:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80055b0:	4b12      	ldr	r3, [pc, #72]	; (80055fc <prvCheckForValidListAndQueue+0x70>)
 80055b2:	4a10      	ldr	r2, [pc, #64]	; (80055f4 <prvCheckForValidListAndQueue+0x68>)
 80055b4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80055b6:	2300      	movs	r3, #0
 80055b8:	9300      	str	r3, [sp, #0]
 80055ba:	4b11      	ldr	r3, [pc, #68]	; (8005600 <prvCheckForValidListAndQueue+0x74>)
 80055bc:	4a11      	ldr	r2, [pc, #68]	; (8005604 <prvCheckForValidListAndQueue+0x78>)
 80055be:	210c      	movs	r1, #12
 80055c0:	200a      	movs	r0, #10
 80055c2:	f7fe f8bb 	bl	800373c <xQueueGenericCreateStatic>
 80055c6:	4603      	mov	r3, r0
 80055c8:	4a08      	ldr	r2, [pc, #32]	; (80055ec <prvCheckForValidListAndQueue+0x60>)
 80055ca:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80055cc:	4b07      	ldr	r3, [pc, #28]	; (80055ec <prvCheckForValidListAndQueue+0x60>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d005      	beq.n	80055e0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80055d4:	4b05      	ldr	r3, [pc, #20]	; (80055ec <prvCheckForValidListAndQueue+0x60>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	490b      	ldr	r1, [pc, #44]	; (8005608 <prvCheckForValidListAndQueue+0x7c>)
 80055da:	4618      	mov	r0, r3
 80055dc:	f7fe fcd0 	bl	8003f80 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80055e0:	f000 f970 	bl	80058c4 <vPortExitCritical>
}
 80055e4:	bf00      	nop
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}
 80055ea:	bf00      	nop
 80055ec:	20000978 	.word	0x20000978
 80055f0:	20000948 	.word	0x20000948
 80055f4:	2000095c 	.word	0x2000095c
 80055f8:	20000970 	.word	0x20000970
 80055fc:	20000974 	.word	0x20000974
 8005600:	200009fc 	.word	0x200009fc
 8005604:	20000984 	.word	0x20000984
 8005608:	08007438 	.word	0x08007438

0800560c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800560c:	b480      	push	{r7}
 800560e:	b085      	sub	sp, #20
 8005610:	af00      	add	r7, sp, #0
 8005612:	60f8      	str	r0, [r7, #12]
 8005614:	60b9      	str	r1, [r7, #8]
 8005616:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	3b04      	subs	r3, #4
 800561c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005624:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	3b04      	subs	r3, #4
 800562a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	f023 0201 	bic.w	r2, r3, #1
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	3b04      	subs	r3, #4
 800563a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800563c:	4a0c      	ldr	r2, [pc, #48]	; (8005670 <pxPortInitialiseStack+0x64>)
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	3b14      	subs	r3, #20
 8005646:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005648:	687a      	ldr	r2, [r7, #4]
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	3b04      	subs	r3, #4
 8005652:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	f06f 0202 	mvn.w	r2, #2
 800565a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	3b20      	subs	r3, #32
 8005660:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005662:	68fb      	ldr	r3, [r7, #12]
}
 8005664:	4618      	mov	r0, r3
 8005666:	3714      	adds	r7, #20
 8005668:	46bd      	mov	sp, r7
 800566a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566e:	4770      	bx	lr
 8005670:	08005675 	.word	0x08005675

08005674 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005674:	b480      	push	{r7}
 8005676:	b085      	sub	sp, #20
 8005678:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800567a:	2300      	movs	r3, #0
 800567c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800567e:	4b12      	ldr	r3, [pc, #72]	; (80056c8 <prvTaskExitError+0x54>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005686:	d00a      	beq.n	800569e <prvTaskExitError+0x2a>
	__asm volatile
 8005688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800568c:	f383 8811 	msr	BASEPRI, r3
 8005690:	f3bf 8f6f 	isb	sy
 8005694:	f3bf 8f4f 	dsb	sy
 8005698:	60fb      	str	r3, [r7, #12]
}
 800569a:	bf00      	nop
 800569c:	e7fe      	b.n	800569c <prvTaskExitError+0x28>
	__asm volatile
 800569e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056a2:	f383 8811 	msr	BASEPRI, r3
 80056a6:	f3bf 8f6f 	isb	sy
 80056aa:	f3bf 8f4f 	dsb	sy
 80056ae:	60bb      	str	r3, [r7, #8]
}
 80056b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80056b2:	bf00      	nop
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d0fc      	beq.n	80056b4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80056ba:	bf00      	nop
 80056bc:	bf00      	nop
 80056be:	3714      	adds	r7, #20
 80056c0:	46bd      	mov	sp, r7
 80056c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c6:	4770      	bx	lr
 80056c8:	2000000c 	.word	0x2000000c
 80056cc:	00000000 	.word	0x00000000

080056d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80056d0:	4b07      	ldr	r3, [pc, #28]	; (80056f0 <pxCurrentTCBConst2>)
 80056d2:	6819      	ldr	r1, [r3, #0]
 80056d4:	6808      	ldr	r0, [r1, #0]
 80056d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056da:	f380 8809 	msr	PSP, r0
 80056de:	f3bf 8f6f 	isb	sy
 80056e2:	f04f 0000 	mov.w	r0, #0
 80056e6:	f380 8811 	msr	BASEPRI, r0
 80056ea:	4770      	bx	lr
 80056ec:	f3af 8000 	nop.w

080056f0 <pxCurrentTCBConst2>:
 80056f0:	2000081c 	.word	0x2000081c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80056f4:	bf00      	nop
 80056f6:	bf00      	nop

080056f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80056f8:	4808      	ldr	r0, [pc, #32]	; (800571c <prvPortStartFirstTask+0x24>)
 80056fa:	6800      	ldr	r0, [r0, #0]
 80056fc:	6800      	ldr	r0, [r0, #0]
 80056fe:	f380 8808 	msr	MSP, r0
 8005702:	f04f 0000 	mov.w	r0, #0
 8005706:	f380 8814 	msr	CONTROL, r0
 800570a:	b662      	cpsie	i
 800570c:	b661      	cpsie	f
 800570e:	f3bf 8f4f 	dsb	sy
 8005712:	f3bf 8f6f 	isb	sy
 8005716:	df00      	svc	0
 8005718:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800571a:	bf00      	nop
 800571c:	e000ed08 	.word	0xe000ed08

08005720 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b086      	sub	sp, #24
 8005724:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005726:	4b46      	ldr	r3, [pc, #280]	; (8005840 <xPortStartScheduler+0x120>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a46      	ldr	r2, [pc, #280]	; (8005844 <xPortStartScheduler+0x124>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d10a      	bne.n	8005746 <xPortStartScheduler+0x26>
	__asm volatile
 8005730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005734:	f383 8811 	msr	BASEPRI, r3
 8005738:	f3bf 8f6f 	isb	sy
 800573c:	f3bf 8f4f 	dsb	sy
 8005740:	613b      	str	r3, [r7, #16]
}
 8005742:	bf00      	nop
 8005744:	e7fe      	b.n	8005744 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005746:	4b3e      	ldr	r3, [pc, #248]	; (8005840 <xPortStartScheduler+0x120>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a3f      	ldr	r2, [pc, #252]	; (8005848 <xPortStartScheduler+0x128>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d10a      	bne.n	8005766 <xPortStartScheduler+0x46>
	__asm volatile
 8005750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005754:	f383 8811 	msr	BASEPRI, r3
 8005758:	f3bf 8f6f 	isb	sy
 800575c:	f3bf 8f4f 	dsb	sy
 8005760:	60fb      	str	r3, [r7, #12]
}
 8005762:	bf00      	nop
 8005764:	e7fe      	b.n	8005764 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005766:	4b39      	ldr	r3, [pc, #228]	; (800584c <xPortStartScheduler+0x12c>)
 8005768:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	781b      	ldrb	r3, [r3, #0]
 800576e:	b2db      	uxtb	r3, r3
 8005770:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	22ff      	movs	r2, #255	; 0xff
 8005776:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	781b      	ldrb	r3, [r3, #0]
 800577c:	b2db      	uxtb	r3, r3
 800577e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005780:	78fb      	ldrb	r3, [r7, #3]
 8005782:	b2db      	uxtb	r3, r3
 8005784:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005788:	b2da      	uxtb	r2, r3
 800578a:	4b31      	ldr	r3, [pc, #196]	; (8005850 <xPortStartScheduler+0x130>)
 800578c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800578e:	4b31      	ldr	r3, [pc, #196]	; (8005854 <xPortStartScheduler+0x134>)
 8005790:	2207      	movs	r2, #7
 8005792:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005794:	e009      	b.n	80057aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005796:	4b2f      	ldr	r3, [pc, #188]	; (8005854 <xPortStartScheduler+0x134>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	3b01      	subs	r3, #1
 800579c:	4a2d      	ldr	r2, [pc, #180]	; (8005854 <xPortStartScheduler+0x134>)
 800579e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80057a0:	78fb      	ldrb	r3, [r7, #3]
 80057a2:	b2db      	uxtb	r3, r3
 80057a4:	005b      	lsls	r3, r3, #1
 80057a6:	b2db      	uxtb	r3, r3
 80057a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80057aa:	78fb      	ldrb	r3, [r7, #3]
 80057ac:	b2db      	uxtb	r3, r3
 80057ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057b2:	2b80      	cmp	r3, #128	; 0x80
 80057b4:	d0ef      	beq.n	8005796 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80057b6:	4b27      	ldr	r3, [pc, #156]	; (8005854 <xPortStartScheduler+0x134>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f1c3 0307 	rsb	r3, r3, #7
 80057be:	2b04      	cmp	r3, #4
 80057c0:	d00a      	beq.n	80057d8 <xPortStartScheduler+0xb8>
	__asm volatile
 80057c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057c6:	f383 8811 	msr	BASEPRI, r3
 80057ca:	f3bf 8f6f 	isb	sy
 80057ce:	f3bf 8f4f 	dsb	sy
 80057d2:	60bb      	str	r3, [r7, #8]
}
 80057d4:	bf00      	nop
 80057d6:	e7fe      	b.n	80057d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80057d8:	4b1e      	ldr	r3, [pc, #120]	; (8005854 <xPortStartScheduler+0x134>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	021b      	lsls	r3, r3, #8
 80057de:	4a1d      	ldr	r2, [pc, #116]	; (8005854 <xPortStartScheduler+0x134>)
 80057e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80057e2:	4b1c      	ldr	r3, [pc, #112]	; (8005854 <xPortStartScheduler+0x134>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80057ea:	4a1a      	ldr	r2, [pc, #104]	; (8005854 <xPortStartScheduler+0x134>)
 80057ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	b2da      	uxtb	r2, r3
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80057f6:	4b18      	ldr	r3, [pc, #96]	; (8005858 <xPortStartScheduler+0x138>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a17      	ldr	r2, [pc, #92]	; (8005858 <xPortStartScheduler+0x138>)
 80057fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005800:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005802:	4b15      	ldr	r3, [pc, #84]	; (8005858 <xPortStartScheduler+0x138>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a14      	ldr	r2, [pc, #80]	; (8005858 <xPortStartScheduler+0x138>)
 8005808:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800580c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800580e:	f000 f8dd 	bl	80059cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005812:	4b12      	ldr	r3, [pc, #72]	; (800585c <xPortStartScheduler+0x13c>)
 8005814:	2200      	movs	r2, #0
 8005816:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005818:	f000 f8fc 	bl	8005a14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800581c:	4b10      	ldr	r3, [pc, #64]	; (8005860 <xPortStartScheduler+0x140>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a0f      	ldr	r2, [pc, #60]	; (8005860 <xPortStartScheduler+0x140>)
 8005822:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005826:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005828:	f7ff ff66 	bl	80056f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800582c:	f7fe ffce 	bl	80047cc <vTaskSwitchContext>
	prvTaskExitError();
 8005830:	f7ff ff20 	bl	8005674 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005834:	2300      	movs	r3, #0
}
 8005836:	4618      	mov	r0, r3
 8005838:	3718      	adds	r7, #24
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}
 800583e:	bf00      	nop
 8005840:	e000ed00 	.word	0xe000ed00
 8005844:	410fc271 	.word	0x410fc271
 8005848:	410fc270 	.word	0x410fc270
 800584c:	e000e400 	.word	0xe000e400
 8005850:	20000a44 	.word	0x20000a44
 8005854:	20000a48 	.word	0x20000a48
 8005858:	e000ed20 	.word	0xe000ed20
 800585c:	2000000c 	.word	0x2000000c
 8005860:	e000ef34 	.word	0xe000ef34

08005864 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005864:	b480      	push	{r7}
 8005866:	b083      	sub	sp, #12
 8005868:	af00      	add	r7, sp, #0
	__asm volatile
 800586a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800586e:	f383 8811 	msr	BASEPRI, r3
 8005872:	f3bf 8f6f 	isb	sy
 8005876:	f3bf 8f4f 	dsb	sy
 800587a:	607b      	str	r3, [r7, #4]
}
 800587c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800587e:	4b0f      	ldr	r3, [pc, #60]	; (80058bc <vPortEnterCritical+0x58>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	3301      	adds	r3, #1
 8005884:	4a0d      	ldr	r2, [pc, #52]	; (80058bc <vPortEnterCritical+0x58>)
 8005886:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005888:	4b0c      	ldr	r3, [pc, #48]	; (80058bc <vPortEnterCritical+0x58>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	2b01      	cmp	r3, #1
 800588e:	d10f      	bne.n	80058b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005890:	4b0b      	ldr	r3, [pc, #44]	; (80058c0 <vPortEnterCritical+0x5c>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	b2db      	uxtb	r3, r3
 8005896:	2b00      	cmp	r3, #0
 8005898:	d00a      	beq.n	80058b0 <vPortEnterCritical+0x4c>
	__asm volatile
 800589a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800589e:	f383 8811 	msr	BASEPRI, r3
 80058a2:	f3bf 8f6f 	isb	sy
 80058a6:	f3bf 8f4f 	dsb	sy
 80058aa:	603b      	str	r3, [r7, #0]
}
 80058ac:	bf00      	nop
 80058ae:	e7fe      	b.n	80058ae <vPortEnterCritical+0x4a>
	}
}
 80058b0:	bf00      	nop
 80058b2:	370c      	adds	r7, #12
 80058b4:	46bd      	mov	sp, r7
 80058b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ba:	4770      	bx	lr
 80058bc:	2000000c 	.word	0x2000000c
 80058c0:	e000ed04 	.word	0xe000ed04

080058c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80058c4:	b480      	push	{r7}
 80058c6:	b083      	sub	sp, #12
 80058c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80058ca:	4b12      	ldr	r3, [pc, #72]	; (8005914 <vPortExitCritical+0x50>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d10a      	bne.n	80058e8 <vPortExitCritical+0x24>
	__asm volatile
 80058d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058d6:	f383 8811 	msr	BASEPRI, r3
 80058da:	f3bf 8f6f 	isb	sy
 80058de:	f3bf 8f4f 	dsb	sy
 80058e2:	607b      	str	r3, [r7, #4]
}
 80058e4:	bf00      	nop
 80058e6:	e7fe      	b.n	80058e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80058e8:	4b0a      	ldr	r3, [pc, #40]	; (8005914 <vPortExitCritical+0x50>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	3b01      	subs	r3, #1
 80058ee:	4a09      	ldr	r2, [pc, #36]	; (8005914 <vPortExitCritical+0x50>)
 80058f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80058f2:	4b08      	ldr	r3, [pc, #32]	; (8005914 <vPortExitCritical+0x50>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d105      	bne.n	8005906 <vPortExitCritical+0x42>
 80058fa:	2300      	movs	r3, #0
 80058fc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	f383 8811 	msr	BASEPRI, r3
}
 8005904:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005906:	bf00      	nop
 8005908:	370c      	adds	r7, #12
 800590a:	46bd      	mov	sp, r7
 800590c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005910:	4770      	bx	lr
 8005912:	bf00      	nop
 8005914:	2000000c 	.word	0x2000000c
	...

08005920 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005920:	f3ef 8009 	mrs	r0, PSP
 8005924:	f3bf 8f6f 	isb	sy
 8005928:	4b15      	ldr	r3, [pc, #84]	; (8005980 <pxCurrentTCBConst>)
 800592a:	681a      	ldr	r2, [r3, #0]
 800592c:	f01e 0f10 	tst.w	lr, #16
 8005930:	bf08      	it	eq
 8005932:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005936:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800593a:	6010      	str	r0, [r2, #0]
 800593c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005940:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005944:	f380 8811 	msr	BASEPRI, r0
 8005948:	f3bf 8f4f 	dsb	sy
 800594c:	f3bf 8f6f 	isb	sy
 8005950:	f7fe ff3c 	bl	80047cc <vTaskSwitchContext>
 8005954:	f04f 0000 	mov.w	r0, #0
 8005958:	f380 8811 	msr	BASEPRI, r0
 800595c:	bc09      	pop	{r0, r3}
 800595e:	6819      	ldr	r1, [r3, #0]
 8005960:	6808      	ldr	r0, [r1, #0]
 8005962:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005966:	f01e 0f10 	tst.w	lr, #16
 800596a:	bf08      	it	eq
 800596c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005970:	f380 8809 	msr	PSP, r0
 8005974:	f3bf 8f6f 	isb	sy
 8005978:	4770      	bx	lr
 800597a:	bf00      	nop
 800597c:	f3af 8000 	nop.w

08005980 <pxCurrentTCBConst>:
 8005980:	2000081c 	.word	0x2000081c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005984:	bf00      	nop
 8005986:	bf00      	nop

08005988 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b082      	sub	sp, #8
 800598c:	af00      	add	r7, sp, #0
	__asm volatile
 800598e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005992:	f383 8811 	msr	BASEPRI, r3
 8005996:	f3bf 8f6f 	isb	sy
 800599a:	f3bf 8f4f 	dsb	sy
 800599e:	607b      	str	r3, [r7, #4]
}
 80059a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80059a2:	f7fe fe53 	bl	800464c <xTaskIncrementTick>
 80059a6:	4603      	mov	r3, r0
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d003      	beq.n	80059b4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80059ac:	4b06      	ldr	r3, [pc, #24]	; (80059c8 <SysTick_Handler+0x40>)
 80059ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059b2:	601a      	str	r2, [r3, #0]
 80059b4:	2300      	movs	r3, #0
 80059b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	f383 8811 	msr	BASEPRI, r3
}
 80059be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80059c0:	bf00      	nop
 80059c2:	3708      	adds	r7, #8
 80059c4:	46bd      	mov	sp, r7
 80059c6:	bd80      	pop	{r7, pc}
 80059c8:	e000ed04 	.word	0xe000ed04

080059cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80059cc:	b480      	push	{r7}
 80059ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80059d0:	4b0b      	ldr	r3, [pc, #44]	; (8005a00 <vPortSetupTimerInterrupt+0x34>)
 80059d2:	2200      	movs	r2, #0
 80059d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80059d6:	4b0b      	ldr	r3, [pc, #44]	; (8005a04 <vPortSetupTimerInterrupt+0x38>)
 80059d8:	2200      	movs	r2, #0
 80059da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80059dc:	4b0a      	ldr	r3, [pc, #40]	; (8005a08 <vPortSetupTimerInterrupt+0x3c>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a0a      	ldr	r2, [pc, #40]	; (8005a0c <vPortSetupTimerInterrupt+0x40>)
 80059e2:	fba2 2303 	umull	r2, r3, r2, r3
 80059e6:	099b      	lsrs	r3, r3, #6
 80059e8:	4a09      	ldr	r2, [pc, #36]	; (8005a10 <vPortSetupTimerInterrupt+0x44>)
 80059ea:	3b01      	subs	r3, #1
 80059ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80059ee:	4b04      	ldr	r3, [pc, #16]	; (8005a00 <vPortSetupTimerInterrupt+0x34>)
 80059f0:	2207      	movs	r2, #7
 80059f2:	601a      	str	r2, [r3, #0]
}
 80059f4:	bf00      	nop
 80059f6:	46bd      	mov	sp, r7
 80059f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fc:	4770      	bx	lr
 80059fe:	bf00      	nop
 8005a00:	e000e010 	.word	0xe000e010
 8005a04:	e000e018 	.word	0xe000e018
 8005a08:	20000000 	.word	0x20000000
 8005a0c:	10624dd3 	.word	0x10624dd3
 8005a10:	e000e014 	.word	0xe000e014

08005a14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005a14:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005a24 <vPortEnableVFP+0x10>
 8005a18:	6801      	ldr	r1, [r0, #0]
 8005a1a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005a1e:	6001      	str	r1, [r0, #0]
 8005a20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005a22:	bf00      	nop
 8005a24:	e000ed88 	.word	0xe000ed88

08005a28 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005a28:	b480      	push	{r7}
 8005a2a:	b085      	sub	sp, #20
 8005a2c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005a2e:	f3ef 8305 	mrs	r3, IPSR
 8005a32:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	2b0f      	cmp	r3, #15
 8005a38:	d914      	bls.n	8005a64 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005a3a:	4a17      	ldr	r2, [pc, #92]	; (8005a98 <vPortValidateInterruptPriority+0x70>)
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	4413      	add	r3, r2
 8005a40:	781b      	ldrb	r3, [r3, #0]
 8005a42:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005a44:	4b15      	ldr	r3, [pc, #84]	; (8005a9c <vPortValidateInterruptPriority+0x74>)
 8005a46:	781b      	ldrb	r3, [r3, #0]
 8005a48:	7afa      	ldrb	r2, [r7, #11]
 8005a4a:	429a      	cmp	r2, r3
 8005a4c:	d20a      	bcs.n	8005a64 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a52:	f383 8811 	msr	BASEPRI, r3
 8005a56:	f3bf 8f6f 	isb	sy
 8005a5a:	f3bf 8f4f 	dsb	sy
 8005a5e:	607b      	str	r3, [r7, #4]
}
 8005a60:	bf00      	nop
 8005a62:	e7fe      	b.n	8005a62 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005a64:	4b0e      	ldr	r3, [pc, #56]	; (8005aa0 <vPortValidateInterruptPriority+0x78>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005a6c:	4b0d      	ldr	r3, [pc, #52]	; (8005aa4 <vPortValidateInterruptPriority+0x7c>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	429a      	cmp	r2, r3
 8005a72:	d90a      	bls.n	8005a8a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a78:	f383 8811 	msr	BASEPRI, r3
 8005a7c:	f3bf 8f6f 	isb	sy
 8005a80:	f3bf 8f4f 	dsb	sy
 8005a84:	603b      	str	r3, [r7, #0]
}
 8005a86:	bf00      	nop
 8005a88:	e7fe      	b.n	8005a88 <vPortValidateInterruptPriority+0x60>
	}
 8005a8a:	bf00      	nop
 8005a8c:	3714      	adds	r7, #20
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a94:	4770      	bx	lr
 8005a96:	bf00      	nop
 8005a98:	e000e3f0 	.word	0xe000e3f0
 8005a9c:	20000a44 	.word	0x20000a44
 8005aa0:	e000ed0c 	.word	0xe000ed0c
 8005aa4:	20000a48 	.word	0x20000a48

08005aa8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b08a      	sub	sp, #40	; 0x28
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005ab4:	f7fe fd10 	bl	80044d8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005ab8:	4b5d      	ldr	r3, [pc, #372]	; (8005c30 <pvPortMalloc+0x188>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d101      	bne.n	8005ac4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005ac0:	f000 f924 	bl	8005d0c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005ac4:	4b5b      	ldr	r3, [pc, #364]	; (8005c34 <pvPortMalloc+0x18c>)
 8005ac6:	681a      	ldr	r2, [r3, #0]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	4013      	ands	r3, r2
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	f040 8093 	bne.w	8005bf8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d01d      	beq.n	8005b14 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005ad8:	2208      	movs	r2, #8
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	4413      	add	r3, r2
 8005ade:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	f003 0307 	and.w	r3, r3, #7
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d014      	beq.n	8005b14 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	f023 0307 	bic.w	r3, r3, #7
 8005af0:	3308      	adds	r3, #8
 8005af2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	f003 0307 	and.w	r3, r3, #7
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d00a      	beq.n	8005b14 <pvPortMalloc+0x6c>
	__asm volatile
 8005afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b02:	f383 8811 	msr	BASEPRI, r3
 8005b06:	f3bf 8f6f 	isb	sy
 8005b0a:	f3bf 8f4f 	dsb	sy
 8005b0e:	617b      	str	r3, [r7, #20]
}
 8005b10:	bf00      	nop
 8005b12:	e7fe      	b.n	8005b12 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d06e      	beq.n	8005bf8 <pvPortMalloc+0x150>
 8005b1a:	4b47      	ldr	r3, [pc, #284]	; (8005c38 <pvPortMalloc+0x190>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	687a      	ldr	r2, [r7, #4]
 8005b20:	429a      	cmp	r2, r3
 8005b22:	d869      	bhi.n	8005bf8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005b24:	4b45      	ldr	r3, [pc, #276]	; (8005c3c <pvPortMalloc+0x194>)
 8005b26:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005b28:	4b44      	ldr	r3, [pc, #272]	; (8005c3c <pvPortMalloc+0x194>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005b2e:	e004      	b.n	8005b3a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b32:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	687a      	ldr	r2, [r7, #4]
 8005b40:	429a      	cmp	r2, r3
 8005b42:	d903      	bls.n	8005b4c <pvPortMalloc+0xa4>
 8005b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d1f1      	bne.n	8005b30 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005b4c:	4b38      	ldr	r3, [pc, #224]	; (8005c30 <pvPortMalloc+0x188>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b52:	429a      	cmp	r2, r3
 8005b54:	d050      	beq.n	8005bf8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005b56:	6a3b      	ldr	r3, [r7, #32]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	2208      	movs	r2, #8
 8005b5c:	4413      	add	r3, r2
 8005b5e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b62:	681a      	ldr	r2, [r3, #0]
 8005b64:	6a3b      	ldr	r3, [r7, #32]
 8005b66:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b6a:	685a      	ldr	r2, [r3, #4]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	1ad2      	subs	r2, r2, r3
 8005b70:	2308      	movs	r3, #8
 8005b72:	005b      	lsls	r3, r3, #1
 8005b74:	429a      	cmp	r2, r3
 8005b76:	d91f      	bls.n	8005bb8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005b78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	4413      	add	r3, r2
 8005b7e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005b80:	69bb      	ldr	r3, [r7, #24]
 8005b82:	f003 0307 	and.w	r3, r3, #7
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d00a      	beq.n	8005ba0 <pvPortMalloc+0xf8>
	__asm volatile
 8005b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b8e:	f383 8811 	msr	BASEPRI, r3
 8005b92:	f3bf 8f6f 	isb	sy
 8005b96:	f3bf 8f4f 	dsb	sy
 8005b9a:	613b      	str	r3, [r7, #16]
}
 8005b9c:	bf00      	nop
 8005b9e:	e7fe      	b.n	8005b9e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba2:	685a      	ldr	r2, [r3, #4]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	1ad2      	subs	r2, r2, r3
 8005ba8:	69bb      	ldr	r3, [r7, #24]
 8005baa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bae:	687a      	ldr	r2, [r7, #4]
 8005bb0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005bb2:	69b8      	ldr	r0, [r7, #24]
 8005bb4:	f000 f90c 	bl	8005dd0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005bb8:	4b1f      	ldr	r3, [pc, #124]	; (8005c38 <pvPortMalloc+0x190>)
 8005bba:	681a      	ldr	r2, [r3, #0]
 8005bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	1ad3      	subs	r3, r2, r3
 8005bc2:	4a1d      	ldr	r2, [pc, #116]	; (8005c38 <pvPortMalloc+0x190>)
 8005bc4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005bc6:	4b1c      	ldr	r3, [pc, #112]	; (8005c38 <pvPortMalloc+0x190>)
 8005bc8:	681a      	ldr	r2, [r3, #0]
 8005bca:	4b1d      	ldr	r3, [pc, #116]	; (8005c40 <pvPortMalloc+0x198>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	429a      	cmp	r2, r3
 8005bd0:	d203      	bcs.n	8005bda <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005bd2:	4b19      	ldr	r3, [pc, #100]	; (8005c38 <pvPortMalloc+0x190>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a1a      	ldr	r2, [pc, #104]	; (8005c40 <pvPortMalloc+0x198>)
 8005bd8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bdc:	685a      	ldr	r2, [r3, #4]
 8005bde:	4b15      	ldr	r3, [pc, #84]	; (8005c34 <pvPortMalloc+0x18c>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	431a      	orrs	r2, r3
 8005be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bea:	2200      	movs	r2, #0
 8005bec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005bee:	4b15      	ldr	r3, [pc, #84]	; (8005c44 <pvPortMalloc+0x19c>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	3301      	adds	r3, #1
 8005bf4:	4a13      	ldr	r2, [pc, #76]	; (8005c44 <pvPortMalloc+0x19c>)
 8005bf6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005bf8:	f7fe fc7c 	bl	80044f4 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8005bfc:	69fb      	ldr	r3, [r7, #28]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d101      	bne.n	8005c06 <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8005c02:	f7fa fcd2 	bl	80005aa <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005c06:	69fb      	ldr	r3, [r7, #28]
 8005c08:	f003 0307 	and.w	r3, r3, #7
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d00a      	beq.n	8005c26 <pvPortMalloc+0x17e>
	__asm volatile
 8005c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c14:	f383 8811 	msr	BASEPRI, r3
 8005c18:	f3bf 8f6f 	isb	sy
 8005c1c:	f3bf 8f4f 	dsb	sy
 8005c20:	60fb      	str	r3, [r7, #12]
}
 8005c22:	bf00      	nop
 8005c24:	e7fe      	b.n	8005c24 <pvPortMalloc+0x17c>
	return pvReturn;
 8005c26:	69fb      	ldr	r3, [r7, #28]
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	3728      	adds	r7, #40	; 0x28
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bd80      	pop	{r7, pc}
 8005c30:	20001a54 	.word	0x20001a54
 8005c34:	20001a68 	.word	0x20001a68
 8005c38:	20001a58 	.word	0x20001a58
 8005c3c:	20001a4c 	.word	0x20001a4c
 8005c40:	20001a5c 	.word	0x20001a5c
 8005c44:	20001a60 	.word	0x20001a60

08005c48 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b086      	sub	sp, #24
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d04d      	beq.n	8005cf6 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005c5a:	2308      	movs	r3, #8
 8005c5c:	425b      	negs	r3, r3
 8005c5e:	697a      	ldr	r2, [r7, #20]
 8005c60:	4413      	add	r3, r2
 8005c62:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	685a      	ldr	r2, [r3, #4]
 8005c6c:	4b24      	ldr	r3, [pc, #144]	; (8005d00 <vPortFree+0xb8>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4013      	ands	r3, r2
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d10a      	bne.n	8005c8c <vPortFree+0x44>
	__asm volatile
 8005c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c7a:	f383 8811 	msr	BASEPRI, r3
 8005c7e:	f3bf 8f6f 	isb	sy
 8005c82:	f3bf 8f4f 	dsb	sy
 8005c86:	60fb      	str	r3, [r7, #12]
}
 8005c88:	bf00      	nop
 8005c8a:	e7fe      	b.n	8005c8a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d00a      	beq.n	8005caa <vPortFree+0x62>
	__asm volatile
 8005c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c98:	f383 8811 	msr	BASEPRI, r3
 8005c9c:	f3bf 8f6f 	isb	sy
 8005ca0:	f3bf 8f4f 	dsb	sy
 8005ca4:	60bb      	str	r3, [r7, #8]
}
 8005ca6:	bf00      	nop
 8005ca8:	e7fe      	b.n	8005ca8 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	685a      	ldr	r2, [r3, #4]
 8005cae:	4b14      	ldr	r3, [pc, #80]	; (8005d00 <vPortFree+0xb8>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4013      	ands	r3, r2
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d01e      	beq.n	8005cf6 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d11a      	bne.n	8005cf6 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005cc0:	693b      	ldr	r3, [r7, #16]
 8005cc2:	685a      	ldr	r2, [r3, #4]
 8005cc4:	4b0e      	ldr	r3, [pc, #56]	; (8005d00 <vPortFree+0xb8>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	43db      	mvns	r3, r3
 8005cca:	401a      	ands	r2, r3
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005cd0:	f7fe fc02 	bl	80044d8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005cd4:	693b      	ldr	r3, [r7, #16]
 8005cd6:	685a      	ldr	r2, [r3, #4]
 8005cd8:	4b0a      	ldr	r3, [pc, #40]	; (8005d04 <vPortFree+0xbc>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4413      	add	r3, r2
 8005cde:	4a09      	ldr	r2, [pc, #36]	; (8005d04 <vPortFree+0xbc>)
 8005ce0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005ce2:	6938      	ldr	r0, [r7, #16]
 8005ce4:	f000 f874 	bl	8005dd0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005ce8:	4b07      	ldr	r3, [pc, #28]	; (8005d08 <vPortFree+0xc0>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	3301      	adds	r3, #1
 8005cee:	4a06      	ldr	r2, [pc, #24]	; (8005d08 <vPortFree+0xc0>)
 8005cf0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005cf2:	f7fe fbff 	bl	80044f4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005cf6:	bf00      	nop
 8005cf8:	3718      	adds	r7, #24
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}
 8005cfe:	bf00      	nop
 8005d00:	20001a68 	.word	0x20001a68
 8005d04:	20001a58 	.word	0x20001a58
 8005d08:	20001a64 	.word	0x20001a64

08005d0c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b085      	sub	sp, #20
 8005d10:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005d12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005d16:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005d18:	4b27      	ldr	r3, [pc, #156]	; (8005db8 <prvHeapInit+0xac>)
 8005d1a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	f003 0307 	and.w	r3, r3, #7
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d00c      	beq.n	8005d40 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	3307      	adds	r3, #7
 8005d2a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	f023 0307 	bic.w	r3, r3, #7
 8005d32:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005d34:	68ba      	ldr	r2, [r7, #8]
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	1ad3      	subs	r3, r2, r3
 8005d3a:	4a1f      	ldr	r2, [pc, #124]	; (8005db8 <prvHeapInit+0xac>)
 8005d3c:	4413      	add	r3, r2
 8005d3e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005d44:	4a1d      	ldr	r2, [pc, #116]	; (8005dbc <prvHeapInit+0xb0>)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005d4a:	4b1c      	ldr	r3, [pc, #112]	; (8005dbc <prvHeapInit+0xb0>)
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	68ba      	ldr	r2, [r7, #8]
 8005d54:	4413      	add	r3, r2
 8005d56:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005d58:	2208      	movs	r2, #8
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	1a9b      	subs	r3, r3, r2
 8005d5e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	f023 0307 	bic.w	r3, r3, #7
 8005d66:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	4a15      	ldr	r2, [pc, #84]	; (8005dc0 <prvHeapInit+0xb4>)
 8005d6c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005d6e:	4b14      	ldr	r3, [pc, #80]	; (8005dc0 <prvHeapInit+0xb4>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	2200      	movs	r2, #0
 8005d74:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005d76:	4b12      	ldr	r3, [pc, #72]	; (8005dc0 <prvHeapInit+0xb4>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	68fa      	ldr	r2, [r7, #12]
 8005d86:	1ad2      	subs	r2, r2, r3
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005d8c:	4b0c      	ldr	r3, [pc, #48]	; (8005dc0 <prvHeapInit+0xb4>)
 8005d8e:	681a      	ldr	r2, [r3, #0]
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	4a0a      	ldr	r2, [pc, #40]	; (8005dc4 <prvHeapInit+0xb8>)
 8005d9a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	685b      	ldr	r3, [r3, #4]
 8005da0:	4a09      	ldr	r2, [pc, #36]	; (8005dc8 <prvHeapInit+0xbc>)
 8005da2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005da4:	4b09      	ldr	r3, [pc, #36]	; (8005dcc <prvHeapInit+0xc0>)
 8005da6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005daa:	601a      	str	r2, [r3, #0]
}
 8005dac:	bf00      	nop
 8005dae:	3714      	adds	r7, #20
 8005db0:	46bd      	mov	sp, r7
 8005db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db6:	4770      	bx	lr
 8005db8:	20000a4c 	.word	0x20000a4c
 8005dbc:	20001a4c 	.word	0x20001a4c
 8005dc0:	20001a54 	.word	0x20001a54
 8005dc4:	20001a5c 	.word	0x20001a5c
 8005dc8:	20001a58 	.word	0x20001a58
 8005dcc:	20001a68 	.word	0x20001a68

08005dd0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b085      	sub	sp, #20
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005dd8:	4b28      	ldr	r3, [pc, #160]	; (8005e7c <prvInsertBlockIntoFreeList+0xac>)
 8005dda:	60fb      	str	r3, [r7, #12]
 8005ddc:	e002      	b.n	8005de4 <prvInsertBlockIntoFreeList+0x14>
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	60fb      	str	r3, [r7, #12]
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	687a      	ldr	r2, [r7, #4]
 8005dea:	429a      	cmp	r2, r3
 8005dec:	d8f7      	bhi.n	8005dde <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	68ba      	ldr	r2, [r7, #8]
 8005df8:	4413      	add	r3, r2
 8005dfa:	687a      	ldr	r2, [r7, #4]
 8005dfc:	429a      	cmp	r2, r3
 8005dfe:	d108      	bne.n	8005e12 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	685a      	ldr	r2, [r3, #4]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	441a      	add	r2, r3
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	68ba      	ldr	r2, [r7, #8]
 8005e1c:	441a      	add	r2, r3
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	429a      	cmp	r2, r3
 8005e24:	d118      	bne.n	8005e58 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681a      	ldr	r2, [r3, #0]
 8005e2a:	4b15      	ldr	r3, [pc, #84]	; (8005e80 <prvInsertBlockIntoFreeList+0xb0>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	429a      	cmp	r2, r3
 8005e30:	d00d      	beq.n	8005e4e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	685a      	ldr	r2, [r3, #4]
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	441a      	add	r2, r3
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	681a      	ldr	r2, [r3, #0]
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	601a      	str	r2, [r3, #0]
 8005e4c:	e008      	b.n	8005e60 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005e4e:	4b0c      	ldr	r3, [pc, #48]	; (8005e80 <prvInsertBlockIntoFreeList+0xb0>)
 8005e50:	681a      	ldr	r2, [r3, #0]
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	601a      	str	r2, [r3, #0]
 8005e56:	e003      	b.n	8005e60 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681a      	ldr	r2, [r3, #0]
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005e60:	68fa      	ldr	r2, [r7, #12]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	429a      	cmp	r2, r3
 8005e66:	d002      	beq.n	8005e6e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	687a      	ldr	r2, [r7, #4]
 8005e6c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005e6e:	bf00      	nop
 8005e70:	3714      	adds	r7, #20
 8005e72:	46bd      	mov	sp, r7
 8005e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e78:	4770      	bx	lr
 8005e7a:	bf00      	nop
 8005e7c:	20001a4c 	.word	0x20001a4c
 8005e80:	20001a54 	.word	0x20001a54

08005e84 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8005e84:	b480      	push	{r7}
 8005e86:	b083      	sub	sp, #12
 8005e88:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8005e8a:	4b24      	ldr	r3, [pc, #144]	; (8005f1c <_DoInit+0x98>)
 8005e8c:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2203      	movs	r2, #3
 8005e92:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2203      	movs	r2, #3
 8005e98:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	4a20      	ldr	r2, [pc, #128]	; (8005f20 <_DoInit+0x9c>)
 8005e9e:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	4a20      	ldr	r2, [pc, #128]	; (8005f24 <_DoInit+0xa0>)
 8005ea4:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005eac:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	4a17      	ldr	r2, [pc, #92]	; (8005f20 <_DoInit+0x9c>)
 8005ec4:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	4a17      	ldr	r2, [pc, #92]	; (8005f28 <_DoInit+0xa4>)
 8005eca:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2210      	movs	r2, #16
 8005ed0:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2200      	movs	r2, #0
 8005edc:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	3307      	adds	r3, #7
 8005ee8:	4a10      	ldr	r2, [pc, #64]	; (8005f2c <_DoInit+0xa8>)
 8005eea:	6810      	ldr	r0, [r2, #0]
 8005eec:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005eee:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	4a0e      	ldr	r2, [pc, #56]	; (8005f30 <_DoInit+0xac>)
 8005ef6:	6810      	ldr	r0, [r2, #0]
 8005ef8:	6018      	str	r0, [r3, #0]
 8005efa:	8891      	ldrh	r1, [r2, #4]
 8005efc:	7992      	ldrb	r2, [r2, #6]
 8005efe:	8099      	strh	r1, [r3, #4]
 8005f00:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005f02:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2220      	movs	r2, #32
 8005f0a:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005f0c:	f3bf 8f5f 	dmb	sy
}
 8005f10:	bf00      	nop
 8005f12:	370c      	adds	r7, #12
 8005f14:	46bd      	mov	sp, r7
 8005f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1a:	4770      	bx	lr
 8005f1c:	2000207c 	.word	0x2000207c
 8005f20:	08007440 	.word	0x08007440
 8005f24:	20001a6c 	.word	0x20001a6c
 8005f28:	20001e6c 	.word	0x20001e6c
 8005f2c:	0800744c 	.word	0x0800744c
 8005f30:	08007450 	.word	0x08007450

08005f34 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b08a      	sub	sp, #40	; 0x28
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	60f8      	str	r0, [r7, #12]
 8005f3c:	60b9      	str	r1, [r7, #8]
 8005f3e:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8005f40:	2300      	movs	r3, #0
 8005f42:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	68db      	ldr	r3, [r3, #12]
 8005f48:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	691b      	ldr	r3, [r3, #16]
 8005f4e:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8005f50:	69ba      	ldr	r2, [r7, #24]
 8005f52:	69fb      	ldr	r3, [r7, #28]
 8005f54:	429a      	cmp	r2, r3
 8005f56:	d905      	bls.n	8005f64 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8005f58:	69ba      	ldr	r2, [r7, #24]
 8005f5a:	69fb      	ldr	r3, [r7, #28]
 8005f5c:	1ad3      	subs	r3, r2, r3
 8005f5e:	3b01      	subs	r3, #1
 8005f60:	627b      	str	r3, [r7, #36]	; 0x24
 8005f62:	e007      	b.n	8005f74 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	689a      	ldr	r2, [r3, #8]
 8005f68:	69b9      	ldr	r1, [r7, #24]
 8005f6a:	69fb      	ldr	r3, [r7, #28]
 8005f6c:	1acb      	subs	r3, r1, r3
 8005f6e:	4413      	add	r3, r2
 8005f70:	3b01      	subs	r3, #1
 8005f72:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	689a      	ldr	r2, [r3, #8]
 8005f78:	69fb      	ldr	r3, [r7, #28]
 8005f7a:	1ad3      	subs	r3, r2, r3
 8005f7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	bf28      	it	cs
 8005f82:	4613      	movcs	r3, r2
 8005f84:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8005f86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	bf28      	it	cs
 8005f8e:	4613      	movcs	r3, r2
 8005f90:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	685a      	ldr	r2, [r3, #4]
 8005f96:	69fb      	ldr	r3, [r7, #28]
 8005f98:	4413      	add	r3, r2
 8005f9a:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8005f9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f9e:	68b9      	ldr	r1, [r7, #8]
 8005fa0:	6978      	ldr	r0, [r7, #20]
 8005fa2:	f000 fd83 	bl	8006aac <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8005fa6:	6a3a      	ldr	r2, [r7, #32]
 8005fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005faa:	4413      	add	r3, r2
 8005fac:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8005fae:	68ba      	ldr	r2, [r7, #8]
 8005fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb2:	4413      	add	r3, r2
 8005fb4:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8005fb6:	687a      	ldr	r2, [r7, #4]
 8005fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fba:	1ad3      	subs	r3, r2, r3
 8005fbc:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8005fbe:	69fa      	ldr	r2, [r7, #28]
 8005fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc2:	4413      	add	r3, r2
 8005fc4:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	689b      	ldr	r3, [r3, #8]
 8005fca:	69fa      	ldr	r2, [r7, #28]
 8005fcc:	429a      	cmp	r2, r3
 8005fce:	d101      	bne.n	8005fd4 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005fd4:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	69fa      	ldr	r2, [r7, #28]
 8005fdc:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d1b2      	bne.n	8005f4a <_WriteBlocking+0x16>
  return NumBytesWritten;
 8005fe4:	6a3b      	ldr	r3, [r7, #32]
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	3728      	adds	r7, #40	; 0x28
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}

08005fee <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8005fee:	b580      	push	{r7, lr}
 8005ff0:	b088      	sub	sp, #32
 8005ff2:	af00      	add	r7, sp, #0
 8005ff4:	60f8      	str	r0, [r7, #12]
 8005ff6:	60b9      	str	r1, [r7, #8]
 8005ff8:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	68db      	ldr	r3, [r3, #12]
 8005ffe:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	689a      	ldr	r2, [r3, #8]
 8006004:	69fb      	ldr	r3, [r7, #28]
 8006006:	1ad3      	subs	r3, r2, r3
 8006008:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 800600a:	69ba      	ldr	r2, [r7, #24]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	429a      	cmp	r2, r3
 8006010:	d911      	bls.n	8006036 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	685a      	ldr	r2, [r3, #4]
 8006016:	69fb      	ldr	r3, [r7, #28]
 8006018:	4413      	add	r3, r2
 800601a:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 800601c:	687a      	ldr	r2, [r7, #4]
 800601e:	68b9      	ldr	r1, [r7, #8]
 8006020:	6938      	ldr	r0, [r7, #16]
 8006022:	f000 fd43 	bl	8006aac <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8006026:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 800602a:	69fa      	ldr	r2, [r7, #28]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	441a      	add	r2, r3
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8006034:	e01f      	b.n	8006076 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8006036:	69bb      	ldr	r3, [r7, #24]
 8006038:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	685a      	ldr	r2, [r3, #4]
 800603e:	69fb      	ldr	r3, [r7, #28]
 8006040:	4413      	add	r3, r2
 8006042:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8006044:	697a      	ldr	r2, [r7, #20]
 8006046:	68b9      	ldr	r1, [r7, #8]
 8006048:	6938      	ldr	r0, [r7, #16]
 800604a:	f000 fd2f 	bl	8006aac <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 800604e:	687a      	ldr	r2, [r7, #4]
 8006050:	69bb      	ldr	r3, [r7, #24]
 8006052:	1ad3      	subs	r3, r2, r3
 8006054:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 800605c:	68ba      	ldr	r2, [r7, #8]
 800605e:	69bb      	ldr	r3, [r7, #24]
 8006060:	4413      	add	r3, r2
 8006062:	697a      	ldr	r2, [r7, #20]
 8006064:	4619      	mov	r1, r3
 8006066:	6938      	ldr	r0, [r7, #16]
 8006068:	f000 fd20 	bl	8006aac <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800606c:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	697a      	ldr	r2, [r7, #20]
 8006074:	60da      	str	r2, [r3, #12]
}
 8006076:	bf00      	nop
 8006078:	3720      	adds	r7, #32
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}

0800607e <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 800607e:	b480      	push	{r7}
 8006080:	b087      	sub	sp, #28
 8006082:	af00      	add	r7, sp, #0
 8006084:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	691b      	ldr	r3, [r3, #16]
 800608a:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	68db      	ldr	r3, [r3, #12]
 8006090:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8006092:	693a      	ldr	r2, [r7, #16]
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	429a      	cmp	r2, r3
 8006098:	d808      	bhi.n	80060ac <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	689a      	ldr	r2, [r3, #8]
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	1ad2      	subs	r2, r2, r3
 80060a2:	693b      	ldr	r3, [r7, #16]
 80060a4:	4413      	add	r3, r2
 80060a6:	3b01      	subs	r3, #1
 80060a8:	617b      	str	r3, [r7, #20]
 80060aa:	e004      	b.n	80060b6 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 80060ac:	693a      	ldr	r2, [r7, #16]
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	1ad3      	subs	r3, r2, r3
 80060b2:	3b01      	subs	r3, #1
 80060b4:	617b      	str	r3, [r7, #20]
  }
  return r;
 80060b6:	697b      	ldr	r3, [r7, #20]
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	371c      	adds	r7, #28
 80060bc:	46bd      	mov	sp, r7
 80060be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c2:	4770      	bx	lr

080060c4 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b088      	sub	sp, #32
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	60f8      	str	r0, [r7, #12]
 80060cc:	60b9      	str	r1, [r7, #8]
 80060ce:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	1c5a      	adds	r2, r3, #1
 80060d8:	4613      	mov	r3, r2
 80060da:	005b      	lsls	r3, r3, #1
 80060dc:	4413      	add	r3, r2
 80060de:	00db      	lsls	r3, r3, #3
 80060e0:	4a1f      	ldr	r2, [pc, #124]	; (8006160 <SEGGER_RTT_WriteNoLock+0x9c>)
 80060e2:	4413      	add	r3, r2
 80060e4:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	695b      	ldr	r3, [r3, #20]
 80060ea:	2b02      	cmp	r3, #2
 80060ec:	d029      	beq.n	8006142 <SEGGER_RTT_WriteNoLock+0x7e>
 80060ee:	2b02      	cmp	r3, #2
 80060f0:	d82e      	bhi.n	8006150 <SEGGER_RTT_WriteNoLock+0x8c>
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d002      	beq.n	80060fc <SEGGER_RTT_WriteNoLock+0x38>
 80060f6:	2b01      	cmp	r3, #1
 80060f8:	d013      	beq.n	8006122 <SEGGER_RTT_WriteNoLock+0x5e>
 80060fa:	e029      	b.n	8006150 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80060fc:	6978      	ldr	r0, [r7, #20]
 80060fe:	f7ff ffbe 	bl	800607e <_GetAvailWriteSpace>
 8006102:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8006104:	693a      	ldr	r2, [r7, #16]
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	429a      	cmp	r2, r3
 800610a:	d202      	bcs.n	8006112 <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 800610c:	2300      	movs	r3, #0
 800610e:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8006110:	e021      	b.n	8006156 <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8006116:	687a      	ldr	r2, [r7, #4]
 8006118:	69b9      	ldr	r1, [r7, #24]
 800611a:	6978      	ldr	r0, [r7, #20]
 800611c:	f7ff ff67 	bl	8005fee <_WriteNoCheck>
    break;
 8006120:	e019      	b.n	8006156 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8006122:	6978      	ldr	r0, [r7, #20]
 8006124:	f7ff ffab 	bl	800607e <_GetAvailWriteSpace>
 8006128:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 800612a:	687a      	ldr	r2, [r7, #4]
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	4293      	cmp	r3, r2
 8006130:	bf28      	it	cs
 8006132:	4613      	movcs	r3, r2
 8006134:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8006136:	69fa      	ldr	r2, [r7, #28]
 8006138:	69b9      	ldr	r1, [r7, #24]
 800613a:	6978      	ldr	r0, [r7, #20]
 800613c:	f7ff ff57 	bl	8005fee <_WriteNoCheck>
    break;
 8006140:	e009      	b.n	8006156 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8006142:	687a      	ldr	r2, [r7, #4]
 8006144:	69b9      	ldr	r1, [r7, #24]
 8006146:	6978      	ldr	r0, [r7, #20]
 8006148:	f7ff fef4 	bl	8005f34 <_WriteBlocking>
 800614c:	61f8      	str	r0, [r7, #28]
    break;
 800614e:	e002      	b.n	8006156 <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 8006150:	2300      	movs	r3, #0
 8006152:	61fb      	str	r3, [r7, #28]
    break;
 8006154:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8006156:	69fb      	ldr	r3, [r7, #28]
}
 8006158:	4618      	mov	r0, r3
 800615a:	3720      	adds	r7, #32
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}
 8006160:	2000207c 	.word	0x2000207c

08006164 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8006164:	b580      	push	{r7, lr}
 8006166:	b088      	sub	sp, #32
 8006168:	af00      	add	r7, sp, #0
 800616a:	60f8      	str	r0, [r7, #12]
 800616c:	60b9      	str	r1, [r7, #8]
 800616e:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8006170:	4b0e      	ldr	r3, [pc, #56]	; (80061ac <SEGGER_RTT_Write+0x48>)
 8006172:	61fb      	str	r3, [r7, #28]
 8006174:	69fb      	ldr	r3, [r7, #28]
 8006176:	781b      	ldrb	r3, [r3, #0]
 8006178:	b2db      	uxtb	r3, r3
 800617a:	2b00      	cmp	r3, #0
 800617c:	d101      	bne.n	8006182 <SEGGER_RTT_Write+0x1e>
 800617e:	f7ff fe81 	bl	8005e84 <_DoInit>
  SEGGER_RTT_LOCK();
 8006182:	f3ef 8311 	mrs	r3, BASEPRI
 8006186:	f04f 0120 	mov.w	r1, #32
 800618a:	f381 8811 	msr	BASEPRI, r1
 800618e:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8006190:	687a      	ldr	r2, [r7, #4]
 8006192:	68b9      	ldr	r1, [r7, #8]
 8006194:	68f8      	ldr	r0, [r7, #12]
 8006196:	f7ff ff95 	bl	80060c4 <SEGGER_RTT_WriteNoLock>
 800619a:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 800619c:	69bb      	ldr	r3, [r7, #24]
 800619e:	f383 8811 	msr	BASEPRI, r3
  return Status;
 80061a2:	697b      	ldr	r3, [r7, #20]
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	3720      	adds	r7, #32
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bd80      	pop	{r7, pc}
 80061ac:	2000207c 	.word	0x2000207c

080061b0 <_StoreChar>:
*/
/*********************************************************************
*
*       _StoreChar
*/
static void _StoreChar(SEGGER_RTT_PRINTF_DESC * p, char c) {
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b084      	sub	sp, #16
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
 80061b8:	460b      	mov	r3, r1
 80061ba:	70fb      	strb	r3, [r7, #3]
  unsigned Cnt;

  Cnt = p->Cnt;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	689b      	ldr	r3, [r3, #8]
 80061c0:	60fb      	str	r3, [r7, #12]
  if ((Cnt + 1u) <= p->BufferSize) {
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	1c5a      	adds	r2, r3, #1
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	685b      	ldr	r3, [r3, #4]
 80061ca:	429a      	cmp	r2, r3
 80061cc:	d80e      	bhi.n	80061ec <_StoreChar+0x3c>
    *(p->pBuffer + Cnt) = c;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681a      	ldr	r2, [r3, #0]
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	4413      	add	r3, r2
 80061d6:	78fa      	ldrb	r2, [r7, #3]
 80061d8:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	1c5a      	adds	r2, r3, #1
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	609a      	str	r2, [r3, #8]
    p->ReturnValue++;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	68db      	ldr	r3, [r3, #12]
 80061e6:	1c5a      	adds	r2, r3, #1
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	60da      	str	r2, [r3, #12]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == p->BufferSize) {
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	689a      	ldr	r2, [r3, #8]
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	685b      	ldr	r3, [r3, #4]
 80061f4:	429a      	cmp	r2, r3
 80061f6:	d115      	bne.n	8006224 <_StoreChar+0x74>
    if (SEGGER_RTT_Write(p->RTTBufferIndex, p->pBuffer, p->Cnt) != p->Cnt) {
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6918      	ldr	r0, [r3, #16]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6819      	ldr	r1, [r3, #0]
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	689b      	ldr	r3, [r3, #8]
 8006204:	461a      	mov	r2, r3
 8006206:	f7ff ffad 	bl	8006164 <SEGGER_RTT_Write>
 800620a:	4602      	mov	r2, r0
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	689b      	ldr	r3, [r3, #8]
 8006210:	429a      	cmp	r2, r3
 8006212:	d004      	beq.n	800621e <_StoreChar+0x6e>
      p->ReturnValue = -1;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800621a:	60da      	str	r2, [r3, #12]
    } else {
      p->Cnt = 0u;
    }
  }
}
 800621c:	e002      	b.n	8006224 <_StoreChar+0x74>
      p->Cnt = 0u;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2200      	movs	r2, #0
 8006222:	609a      	str	r2, [r3, #8]
}
 8006224:	bf00      	nop
 8006226:	3710      	adds	r7, #16
 8006228:	46bd      	mov	sp, r7
 800622a:	bd80      	pop	{r7, pc}

0800622c <_PrintUnsigned>:

/*********************************************************************
*
*       _PrintUnsigned
*/
static void _PrintUnsigned(SEGGER_RTT_PRINTF_DESC * pBufferDesc, unsigned v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
 800622c:	b580      	push	{r7, lr}
 800622e:	b08a      	sub	sp, #40	; 0x28
 8006230:	af00      	add	r7, sp, #0
 8006232:	60f8      	str	r0, [r7, #12]
 8006234:	60b9      	str	r1, [r7, #8]
 8006236:	607a      	str	r2, [r7, #4]
 8006238:	603b      	str	r3, [r7, #0]
  unsigned Digit;
  unsigned Number;
  unsigned Width;
  char c;

  Number = v;
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 800623e:	2301      	movs	r3, #1
 8006240:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8006242:	2301      	movs	r3, #1
 8006244:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8006246:	e007      	b.n	8006258 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8006248:	6a3a      	ldr	r2, [r7, #32]
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006250:	623b      	str	r3, [r7, #32]
    Width++;
 8006252:	69fb      	ldr	r3, [r7, #28]
 8006254:	3301      	adds	r3, #1
 8006256:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8006258:	6a3a      	ldr	r2, [r7, #32]
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	429a      	cmp	r2, r3
 800625e:	d2f3      	bcs.n	8006248 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8006260:	683a      	ldr	r2, [r7, #0]
 8006262:	69fb      	ldr	r3, [r7, #28]
 8006264:	429a      	cmp	r2, r3
 8006266:	d901      	bls.n	800626c <_PrintUnsigned+0x40>
    Width = NumDigits;
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 800626c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800626e:	f003 0301 	and.w	r3, r3, #1
 8006272:	2b00      	cmp	r3, #0
 8006274:	d125      	bne.n	80062c2 <_PrintUnsigned+0x96>
    if (FieldWidth != 0u) {
 8006276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006278:	2b00      	cmp	r3, #0
 800627a:	d022      	beq.n	80062c2 <_PrintUnsigned+0x96>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 800627c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800627e:	f003 0302 	and.w	r3, r3, #2
 8006282:	2b00      	cmp	r3, #0
 8006284:	d005      	beq.n	8006292 <_PrintUnsigned+0x66>
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d102      	bne.n	8006292 <_PrintUnsigned+0x66>
        c = '0';
 800628c:	2330      	movs	r3, #48	; 0x30
 800628e:	76fb      	strb	r3, [r7, #27]
 8006290:	e001      	b.n	8006296 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 8006292:	2320      	movs	r3, #32
 8006294:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006296:	e00b      	b.n	80062b0 <_PrintUnsigned+0x84>
        FieldWidth--;
 8006298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800629a:	3b01      	subs	r3, #1
 800629c:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 800629e:	7efb      	ldrb	r3, [r7, #27]
 80062a0:	4619      	mov	r1, r3
 80062a2:	68f8      	ldr	r0, [r7, #12]
 80062a4:	f7ff ff84 	bl	80061b0 <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	68db      	ldr	r3, [r3, #12]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	db07      	blt.n	80062c0 <_PrintUnsigned+0x94>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80062b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d005      	beq.n	80062c2 <_PrintUnsigned+0x96>
 80062b6:	69fa      	ldr	r2, [r7, #28]
 80062b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ba:	429a      	cmp	r2, r3
 80062bc:	d3ec      	bcc.n	8006298 <_PrintUnsigned+0x6c>
 80062be:	e000      	b.n	80062c2 <_PrintUnsigned+0x96>
          break;
 80062c0:	bf00      	nop
        }
      }
    }
  }
  if (pBufferDesc->ReturnValue >= 0) {
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	68db      	ldr	r3, [r3, #12]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	db55      	blt.n	8006376 <_PrintUnsigned+0x14a>
    // Compute Digit.
    // Loop until Digit has the value of the highest digit required.
    // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
    //
    while (1) {
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	2b01      	cmp	r3, #1
 80062ce:	d903      	bls.n	80062d8 <_PrintUnsigned+0xac>
        NumDigits--;
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	3b01      	subs	r3, #1
 80062d4:	603b      	str	r3, [r7, #0]
 80062d6:	e009      	b.n	80062ec <_PrintUnsigned+0xc0>
      } else {
        Div = v / Digit;
 80062d8:	68ba      	ldr	r2, [r7, #8]
 80062da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80062e0:	617b      	str	r3, [r7, #20]
        if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 80062e2:	697a      	ldr	r2, [r7, #20]
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	429a      	cmp	r2, r3
 80062e8:	d200      	bcs.n	80062ec <_PrintUnsigned+0xc0>
          break;
 80062ea:	e005      	b.n	80062f8 <_PrintUnsigned+0xcc>
        }
      }
      Digit *= Base;
 80062ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ee:	687a      	ldr	r2, [r7, #4]
 80062f0:	fb02 f303 	mul.w	r3, r2, r3
 80062f4:	627b      	str	r3, [r7, #36]	; 0x24
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80062f6:	e7e8      	b.n	80062ca <_PrintUnsigned+0x9e>
    }
    //
    // Output digits
    //
    do {
      Div = v / Digit;
 80062f8:	68ba      	ldr	r2, [r7, #8]
 80062fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006300:	617b      	str	r3, [r7, #20]
      v -= Div * Digit;
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006306:	fb02 f303 	mul.w	r3, r2, r3
 800630a:	68ba      	ldr	r2, [r7, #8]
 800630c:	1ad3      	subs	r3, r2, r3
 800630e:	60bb      	str	r3, [r7, #8]
      _StoreChar(pBufferDesc, _aV2C[Div]);
 8006310:	4a1b      	ldr	r2, [pc, #108]	; (8006380 <_PrintUnsigned+0x154>)
 8006312:	697b      	ldr	r3, [r7, #20]
 8006314:	4413      	add	r3, r2
 8006316:	781b      	ldrb	r3, [r3, #0]
 8006318:	4619      	mov	r1, r3
 800631a:	68f8      	ldr	r0, [r7, #12]
 800631c:	f7ff ff48 	bl	80061b0 <_StoreChar>
      if (pBufferDesc->ReturnValue < 0) {
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	68db      	ldr	r3, [r3, #12]
 8006324:	2b00      	cmp	r3, #0
 8006326:	db08      	blt.n	800633a <_PrintUnsigned+0x10e>
        break;
      }
      Digit /= Base;
 8006328:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006330:	627b      	str	r3, [r7, #36]	; 0x24
    } while (Digit);
 8006332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006334:	2b00      	cmp	r3, #0
 8006336:	d1df      	bne.n	80062f8 <_PrintUnsigned+0xcc>
 8006338:	e000      	b.n	800633c <_PrintUnsigned+0x110>
        break;
 800633a:	bf00      	nop
    //
    // Print trailing spaces if necessary
    //
    if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 800633c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800633e:	f003 0301 	and.w	r3, r3, #1
 8006342:	2b00      	cmp	r3, #0
 8006344:	d017      	beq.n	8006376 <_PrintUnsigned+0x14a>
      if (FieldWidth != 0u) {
 8006346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006348:	2b00      	cmp	r3, #0
 800634a:	d014      	beq.n	8006376 <_PrintUnsigned+0x14a>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800634c:	e00a      	b.n	8006364 <_PrintUnsigned+0x138>
          FieldWidth--;
 800634e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006350:	3b01      	subs	r3, #1
 8006352:	633b      	str	r3, [r7, #48]	; 0x30
          _StoreChar(pBufferDesc, ' ');
 8006354:	2120      	movs	r1, #32
 8006356:	68f8      	ldr	r0, [r7, #12]
 8006358:	f7ff ff2a 	bl	80061b0 <_StoreChar>
          if (pBufferDesc->ReturnValue < 0) {
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	68db      	ldr	r3, [r3, #12]
 8006360:	2b00      	cmp	r3, #0
 8006362:	db07      	blt.n	8006374 <_PrintUnsigned+0x148>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006366:	2b00      	cmp	r3, #0
 8006368:	d005      	beq.n	8006376 <_PrintUnsigned+0x14a>
 800636a:	69fa      	ldr	r2, [r7, #28]
 800636c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800636e:	429a      	cmp	r2, r3
 8006370:	d3ed      	bcc.n	800634e <_PrintUnsigned+0x122>
          }
        }
      }
    }
  }
}
 8006372:	e000      	b.n	8006376 <_PrintUnsigned+0x14a>
            break;
 8006374:	bf00      	nop
}
 8006376:	bf00      	nop
 8006378:	3728      	adds	r7, #40	; 0x28
 800637a:	46bd      	mov	sp, r7
 800637c:	bd80      	pop	{r7, pc}
 800637e:	bf00      	nop
 8006380:	08007534 	.word	0x08007534

08006384 <_PrintInt>:

/*********************************************************************
*
*       _PrintInt
*/
static void _PrintInt(SEGGER_RTT_PRINTF_DESC * pBufferDesc, int v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
 8006384:	b580      	push	{r7, lr}
 8006386:	b088      	sub	sp, #32
 8006388:	af02      	add	r7, sp, #8
 800638a:	60f8      	str	r0, [r7, #12]
 800638c:	60b9      	str	r1, [r7, #8]
 800638e:	607a      	str	r2, [r7, #4]
 8006390:	603b      	str	r3, [r7, #0]
  unsigned Width;
  int Number;

  Number = (v < 0) ? -v : v;
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	2b00      	cmp	r3, #0
 8006396:	bfb8      	it	lt
 8006398:	425b      	neglt	r3, r3
 800639a:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 800639c:	2301      	movs	r3, #1
 800639e:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80063a0:	e007      	b.n	80063b2 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	693a      	ldr	r2, [r7, #16]
 80063a6:	fb92 f3f3 	sdiv	r3, r2, r3
 80063aa:	613b      	str	r3, [r7, #16]
    Width++;
 80063ac:	697b      	ldr	r3, [r7, #20]
 80063ae:	3301      	adds	r3, #1
 80063b0:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	693a      	ldr	r2, [r7, #16]
 80063b6:	429a      	cmp	r2, r3
 80063b8:	daf3      	bge.n	80063a2 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 80063ba:	683a      	ldr	r2, [r7, #0]
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	429a      	cmp	r2, r3
 80063c0:	d901      	bls.n	80063c6 <_PrintInt+0x42>
    Width = NumDigits;
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 80063c6:	6a3b      	ldr	r3, [r7, #32]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d00a      	beq.n	80063e2 <_PrintInt+0x5e>
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	db04      	blt.n	80063dc <_PrintInt+0x58>
 80063d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d4:	f003 0304 	and.w	r3, r3, #4
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d002      	beq.n	80063e2 <_PrintInt+0x5e>
    FieldWidth--;
 80063dc:	6a3b      	ldr	r3, [r7, #32]
 80063de:	3b01      	subs	r3, #1
 80063e0:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 80063e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e4:	f003 0302 	and.w	r3, r3, #2
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d002      	beq.n	80063f2 <_PrintInt+0x6e>
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d01c      	beq.n	800642c <_PrintInt+0xa8>
 80063f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f4:	f003 0301 	and.w	r3, r3, #1
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d117      	bne.n	800642c <_PrintInt+0xa8>
    if (FieldWidth != 0u) {
 80063fc:	6a3b      	ldr	r3, [r7, #32]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d014      	beq.n	800642c <_PrintInt+0xa8>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006402:	e00a      	b.n	800641a <_PrintInt+0x96>
        FieldWidth--;
 8006404:	6a3b      	ldr	r3, [r7, #32]
 8006406:	3b01      	subs	r3, #1
 8006408:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 800640a:	2120      	movs	r1, #32
 800640c:	68f8      	ldr	r0, [r7, #12]
 800640e:	f7ff fecf 	bl	80061b0 <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	68db      	ldr	r3, [r3, #12]
 8006416:	2b00      	cmp	r3, #0
 8006418:	db07      	blt.n	800642a <_PrintInt+0xa6>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800641a:	6a3b      	ldr	r3, [r7, #32]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d005      	beq.n	800642c <_PrintInt+0xa8>
 8006420:	697a      	ldr	r2, [r7, #20]
 8006422:	6a3b      	ldr	r3, [r7, #32]
 8006424:	429a      	cmp	r2, r3
 8006426:	d3ed      	bcc.n	8006404 <_PrintInt+0x80>
 8006428:	e000      	b.n	800642c <_PrintInt+0xa8>
          break;
 800642a:	bf00      	nop
    }
  }
  //
  // Print sign if necessary
  //
  if (pBufferDesc->ReturnValue >= 0) {
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	68db      	ldr	r3, [r3, #12]
 8006430:	2b00      	cmp	r3, #0
 8006432:	db4a      	blt.n	80064ca <_PrintInt+0x146>
    if (v < 0) {
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	2b00      	cmp	r3, #0
 8006438:	da07      	bge.n	800644a <_PrintInt+0xc6>
      v = -v;
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	425b      	negs	r3, r3
 800643e:	60bb      	str	r3, [r7, #8]
      _StoreChar(pBufferDesc, '-');
 8006440:	212d      	movs	r1, #45	; 0x2d
 8006442:	68f8      	ldr	r0, [r7, #12]
 8006444:	f7ff feb4 	bl	80061b0 <_StoreChar>
 8006448:	e008      	b.n	800645c <_PrintInt+0xd8>
    } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 800644a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800644c:	f003 0304 	and.w	r3, r3, #4
 8006450:	2b00      	cmp	r3, #0
 8006452:	d003      	beq.n	800645c <_PrintInt+0xd8>
      _StoreChar(pBufferDesc, '+');
 8006454:	212b      	movs	r1, #43	; 0x2b
 8006456:	68f8      	ldr	r0, [r7, #12]
 8006458:	f7ff feaa 	bl	80061b0 <_StoreChar>
    } else {

    }
    if (pBufferDesc->ReturnValue >= 0) {
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	68db      	ldr	r3, [r3, #12]
 8006460:	2b00      	cmp	r3, #0
 8006462:	db32      	blt.n	80064ca <_PrintInt+0x146>
      //
      // Print leading zeros if necessary
      //
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8006464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006466:	f003 0302 	and.w	r3, r3, #2
 800646a:	2b00      	cmp	r3, #0
 800646c:	d01f      	beq.n	80064ae <_PrintInt+0x12a>
 800646e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006470:	f003 0301 	and.w	r3, r3, #1
 8006474:	2b00      	cmp	r3, #0
 8006476:	d11a      	bne.n	80064ae <_PrintInt+0x12a>
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d117      	bne.n	80064ae <_PrintInt+0x12a>
        if (FieldWidth != 0u) {
 800647e:	6a3b      	ldr	r3, [r7, #32]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d014      	beq.n	80064ae <_PrintInt+0x12a>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006484:	e00a      	b.n	800649c <_PrintInt+0x118>
            FieldWidth--;
 8006486:	6a3b      	ldr	r3, [r7, #32]
 8006488:	3b01      	subs	r3, #1
 800648a:	623b      	str	r3, [r7, #32]
            _StoreChar(pBufferDesc, '0');
 800648c:	2130      	movs	r1, #48	; 0x30
 800648e:	68f8      	ldr	r0, [r7, #12]
 8006490:	f7ff fe8e 	bl	80061b0 <_StoreChar>
            if (pBufferDesc->ReturnValue < 0) {
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	68db      	ldr	r3, [r3, #12]
 8006498:	2b00      	cmp	r3, #0
 800649a:	db07      	blt.n	80064ac <_PrintInt+0x128>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800649c:	6a3b      	ldr	r3, [r7, #32]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d005      	beq.n	80064ae <_PrintInt+0x12a>
 80064a2:	697a      	ldr	r2, [r7, #20]
 80064a4:	6a3b      	ldr	r3, [r7, #32]
 80064a6:	429a      	cmp	r2, r3
 80064a8:	d3ed      	bcc.n	8006486 <_PrintInt+0x102>
 80064aa:	e000      	b.n	80064ae <_PrintInt+0x12a>
              break;
 80064ac:	bf00      	nop
            }
          }
        }
      }
      if (pBufferDesc->ReturnValue >= 0) {
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	68db      	ldr	r3, [r3, #12]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	db09      	blt.n	80064ca <_PrintInt+0x146>
        //
        // Print number without sign
        //
        _PrintUnsigned(pBufferDesc, (unsigned)v, Base, NumDigits, FieldWidth, FormatFlags);
 80064b6:	68b9      	ldr	r1, [r7, #8]
 80064b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ba:	9301      	str	r3, [sp, #4]
 80064bc:	6a3b      	ldr	r3, [r7, #32]
 80064be:	9300      	str	r3, [sp, #0]
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	687a      	ldr	r2, [r7, #4]
 80064c4:	68f8      	ldr	r0, [r7, #12]
 80064c6:	f7ff feb1 	bl	800622c <_PrintUnsigned>
      }
    }
  }
}
 80064ca:	bf00      	nop
 80064cc:	3718      	adds	r7, #24
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}
	...

080064d4 <SEGGER_RTT_vprintf>:
*
*  Return values
*    >= 0:  Number of bytes which have been stored in the "Up"-buffer.
*     < 0:  Error
*/
int SEGGER_RTT_vprintf(unsigned BufferIndex, const char * sFormat, va_list * pParamList) {
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b0a2      	sub	sp, #136	; 0x88
 80064d8:	af02      	add	r7, sp, #8
 80064da:	60f8      	str	r0, [r7, #12]
 80064dc:	60b9      	str	r1, [r7, #8]
 80064de:	607a      	str	r2, [r7, #4]
  unsigned NumDigits;
  unsigned FormatFlags;
  unsigned FieldWidth;
  char acBuffer[SEGGER_RTT_PRINTF_BUFFER_SIZE];

  BufferDesc.pBuffer        = acBuffer;
 80064e0:	f107 0310 	add.w	r3, r7, #16
 80064e4:	653b      	str	r3, [r7, #80]	; 0x50
  BufferDesc.BufferSize     = SEGGER_RTT_PRINTF_BUFFER_SIZE;
 80064e6:	2340      	movs	r3, #64	; 0x40
 80064e8:	657b      	str	r3, [r7, #84]	; 0x54
  BufferDesc.Cnt            = 0u;
 80064ea:	2300      	movs	r3, #0
 80064ec:	65bb      	str	r3, [r7, #88]	; 0x58
  BufferDesc.RTTBufferIndex = BufferIndex;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	663b      	str	r3, [r7, #96]	; 0x60
  BufferDesc.ReturnValue    = 0;
 80064f2:	2300      	movs	r3, #0
 80064f4:	65fb      	str	r3, [r7, #92]	; 0x5c

  do {
    c = *sFormat;
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	781b      	ldrb	r3, [r3, #0]
 80064fa:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    sFormat++;
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	3301      	adds	r3, #1
 8006502:	60bb      	str	r3, [r7, #8]
    if (c == 0u) {
 8006504:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8006508:	2b00      	cmp	r3, #0
 800650a:	f000 819f 	beq.w	800684c <SEGGER_RTT_vprintf+0x378>
      break;
    }
    if (c == '%') {
 800650e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8006512:	2b25      	cmp	r3, #37	; 0x25
 8006514:	f040 818d 	bne.w	8006832 <SEGGER_RTT_vprintf+0x35e>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8006518:	2300      	movs	r3, #0
 800651a:	673b      	str	r3, [r7, #112]	; 0x70
      v = 1;
 800651c:	2301      	movs	r3, #1
 800651e:	67bb      	str	r3, [r7, #120]	; 0x78
      do {
        c = *sFormat;
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	781b      	ldrb	r3, [r3, #0]
 8006524:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
        switch (c) {
 8006528:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800652c:	3b23      	subs	r3, #35	; 0x23
 800652e:	2b0d      	cmp	r3, #13
 8006530:	d83e      	bhi.n	80065b0 <SEGGER_RTT_vprintf+0xdc>
 8006532:	a201      	add	r2, pc, #4	; (adr r2, 8006538 <SEGGER_RTT_vprintf+0x64>)
 8006534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006538:	080065a1 	.word	0x080065a1
 800653c:	080065b1 	.word	0x080065b1
 8006540:	080065b1 	.word	0x080065b1
 8006544:	080065b1 	.word	0x080065b1
 8006548:	080065b1 	.word	0x080065b1
 800654c:	080065b1 	.word	0x080065b1
 8006550:	080065b1 	.word	0x080065b1
 8006554:	080065b1 	.word	0x080065b1
 8006558:	08006591 	.word	0x08006591
 800655c:	080065b1 	.word	0x080065b1
 8006560:	08006571 	.word	0x08006571
 8006564:	080065b1 	.word	0x080065b1
 8006568:	080065b1 	.word	0x080065b1
 800656c:	08006581 	.word	0x08006581
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8006570:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006572:	f043 0301 	orr.w	r3, r3, #1
 8006576:	673b      	str	r3, [r7, #112]	; 0x70
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	3301      	adds	r3, #1
 800657c:	60bb      	str	r3, [r7, #8]
 800657e:	e01a      	b.n	80065b6 <SEGGER_RTT_vprintf+0xe2>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8006580:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006582:	f043 0302 	orr.w	r3, r3, #2
 8006586:	673b      	str	r3, [r7, #112]	; 0x70
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	3301      	adds	r3, #1
 800658c:	60bb      	str	r3, [r7, #8]
 800658e:	e012      	b.n	80065b6 <SEGGER_RTT_vprintf+0xe2>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8006590:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006592:	f043 0304 	orr.w	r3, r3, #4
 8006596:	673b      	str	r3, [r7, #112]	; 0x70
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	3301      	adds	r3, #1
 800659c:	60bb      	str	r3, [r7, #8]
 800659e:	e00a      	b.n	80065b6 <SEGGER_RTT_vprintf+0xe2>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 80065a0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80065a2:	f043 0308 	orr.w	r3, r3, #8
 80065a6:	673b      	str	r3, [r7, #112]	; 0x70
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	3301      	adds	r3, #1
 80065ac:	60bb      	str	r3, [r7, #8]
 80065ae:	e002      	b.n	80065b6 <SEGGER_RTT_vprintf+0xe2>
        default:  v = 0; break;
 80065b0:	2300      	movs	r3, #0
 80065b2:	67bb      	str	r3, [r7, #120]	; 0x78
 80065b4:	bf00      	nop
        }
      } while (v);
 80065b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d1b1      	bne.n	8006520 <SEGGER_RTT_vprintf+0x4c>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 80065bc:	2300      	movs	r3, #0
 80065be:	66fb      	str	r3, [r7, #108]	; 0x6c
      do {
        c = *sFormat;
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	781b      	ldrb	r3, [r3, #0]
 80065c4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
        if ((c < '0') || (c > '9')) {
 80065c8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80065cc:	2b2f      	cmp	r3, #47	; 0x2f
 80065ce:	d912      	bls.n	80065f6 <SEGGER_RTT_vprintf+0x122>
 80065d0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80065d4:	2b39      	cmp	r3, #57	; 0x39
 80065d6:	d80e      	bhi.n	80065f6 <SEGGER_RTT_vprintf+0x122>
          break;
        }
        sFormat++;
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	3301      	adds	r3, #1
 80065dc:	60bb      	str	r3, [r7, #8]
        FieldWidth = (FieldWidth * 10u) + ((unsigned)c - '0');
 80065de:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80065e0:	4613      	mov	r3, r2
 80065e2:	009b      	lsls	r3, r3, #2
 80065e4:	4413      	add	r3, r2
 80065e6:	005b      	lsls	r3, r3, #1
 80065e8:	461a      	mov	r2, r3
 80065ea:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80065ee:	4413      	add	r3, r2
 80065f0:	3b30      	subs	r3, #48	; 0x30
 80065f2:	66fb      	str	r3, [r7, #108]	; 0x6c
        c = *sFormat;
 80065f4:	e7e4      	b.n	80065c0 <SEGGER_RTT_vprintf+0xec>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 80065f6:	2300      	movs	r3, #0
 80065f8:	677b      	str	r3, [r7, #116]	; 0x74
      c = *sFormat;
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	781b      	ldrb	r3, [r3, #0]
 80065fe:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
      if (c == '.') {
 8006602:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8006606:	2b2e      	cmp	r3, #46	; 0x2e
 8006608:	d11d      	bne.n	8006646 <SEGGER_RTT_vprintf+0x172>
        sFormat++;
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	3301      	adds	r3, #1
 800660e:	60bb      	str	r3, [r7, #8]
        do {
          c = *sFormat;
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	781b      	ldrb	r3, [r3, #0]
 8006614:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
          if ((c < '0') || (c > '9')) {
 8006618:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800661c:	2b2f      	cmp	r3, #47	; 0x2f
 800661e:	d912      	bls.n	8006646 <SEGGER_RTT_vprintf+0x172>
 8006620:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8006624:	2b39      	cmp	r3, #57	; 0x39
 8006626:	d80e      	bhi.n	8006646 <SEGGER_RTT_vprintf+0x172>
            break;
          }
          sFormat++;
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	3301      	adds	r3, #1
 800662c:	60bb      	str	r3, [r7, #8]
          NumDigits = NumDigits * 10u + ((unsigned)c - '0');
 800662e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8006630:	4613      	mov	r3, r2
 8006632:	009b      	lsls	r3, r3, #2
 8006634:	4413      	add	r3, r2
 8006636:	005b      	lsls	r3, r3, #1
 8006638:	461a      	mov	r2, r3
 800663a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800663e:	4413      	add	r3, r2
 8006640:	3b30      	subs	r3, #48	; 0x30
 8006642:	677b      	str	r3, [r7, #116]	; 0x74
          c = *sFormat;
 8006644:	e7e4      	b.n	8006610 <SEGGER_RTT_vprintf+0x13c>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	781b      	ldrb	r3, [r3, #0]
 800664a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
      do {
        if ((c == 'l') || (c == 'h')) {
 800664e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8006652:	2b6c      	cmp	r3, #108	; 0x6c
 8006654:	d003      	beq.n	800665e <SEGGER_RTT_vprintf+0x18a>
 8006656:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800665a:	2b68      	cmp	r3, #104	; 0x68
 800665c:	d107      	bne.n	800666e <SEGGER_RTT_vprintf+0x19a>
          sFormat++;
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	3301      	adds	r3, #1
 8006662:	60bb      	str	r3, [r7, #8]
          c = *sFormat;
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	781b      	ldrb	r3, [r3, #0]
 8006668:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
        if ((c == 'l') || (c == 'h')) {
 800666c:	e7ef      	b.n	800664e <SEGGER_RTT_vprintf+0x17a>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 800666e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8006672:	2b25      	cmp	r3, #37	; 0x25
 8006674:	f000 80d1 	beq.w	800681a <SEGGER_RTT_vprintf+0x346>
 8006678:	2b25      	cmp	r3, #37	; 0x25
 800667a:	f2c0 80d5 	blt.w	8006828 <SEGGER_RTT_vprintf+0x354>
 800667e:	2b78      	cmp	r3, #120	; 0x78
 8006680:	f300 80d2 	bgt.w	8006828 <SEGGER_RTT_vprintf+0x354>
 8006684:	2b58      	cmp	r3, #88	; 0x58
 8006686:	f2c0 80cf 	blt.w	8006828 <SEGGER_RTT_vprintf+0x354>
 800668a:	3b58      	subs	r3, #88	; 0x58
 800668c:	2b20      	cmp	r3, #32
 800668e:	f200 80cb 	bhi.w	8006828 <SEGGER_RTT_vprintf+0x354>
 8006692:	a201      	add	r2, pc, #4	; (adr r2, 8006698 <SEGGER_RTT_vprintf+0x1c4>)
 8006694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006698:	0800678f 	.word	0x0800678f
 800669c:	08006829 	.word	0x08006829
 80066a0:	08006829 	.word	0x08006829
 80066a4:	08006829 	.word	0x08006829
 80066a8:	08006829 	.word	0x08006829
 80066ac:	08006829 	.word	0x08006829
 80066b0:	08006829 	.word	0x08006829
 80066b4:	08006829 	.word	0x08006829
 80066b8:	08006829 	.word	0x08006829
 80066bc:	08006829 	.word	0x08006829
 80066c0:	08006829 	.word	0x08006829
 80066c4:	0800671d 	.word	0x0800671d
 80066c8:	08006743 	.word	0x08006743
 80066cc:	08006829 	.word	0x08006829
 80066d0:	08006829 	.word	0x08006829
 80066d4:	08006829 	.word	0x08006829
 80066d8:	08006829 	.word	0x08006829
 80066dc:	08006829 	.word	0x08006829
 80066e0:	08006829 	.word	0x08006829
 80066e4:	08006829 	.word	0x08006829
 80066e8:	08006829 	.word	0x08006829
 80066ec:	08006829 	.word	0x08006829
 80066f0:	08006829 	.word	0x08006829
 80066f4:	08006829 	.word	0x08006829
 80066f8:	080067f5 	.word	0x080067f5
 80066fc:	08006829 	.word	0x08006829
 8006700:	08006829 	.word	0x08006829
 8006704:	080067b5 	.word	0x080067b5
 8006708:	08006829 	.word	0x08006829
 800670c:	08006769 	.word	0x08006769
 8006710:	08006829 	.word	0x08006829
 8006714:	08006829 	.word	0x08006829
 8006718:	0800678f 	.word	0x0800678f
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	1d19      	adds	r1, r3, #4
 8006722:	687a      	ldr	r2, [r7, #4]
 8006724:	6011      	str	r1, [r2, #0]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	67bb      	str	r3, [r7, #120]	; 0x78
        c0 = (char)v;
 800672a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800672c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        _StoreChar(&BufferDesc, c0);
 8006730:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8006734:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006738:	4611      	mov	r1, r2
 800673a:	4618      	mov	r0, r3
 800673c:	f7ff fd38 	bl	80061b0 <_StoreChar>
        break;
 8006740:	e073      	b.n	800682a <SEGGER_RTT_vprintf+0x356>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	1d19      	adds	r1, r3, #4
 8006748:	687a      	ldr	r2, [r7, #4]
 800674a:	6011      	str	r1, [r2, #0]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	67bb      	str	r3, [r7, #120]	; 0x78
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8006750:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8006754:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006756:	9301      	str	r3, [sp, #4]
 8006758:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800675a:	9300      	str	r3, [sp, #0]
 800675c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800675e:	220a      	movs	r2, #10
 8006760:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8006762:	f7ff fe0f 	bl	8006384 <_PrintInt>
        break;
 8006766:	e060      	b.n	800682a <SEGGER_RTT_vprintf+0x356>
      case 'u':
        v = va_arg(*pParamList, int);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	1d19      	adds	r1, r3, #4
 800676e:	687a      	ldr	r2, [r7, #4]
 8006770:	6011      	str	r1, [r2, #0]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	67bb      	str	r3, [r7, #120]	; 0x78
        _PrintUnsigned(&BufferDesc, (unsigned)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8006776:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8006778:	f107 0050 	add.w	r0, r7, #80	; 0x50
 800677c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800677e:	9301      	str	r3, [sp, #4]
 8006780:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006782:	9300      	str	r3, [sp, #0]
 8006784:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006786:	220a      	movs	r2, #10
 8006788:	f7ff fd50 	bl	800622c <_PrintUnsigned>
        break;
 800678c:	e04d      	b.n	800682a <SEGGER_RTT_vprintf+0x356>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	1d19      	adds	r1, r3, #4
 8006794:	687a      	ldr	r2, [r7, #4]
 8006796:	6011      	str	r1, [r2, #0]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	67bb      	str	r3, [r7, #120]	; 0x78
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, NumDigits, FieldWidth, FormatFlags);
 800679c:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800679e:	f107 0050 	add.w	r0, r7, #80	; 0x50
 80067a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80067a4:	9301      	str	r3, [sp, #4]
 80067a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067a8:	9300      	str	r3, [sp, #0]
 80067aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80067ac:	2210      	movs	r2, #16
 80067ae:	f7ff fd3d 	bl	800622c <_PrintUnsigned>
        break;
 80067b2:	e03a      	b.n	800682a <SEGGER_RTT_vprintf+0x356>
      case 's':
        {
          const char * s = va_arg(*pParamList, const char *);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	1d19      	adds	r1, r3, #4
 80067ba:	687a      	ldr	r2, [r7, #4]
 80067bc:	6011      	str	r1, [r2, #0]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	66bb      	str	r3, [r7, #104]	; 0x68
          do {
            c = *s;
 80067c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80067c4:	781b      	ldrb	r3, [r3, #0]
 80067c6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            s++;
 80067ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80067cc:	3301      	adds	r3, #1
 80067ce:	66bb      	str	r3, [r7, #104]	; 0x68
            if (c == '\0') {
 80067d0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d00b      	beq.n	80067f0 <SEGGER_RTT_vprintf+0x31c>
              break;
            }
           _StoreChar(&BufferDesc, c);
 80067d8:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 80067dc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80067e0:	4611      	mov	r1, r2
 80067e2:	4618      	mov	r0, r3
 80067e4:	f7ff fce4 	bl	80061b0 <_StoreChar>
          } while (BufferDesc.ReturnValue >= 0);
 80067e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	dae9      	bge.n	80067c2 <SEGGER_RTT_vprintf+0x2ee>
        }
        break;
 80067ee:	e01c      	b.n	800682a <SEGGER_RTT_vprintf+0x356>
              break;
 80067f0:	bf00      	nop
        break;
 80067f2:	e01a      	b.n	800682a <SEGGER_RTT_vprintf+0x356>
      case 'p':
        v = va_arg(*pParamList, int);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	1d19      	adds	r1, r3, #4
 80067fa:	687a      	ldr	r2, [r7, #4]
 80067fc:	6011      	str	r1, [r2, #0]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	67bb      	str	r3, [r7, #120]	; 0x78
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, 8u, 8u, 0u);
 8006802:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8006804:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8006808:	2300      	movs	r3, #0
 800680a:	9301      	str	r3, [sp, #4]
 800680c:	2308      	movs	r3, #8
 800680e:	9300      	str	r3, [sp, #0]
 8006810:	2308      	movs	r3, #8
 8006812:	2210      	movs	r2, #16
 8006814:	f7ff fd0a 	bl	800622c <_PrintUnsigned>
        break;
 8006818:	e007      	b.n	800682a <SEGGER_RTT_vprintf+0x356>
      case '%':
        _StoreChar(&BufferDesc, '%');
 800681a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800681e:	2125      	movs	r1, #37	; 0x25
 8006820:	4618      	mov	r0, r3
 8006822:	f7ff fcc5 	bl	80061b0 <_StoreChar>
        break;
 8006826:	e000      	b.n	800682a <SEGGER_RTT_vprintf+0x356>
      default:
        break;
 8006828:	bf00      	nop
      }
      sFormat++;
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	3301      	adds	r3, #1
 800682e:	60bb      	str	r3, [r7, #8]
 8006830:	e007      	b.n	8006842 <SEGGER_RTT_vprintf+0x36e>
    } else {
      _StoreChar(&BufferDesc, c);
 8006832:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 8006836:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800683a:	4611      	mov	r1, r2
 800683c:	4618      	mov	r0, r3
 800683e:	f7ff fcb7 	bl	80061b0 <_StoreChar>
    }
  } while (BufferDesc.ReturnValue >= 0);
 8006842:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006844:	2b00      	cmp	r3, #0
 8006846:	f6bf ae56 	bge.w	80064f6 <SEGGER_RTT_vprintf+0x22>
 800684a:	e000      	b.n	800684e <SEGGER_RTT_vprintf+0x37a>
      break;
 800684c:	bf00      	nop

  if (BufferDesc.ReturnValue > 0) {
 800684e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006850:	2b00      	cmp	r3, #0
 8006852:	dd0d      	ble.n	8006870 <SEGGER_RTT_vprintf+0x39c>
    //
    // Write remaining data, if any
    //
    if (BufferDesc.Cnt != 0u) {
 8006854:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006856:	2b00      	cmp	r3, #0
 8006858:	d006      	beq.n	8006868 <SEGGER_RTT_vprintf+0x394>
      SEGGER_RTT_Write(BufferIndex, acBuffer, BufferDesc.Cnt);
 800685a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800685c:	f107 0310 	add.w	r3, r7, #16
 8006860:	4619      	mov	r1, r3
 8006862:	68f8      	ldr	r0, [r7, #12]
 8006864:	f7ff fc7e 	bl	8006164 <SEGGER_RTT_Write>
    }
    BufferDesc.ReturnValue += (int)BufferDesc.Cnt;
 8006868:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800686a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800686c:	4413      	add	r3, r2
 800686e:	65fb      	str	r3, [r7, #92]	; 0x5c
  }
  return BufferDesc.ReturnValue;
 8006870:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 8006872:	4618      	mov	r0, r3
 8006874:	3780      	adds	r7, #128	; 0x80
 8006876:	46bd      	mov	sp, r7
 8006878:	bd80      	pop	{r7, pc}
 800687a:	bf00      	nop

0800687c <SEGGER_RTT_printf>:
*          u: Print the argument as an unsigned integer
*          x: Print the argument as an hexadecimal integer
*          s: Print the string pointed to by the argument
*          p: Print the argument as an 8-digit hexadecimal integer. (Argument shall be a pointer to void.)
*/
int SEGGER_RTT_printf(unsigned BufferIndex, const char * sFormat, ...) {
 800687c:	b40e      	push	{r1, r2, r3}
 800687e:	b580      	push	{r7, lr}
 8006880:	b085      	sub	sp, #20
 8006882:	af00      	add	r7, sp, #0
 8006884:	6078      	str	r0, [r7, #4]
  int r;
  va_list ParamList;

  va_start(ParamList, sFormat);
 8006886:	f107 0320 	add.w	r3, r7, #32
 800688a:	60bb      	str	r3, [r7, #8]
  r = SEGGER_RTT_vprintf(BufferIndex, sFormat, &ParamList);
 800688c:	f107 0308 	add.w	r3, r7, #8
 8006890:	461a      	mov	r2, r3
 8006892:	69f9      	ldr	r1, [r7, #28]
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f7ff fe1d 	bl	80064d4 <SEGGER_RTT_vprintf>
 800689a:	60f8      	str	r0, [r7, #12]
  va_end(ParamList);
  return r;
 800689c:	68fb      	ldr	r3, [r7, #12]
}
 800689e:	4618      	mov	r0, r3
 80068a0:	3714      	adds	r7, #20
 80068a2:	46bd      	mov	sp, r7
 80068a4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80068a8:	b003      	add	sp, #12
 80068aa:	4770      	bx	lr

080068ac <launch_heartbeat_service>:
static uint32_t notifications = 0U;
static uint32_t count = 0U;

/* Public functions */
bool launch_heartbeat_service(void *p_params)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b086      	sub	sp, #24
 80068b0:	af02      	add	r7, sp, #8
 80068b2:	6078      	str	r0, [r7, #4]
    bool initialized = false;
 80068b4:	2300      	movs	r3, #0
 80068b6:	73fb      	strb	r3, [r7, #15]

    initialized = xTaskCreate(heartbeat_service_task, "Heartbeat", 128U, NULL, tskIDLE_PRIORITY + 4,
 80068b8:	4b0a      	ldr	r3, [pc, #40]	; (80068e4 <launch_heartbeat_service+0x38>)
 80068ba:	9301      	str	r3, [sp, #4]
 80068bc:	2304      	movs	r3, #4
 80068be:	9300      	str	r3, [sp, #0]
 80068c0:	2300      	movs	r3, #0
 80068c2:	2280      	movs	r2, #128	; 0x80
 80068c4:	4908      	ldr	r1, [pc, #32]	; (80068e8 <launch_heartbeat_service+0x3c>)
 80068c6:	4809      	ldr	r0, [pc, #36]	; (80068ec <launch_heartbeat_service+0x40>)
 80068c8:	f7fd fc15 	bl	80040f6 <xTaskCreate>
 80068cc:	4603      	mov	r3, r0
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	bf14      	ite	ne
 80068d2:	2301      	movne	r3, #1
 80068d4:	2300      	moveq	r3, #0
 80068d6:	73fb      	strb	r3, [r7, #15]
        &heartbeat_service_task_handle);
    return initialized;
 80068d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80068da:	4618      	mov	r0, r3
 80068dc:	3710      	adds	r7, #16
 80068de:	46bd      	mov	sp, r7
 80068e0:	bd80      	pop	{r7, pc}
 80068e2:	bf00      	nop
 80068e4:	20001e7c 	.word	0x20001e7c
 80068e8:	08007458 	.word	0x08007458
 80068ec:	080068f1 	.word	0x080068f1

080068f0 <heartbeat_service_task>:

/* Private functions */
static void heartbeat_service_task(void *p_params)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b082      	sub	sp, #8
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]

    for (;;)
    {
        xTaskNotifyWait(0U, 0U, &notifications, pdMS_TO_TICKS(750));
 80068f8:	f240 23ee 	movw	r3, #750	; 0x2ee
 80068fc:	4a17      	ldr	r2, [pc, #92]	; (800695c <heartbeat_service_task+0x6c>)
 80068fe:	2100      	movs	r1, #0
 8006900:	2000      	movs	r0, #0
 8006902:	f7fe fa8b 	bl	8004e1c <xTaskNotifyWait>

        HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8006906:	2201      	movs	r2, #1
 8006908:	2108      	movs	r1, #8
 800690a:	4815      	ldr	r0, [pc, #84]	; (8006960 <heartbeat_service_task+0x70>)
 800690c:	f7fa fd82 	bl	8001414 <HAL_GPIO_WritePin>
        vTaskDelay(pdMS_TO_TICKS(100U));
 8006910:	2064      	movs	r0, #100	; 0x64
 8006912:	f7fd fd3d 	bl	8004390 <vTaskDelay>
        HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8006916:	2200      	movs	r2, #0
 8006918:	2108      	movs	r1, #8
 800691a:	4811      	ldr	r0, [pc, #68]	; (8006960 <heartbeat_service_task+0x70>)
 800691c:	f7fa fd7a 	bl	8001414 <HAL_GPIO_WritePin>
        vTaskDelay(pdMS_TO_TICKS(50U));
 8006920:	2032      	movs	r0, #50	; 0x32
 8006922:	f7fd fd35 	bl	8004390 <vTaskDelay>
        HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8006926:	2201      	movs	r2, #1
 8006928:	2108      	movs	r1, #8
 800692a:	480d      	ldr	r0, [pc, #52]	; (8006960 <heartbeat_service_task+0x70>)
 800692c:	f7fa fd72 	bl	8001414 <HAL_GPIO_WritePin>
        vTaskDelay(pdMS_TO_TICKS(100U));
 8006930:	2064      	movs	r0, #100	; 0x64
 8006932:	f7fd fd2d 	bl	8004390 <vTaskDelay>
        HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8006936:	2200      	movs	r2, #0
 8006938:	2108      	movs	r1, #8
 800693a:	4809      	ldr	r0, [pc, #36]	; (8006960 <heartbeat_service_task+0x70>)
 800693c:	f7fa fd6a 	bl	8001414 <HAL_GPIO_WritePin>

        debug_printf("Heartbeat: %u: %lu seconds\n", __LINE__, count);
 8006940:	4b08      	ldr	r3, [pc, #32]	; (8006964 <heartbeat_service_task+0x74>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	2231      	movs	r2, #49	; 0x31
 8006946:	4908      	ldr	r1, [pc, #32]	; (8006968 <heartbeat_service_task+0x78>)
 8006948:	2000      	movs	r0, #0
 800694a:	f7ff ff97 	bl	800687c <SEGGER_RTT_printf>
        count++;
 800694e:	4b05      	ldr	r3, [pc, #20]	; (8006964 <heartbeat_service_task+0x74>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	3301      	adds	r3, #1
 8006954:	4a03      	ldr	r2, [pc, #12]	; (8006964 <heartbeat_service_task+0x74>)
 8006956:	6013      	str	r3, [r2, #0]
        xTaskNotifyWait(0U, 0U, &notifications, pdMS_TO_TICKS(750));
 8006958:	e7ce      	b.n	80068f8 <heartbeat_service_task+0x8>
 800695a:	bf00      	nop
 800695c:	20001e80 	.word	0x20001e80
 8006960:	48000400 	.word	0x48000400
 8006964:	20001e84 	.word	0x20001e84
 8006968:	08007464 	.word	0x08007464

0800696c <launch_timekeeper_service>:
static uint8_t digest[64] = {0U};
static uint32_t notifications = 0U;
static uint32_t count = 0U;
/* Public functions */
bool launch_timekeeper_service(void *p_params)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b086      	sub	sp, #24
 8006970:	af02      	add	r7, sp, #8
 8006972:	6078      	str	r0, [r7, #4]
    bool initialized = false;
 8006974:	2300      	movs	r3, #0
 8006976:	73fb      	strb	r3, [r7, #15]

    initialized = xTaskCreate(timekeeper_service_task, "Timekeeper", 128U, NULL, tskIDLE_PRIORITY + 4,
 8006978:	4b0a      	ldr	r3, [pc, #40]	; (80069a4 <launch_timekeeper_service+0x38>)
 800697a:	9301      	str	r3, [sp, #4]
 800697c:	2304      	movs	r3, #4
 800697e:	9300      	str	r3, [sp, #0]
 8006980:	2300      	movs	r3, #0
 8006982:	2280      	movs	r2, #128	; 0x80
 8006984:	4908      	ldr	r1, [pc, #32]	; (80069a8 <launch_timekeeper_service+0x3c>)
 8006986:	4809      	ldr	r0, [pc, #36]	; (80069ac <launch_timekeeper_service+0x40>)
 8006988:	f7fd fbb5 	bl	80040f6 <xTaskCreate>
 800698c:	4603      	mov	r3, r0
 800698e:	2b00      	cmp	r3, #0
 8006990:	bf14      	ite	ne
 8006992:	2301      	movne	r3, #1
 8006994:	2300      	moveq	r3, #0
 8006996:	73fb      	strb	r3, [r7, #15]
        &timekeeper_service_task_handle);
    return initialized;
 8006998:	7bfb      	ldrb	r3, [r7, #15]
}
 800699a:	4618      	mov	r0, r3
 800699c:	3710      	adds	r7, #16
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd80      	pop	{r7, pc}
 80069a2:	bf00      	nop
 80069a4:	20001e88 	.word	0x20001e88
 80069a8:	08007480 	.word	0x08007480
 80069ac:	080069b1 	.word	0x080069b1

080069b0 <timekeeper_service_task>:

/* Private functions */
static void timekeeper_service_task(void *p_params)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b088      	sub	sp, #32
 80069b4:	af02      	add	r7, sp, #8
 80069b6:	6078      	str	r0, [r7, #4]

    for (;;)
    {
        xTaskNotifyWait(0U, 0U, &notifications, pdMS_TO_TICKS(1000U));
 80069b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80069bc:	4a1f      	ldr	r2, [pc, #124]	; (8006a3c <timekeeper_service_task+0x8c>)
 80069be:	2100      	movs	r1, #0
 80069c0:	2000      	movs	r0, #0
 80069c2:	f7fe fa2b 	bl	8004e1c <xTaskNotifyWait>


        memset(plaintext, 0, 64);
 80069c6:	2240      	movs	r2, #64	; 0x40
 80069c8:	2100      	movs	r1, #0
 80069ca:	481d      	ldr	r0, [pc, #116]	; (8006a40 <timekeeper_service_task+0x90>)
 80069cc:	f000 f896 	bl	8006afc <memset>
        memset(digest, 0, 64);
 80069d0:	2240      	movs	r2, #64	; 0x40
 80069d2:	2100      	movs	r1, #0
 80069d4:	481b      	ldr	r0, [pc, #108]	; (8006a44 <timekeeper_service_task+0x94>)
 80069d6:	f000 f891 	bl	8006afc <memset>
        snprintf((char *)plaintext, 64, "Timekeeper: %u: %lu: ", __LINE__, count);
 80069da:	4b1b      	ldr	r3, [pc, #108]	; (8006a48 <timekeeper_service_task+0x98>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	9300      	str	r3, [sp, #0]
 80069e0:	232f      	movs	r3, #47	; 0x2f
 80069e2:	4a1a      	ldr	r2, [pc, #104]	; (8006a4c <timekeeper_service_task+0x9c>)
 80069e4:	2140      	movs	r1, #64	; 0x40
 80069e6:	4816      	ldr	r0, [pc, #88]	; (8006a40 <timekeeper_service_task+0x90>)
 80069e8:	f000 f9b4 	bl	8006d54 <sniprintf>
        snprintf((char *)digest, 64, "Timekeeper: %u: %lu: ", __LINE__, count);
 80069ec:	4b16      	ldr	r3, [pc, #88]	; (8006a48 <timekeeper_service_task+0x98>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	9300      	str	r3, [sp, #0]
 80069f2:	2330      	movs	r3, #48	; 0x30
 80069f4:	4a15      	ldr	r2, [pc, #84]	; (8006a4c <timekeeper_service_task+0x9c>)
 80069f6:	2140      	movs	r1, #64	; 0x40
 80069f8:	4812      	ldr	r0, [pc, #72]	; (8006a44 <timekeeper_service_task+0x94>)
 80069fa:	f000 f9ab 	bl	8006d54 <sniprintf>


//        mbedtls_md_info_t *hmac_info = mbedtls_md_info_from_type(MBEDTLS_MD_SHA256);
//        mbedtls_md(hmac_info, (const unsigned char *)plaintext, strlen((char *)plaintext), (unsigned char *)digest);
        uint32_t bytes_written = 0U;
 80069fe:	2300      	movs	r3, #0
 8006a00:	60fb      	str	r3, [r7, #12]
        uint32_t original_length = strlen((char *) plaintext);
 8006a02:	480f      	ldr	r0, [pc, #60]	; (8006a40 <timekeeper_service_task+0x90>)
 8006a04:	f7f9 fbe4 	bl	80001d0 <strlen>
 8006a08:	6178      	str	r0, [r7, #20]
        int32_t base64_out = 0;
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	613b      	str	r3, [r7, #16]
        (void) base64_out;

        base64_out = mbedtls_base64_encode(digest, sizeof(digest), &bytes_written, (const unsigned char*) plaintext,
 8006a0e:	f107 020c 	add.w	r2, r7, #12
 8006a12:	697b      	ldr	r3, [r7, #20]
 8006a14:	9300      	str	r3, [sp, #0]
 8006a16:	4b0a      	ldr	r3, [pc, #40]	; (8006a40 <timekeeper_service_task+0x90>)
 8006a18:	2140      	movs	r1, #64	; 0x40
 8006a1a:	480a      	ldr	r0, [pc, #40]	; (8006a44 <timekeeper_service_task+0x94>)
 8006a1c:	f7fa f970 	bl	8000d00 <mbedtls_base64_encode>
 8006a20:	6138      	str	r0, [r7, #16]
                (size_t) original_length);

        debug_printf("%s%s\n", plaintext, digest);
 8006a22:	4b08      	ldr	r3, [pc, #32]	; (8006a44 <timekeeper_service_task+0x94>)
 8006a24:	4a06      	ldr	r2, [pc, #24]	; (8006a40 <timekeeper_service_task+0x90>)
 8006a26:	490a      	ldr	r1, [pc, #40]	; (8006a50 <timekeeper_service_task+0xa0>)
 8006a28:	2000      	movs	r0, #0
 8006a2a:	f7ff ff27 	bl	800687c <SEGGER_RTT_printf>
        count++;
 8006a2e:	4b06      	ldr	r3, [pc, #24]	; (8006a48 <timekeeper_service_task+0x98>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	3301      	adds	r3, #1
 8006a34:	4a04      	ldr	r2, [pc, #16]	; (8006a48 <timekeeper_service_task+0x98>)
 8006a36:	6013      	str	r3, [r2, #0]
    {
 8006a38:	e7be      	b.n	80069b8 <timekeeper_service_task+0x8>
 8006a3a:	bf00      	nop
 8006a3c:	20001f0c 	.word	0x20001f0c
 8006a40:	20001e8c 	.word	0x20001e8c
 8006a44:	20001ecc 	.word	0x20001ecc
 8006a48:	20001f10 	.word	0x20001f10
 8006a4c:	0800748c 	.word	0x0800748c
 8006a50:	080074a4 	.word	0x080074a4

08006a54 <__errno>:
 8006a54:	4b01      	ldr	r3, [pc, #4]	; (8006a5c <__errno+0x8>)
 8006a56:	6818      	ldr	r0, [r3, #0]
 8006a58:	4770      	bx	lr
 8006a5a:	bf00      	nop
 8006a5c:	20000010 	.word	0x20000010

08006a60 <__libc_init_array>:
 8006a60:	b570      	push	{r4, r5, r6, lr}
 8006a62:	4d0d      	ldr	r5, [pc, #52]	; (8006a98 <__libc_init_array+0x38>)
 8006a64:	4c0d      	ldr	r4, [pc, #52]	; (8006a9c <__libc_init_array+0x3c>)
 8006a66:	1b64      	subs	r4, r4, r5
 8006a68:	10a4      	asrs	r4, r4, #2
 8006a6a:	2600      	movs	r6, #0
 8006a6c:	42a6      	cmp	r6, r4
 8006a6e:	d109      	bne.n	8006a84 <__libc_init_array+0x24>
 8006a70:	4d0b      	ldr	r5, [pc, #44]	; (8006aa0 <__libc_init_array+0x40>)
 8006a72:	4c0c      	ldr	r4, [pc, #48]	; (8006aa4 <__libc_init_array+0x44>)
 8006a74:	f000 fccc 	bl	8007410 <_init>
 8006a78:	1b64      	subs	r4, r4, r5
 8006a7a:	10a4      	asrs	r4, r4, #2
 8006a7c:	2600      	movs	r6, #0
 8006a7e:	42a6      	cmp	r6, r4
 8006a80:	d105      	bne.n	8006a8e <__libc_init_array+0x2e>
 8006a82:	bd70      	pop	{r4, r5, r6, pc}
 8006a84:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a88:	4798      	blx	r3
 8006a8a:	3601      	adds	r6, #1
 8006a8c:	e7ee      	b.n	8006a6c <__libc_init_array+0xc>
 8006a8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a92:	4798      	blx	r3
 8006a94:	3601      	adds	r6, #1
 8006a96:	e7f2      	b.n	8006a7e <__libc_init_array+0x1e>
 8006a98:	080075e0 	.word	0x080075e0
 8006a9c:	080075e0 	.word	0x080075e0
 8006aa0:	080075e0 	.word	0x080075e0
 8006aa4:	080075e4 	.word	0x080075e4

08006aa8 <__retarget_lock_acquire_recursive>:
 8006aa8:	4770      	bx	lr

08006aaa <__retarget_lock_release_recursive>:
 8006aaa:	4770      	bx	lr

08006aac <memcpy>:
 8006aac:	440a      	add	r2, r1
 8006aae:	4291      	cmp	r1, r2
 8006ab0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006ab4:	d100      	bne.n	8006ab8 <memcpy+0xc>
 8006ab6:	4770      	bx	lr
 8006ab8:	b510      	push	{r4, lr}
 8006aba:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006abe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006ac2:	4291      	cmp	r1, r2
 8006ac4:	d1f9      	bne.n	8006aba <memcpy+0xe>
 8006ac6:	bd10      	pop	{r4, pc}

08006ac8 <memmove>:
 8006ac8:	4288      	cmp	r0, r1
 8006aca:	b510      	push	{r4, lr}
 8006acc:	eb01 0402 	add.w	r4, r1, r2
 8006ad0:	d902      	bls.n	8006ad8 <memmove+0x10>
 8006ad2:	4284      	cmp	r4, r0
 8006ad4:	4623      	mov	r3, r4
 8006ad6:	d807      	bhi.n	8006ae8 <memmove+0x20>
 8006ad8:	1e43      	subs	r3, r0, #1
 8006ada:	42a1      	cmp	r1, r4
 8006adc:	d008      	beq.n	8006af0 <memmove+0x28>
 8006ade:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006ae2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006ae6:	e7f8      	b.n	8006ada <memmove+0x12>
 8006ae8:	4402      	add	r2, r0
 8006aea:	4601      	mov	r1, r0
 8006aec:	428a      	cmp	r2, r1
 8006aee:	d100      	bne.n	8006af2 <memmove+0x2a>
 8006af0:	bd10      	pop	{r4, pc}
 8006af2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006af6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006afa:	e7f7      	b.n	8006aec <memmove+0x24>

08006afc <memset>:
 8006afc:	4402      	add	r2, r0
 8006afe:	4603      	mov	r3, r0
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d100      	bne.n	8006b06 <memset+0xa>
 8006b04:	4770      	bx	lr
 8006b06:	f803 1b01 	strb.w	r1, [r3], #1
 8006b0a:	e7f9      	b.n	8006b00 <memset+0x4>

08006b0c <_free_r>:
 8006b0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006b0e:	2900      	cmp	r1, #0
 8006b10:	d048      	beq.n	8006ba4 <_free_r+0x98>
 8006b12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b16:	9001      	str	r0, [sp, #4]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	f1a1 0404 	sub.w	r4, r1, #4
 8006b1e:	bfb8      	it	lt
 8006b20:	18e4      	addlt	r4, r4, r3
 8006b22:	f000 f94b 	bl	8006dbc <__malloc_lock>
 8006b26:	4a20      	ldr	r2, [pc, #128]	; (8006ba8 <_free_r+0x9c>)
 8006b28:	9801      	ldr	r0, [sp, #4]
 8006b2a:	6813      	ldr	r3, [r2, #0]
 8006b2c:	4615      	mov	r5, r2
 8006b2e:	b933      	cbnz	r3, 8006b3e <_free_r+0x32>
 8006b30:	6063      	str	r3, [r4, #4]
 8006b32:	6014      	str	r4, [r2, #0]
 8006b34:	b003      	add	sp, #12
 8006b36:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006b3a:	f000 b945 	b.w	8006dc8 <__malloc_unlock>
 8006b3e:	42a3      	cmp	r3, r4
 8006b40:	d90b      	bls.n	8006b5a <_free_r+0x4e>
 8006b42:	6821      	ldr	r1, [r4, #0]
 8006b44:	1862      	adds	r2, r4, r1
 8006b46:	4293      	cmp	r3, r2
 8006b48:	bf04      	itt	eq
 8006b4a:	681a      	ldreq	r2, [r3, #0]
 8006b4c:	685b      	ldreq	r3, [r3, #4]
 8006b4e:	6063      	str	r3, [r4, #4]
 8006b50:	bf04      	itt	eq
 8006b52:	1852      	addeq	r2, r2, r1
 8006b54:	6022      	streq	r2, [r4, #0]
 8006b56:	602c      	str	r4, [r5, #0]
 8006b58:	e7ec      	b.n	8006b34 <_free_r+0x28>
 8006b5a:	461a      	mov	r2, r3
 8006b5c:	685b      	ldr	r3, [r3, #4]
 8006b5e:	b10b      	cbz	r3, 8006b64 <_free_r+0x58>
 8006b60:	42a3      	cmp	r3, r4
 8006b62:	d9fa      	bls.n	8006b5a <_free_r+0x4e>
 8006b64:	6811      	ldr	r1, [r2, #0]
 8006b66:	1855      	adds	r5, r2, r1
 8006b68:	42a5      	cmp	r5, r4
 8006b6a:	d10b      	bne.n	8006b84 <_free_r+0x78>
 8006b6c:	6824      	ldr	r4, [r4, #0]
 8006b6e:	4421      	add	r1, r4
 8006b70:	1854      	adds	r4, r2, r1
 8006b72:	42a3      	cmp	r3, r4
 8006b74:	6011      	str	r1, [r2, #0]
 8006b76:	d1dd      	bne.n	8006b34 <_free_r+0x28>
 8006b78:	681c      	ldr	r4, [r3, #0]
 8006b7a:	685b      	ldr	r3, [r3, #4]
 8006b7c:	6053      	str	r3, [r2, #4]
 8006b7e:	4421      	add	r1, r4
 8006b80:	6011      	str	r1, [r2, #0]
 8006b82:	e7d7      	b.n	8006b34 <_free_r+0x28>
 8006b84:	d902      	bls.n	8006b8c <_free_r+0x80>
 8006b86:	230c      	movs	r3, #12
 8006b88:	6003      	str	r3, [r0, #0]
 8006b8a:	e7d3      	b.n	8006b34 <_free_r+0x28>
 8006b8c:	6825      	ldr	r5, [r4, #0]
 8006b8e:	1961      	adds	r1, r4, r5
 8006b90:	428b      	cmp	r3, r1
 8006b92:	bf04      	itt	eq
 8006b94:	6819      	ldreq	r1, [r3, #0]
 8006b96:	685b      	ldreq	r3, [r3, #4]
 8006b98:	6063      	str	r3, [r4, #4]
 8006b9a:	bf04      	itt	eq
 8006b9c:	1949      	addeq	r1, r1, r5
 8006b9e:	6021      	streq	r1, [r4, #0]
 8006ba0:	6054      	str	r4, [r2, #4]
 8006ba2:	e7c7      	b.n	8006b34 <_free_r+0x28>
 8006ba4:	b003      	add	sp, #12
 8006ba6:	bd30      	pop	{r4, r5, pc}
 8006ba8:	20001f14 	.word	0x20001f14

08006bac <_malloc_r>:
 8006bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bae:	1ccd      	adds	r5, r1, #3
 8006bb0:	f025 0503 	bic.w	r5, r5, #3
 8006bb4:	3508      	adds	r5, #8
 8006bb6:	2d0c      	cmp	r5, #12
 8006bb8:	bf38      	it	cc
 8006bba:	250c      	movcc	r5, #12
 8006bbc:	2d00      	cmp	r5, #0
 8006bbe:	4606      	mov	r6, r0
 8006bc0:	db01      	blt.n	8006bc6 <_malloc_r+0x1a>
 8006bc2:	42a9      	cmp	r1, r5
 8006bc4:	d903      	bls.n	8006bce <_malloc_r+0x22>
 8006bc6:	230c      	movs	r3, #12
 8006bc8:	6033      	str	r3, [r6, #0]
 8006bca:	2000      	movs	r0, #0
 8006bcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006bce:	f000 f8f5 	bl	8006dbc <__malloc_lock>
 8006bd2:	4921      	ldr	r1, [pc, #132]	; (8006c58 <_malloc_r+0xac>)
 8006bd4:	680a      	ldr	r2, [r1, #0]
 8006bd6:	4614      	mov	r4, r2
 8006bd8:	b99c      	cbnz	r4, 8006c02 <_malloc_r+0x56>
 8006bda:	4f20      	ldr	r7, [pc, #128]	; (8006c5c <_malloc_r+0xb0>)
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	b923      	cbnz	r3, 8006bea <_malloc_r+0x3e>
 8006be0:	4621      	mov	r1, r4
 8006be2:	4630      	mov	r0, r6
 8006be4:	f000 f8a6 	bl	8006d34 <_sbrk_r>
 8006be8:	6038      	str	r0, [r7, #0]
 8006bea:	4629      	mov	r1, r5
 8006bec:	4630      	mov	r0, r6
 8006bee:	f000 f8a1 	bl	8006d34 <_sbrk_r>
 8006bf2:	1c43      	adds	r3, r0, #1
 8006bf4:	d123      	bne.n	8006c3e <_malloc_r+0x92>
 8006bf6:	230c      	movs	r3, #12
 8006bf8:	6033      	str	r3, [r6, #0]
 8006bfa:	4630      	mov	r0, r6
 8006bfc:	f000 f8e4 	bl	8006dc8 <__malloc_unlock>
 8006c00:	e7e3      	b.n	8006bca <_malloc_r+0x1e>
 8006c02:	6823      	ldr	r3, [r4, #0]
 8006c04:	1b5b      	subs	r3, r3, r5
 8006c06:	d417      	bmi.n	8006c38 <_malloc_r+0x8c>
 8006c08:	2b0b      	cmp	r3, #11
 8006c0a:	d903      	bls.n	8006c14 <_malloc_r+0x68>
 8006c0c:	6023      	str	r3, [r4, #0]
 8006c0e:	441c      	add	r4, r3
 8006c10:	6025      	str	r5, [r4, #0]
 8006c12:	e004      	b.n	8006c1e <_malloc_r+0x72>
 8006c14:	6863      	ldr	r3, [r4, #4]
 8006c16:	42a2      	cmp	r2, r4
 8006c18:	bf0c      	ite	eq
 8006c1a:	600b      	streq	r3, [r1, #0]
 8006c1c:	6053      	strne	r3, [r2, #4]
 8006c1e:	4630      	mov	r0, r6
 8006c20:	f000 f8d2 	bl	8006dc8 <__malloc_unlock>
 8006c24:	f104 000b 	add.w	r0, r4, #11
 8006c28:	1d23      	adds	r3, r4, #4
 8006c2a:	f020 0007 	bic.w	r0, r0, #7
 8006c2e:	1ac2      	subs	r2, r0, r3
 8006c30:	d0cc      	beq.n	8006bcc <_malloc_r+0x20>
 8006c32:	1a1b      	subs	r3, r3, r0
 8006c34:	50a3      	str	r3, [r4, r2]
 8006c36:	e7c9      	b.n	8006bcc <_malloc_r+0x20>
 8006c38:	4622      	mov	r2, r4
 8006c3a:	6864      	ldr	r4, [r4, #4]
 8006c3c:	e7cc      	b.n	8006bd8 <_malloc_r+0x2c>
 8006c3e:	1cc4      	adds	r4, r0, #3
 8006c40:	f024 0403 	bic.w	r4, r4, #3
 8006c44:	42a0      	cmp	r0, r4
 8006c46:	d0e3      	beq.n	8006c10 <_malloc_r+0x64>
 8006c48:	1a21      	subs	r1, r4, r0
 8006c4a:	4630      	mov	r0, r6
 8006c4c:	f000 f872 	bl	8006d34 <_sbrk_r>
 8006c50:	3001      	adds	r0, #1
 8006c52:	d1dd      	bne.n	8006c10 <_malloc_r+0x64>
 8006c54:	e7cf      	b.n	8006bf6 <_malloc_r+0x4a>
 8006c56:	bf00      	nop
 8006c58:	20001f14 	.word	0x20001f14
 8006c5c:	20001f18 	.word	0x20001f18

08006c60 <cleanup_glue>:
 8006c60:	b538      	push	{r3, r4, r5, lr}
 8006c62:	460c      	mov	r4, r1
 8006c64:	6809      	ldr	r1, [r1, #0]
 8006c66:	4605      	mov	r5, r0
 8006c68:	b109      	cbz	r1, 8006c6e <cleanup_glue+0xe>
 8006c6a:	f7ff fff9 	bl	8006c60 <cleanup_glue>
 8006c6e:	4621      	mov	r1, r4
 8006c70:	4628      	mov	r0, r5
 8006c72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006c76:	f7ff bf49 	b.w	8006b0c <_free_r>
	...

08006c7c <_reclaim_reent>:
 8006c7c:	4b2c      	ldr	r3, [pc, #176]	; (8006d30 <_reclaim_reent+0xb4>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4283      	cmp	r3, r0
 8006c82:	b570      	push	{r4, r5, r6, lr}
 8006c84:	4604      	mov	r4, r0
 8006c86:	d051      	beq.n	8006d2c <_reclaim_reent+0xb0>
 8006c88:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006c8a:	b143      	cbz	r3, 8006c9e <_reclaim_reent+0x22>
 8006c8c:	68db      	ldr	r3, [r3, #12]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d14a      	bne.n	8006d28 <_reclaim_reent+0xac>
 8006c92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c94:	6819      	ldr	r1, [r3, #0]
 8006c96:	b111      	cbz	r1, 8006c9e <_reclaim_reent+0x22>
 8006c98:	4620      	mov	r0, r4
 8006c9a:	f7ff ff37 	bl	8006b0c <_free_r>
 8006c9e:	6961      	ldr	r1, [r4, #20]
 8006ca0:	b111      	cbz	r1, 8006ca8 <_reclaim_reent+0x2c>
 8006ca2:	4620      	mov	r0, r4
 8006ca4:	f7ff ff32 	bl	8006b0c <_free_r>
 8006ca8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006caa:	b111      	cbz	r1, 8006cb2 <_reclaim_reent+0x36>
 8006cac:	4620      	mov	r0, r4
 8006cae:	f7ff ff2d 	bl	8006b0c <_free_r>
 8006cb2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006cb4:	b111      	cbz	r1, 8006cbc <_reclaim_reent+0x40>
 8006cb6:	4620      	mov	r0, r4
 8006cb8:	f7ff ff28 	bl	8006b0c <_free_r>
 8006cbc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006cbe:	b111      	cbz	r1, 8006cc6 <_reclaim_reent+0x4a>
 8006cc0:	4620      	mov	r0, r4
 8006cc2:	f7ff ff23 	bl	8006b0c <_free_r>
 8006cc6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006cc8:	b111      	cbz	r1, 8006cd0 <_reclaim_reent+0x54>
 8006cca:	4620      	mov	r0, r4
 8006ccc:	f7ff ff1e 	bl	8006b0c <_free_r>
 8006cd0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8006cd2:	b111      	cbz	r1, 8006cda <_reclaim_reent+0x5e>
 8006cd4:	4620      	mov	r0, r4
 8006cd6:	f7ff ff19 	bl	8006b0c <_free_r>
 8006cda:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006cdc:	b111      	cbz	r1, 8006ce4 <_reclaim_reent+0x68>
 8006cde:	4620      	mov	r0, r4
 8006ce0:	f7ff ff14 	bl	8006b0c <_free_r>
 8006ce4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006ce6:	b111      	cbz	r1, 8006cee <_reclaim_reent+0x72>
 8006ce8:	4620      	mov	r0, r4
 8006cea:	f7ff ff0f 	bl	8006b0c <_free_r>
 8006cee:	69a3      	ldr	r3, [r4, #24]
 8006cf0:	b1e3      	cbz	r3, 8006d2c <_reclaim_reent+0xb0>
 8006cf2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006cf4:	4620      	mov	r0, r4
 8006cf6:	4798      	blx	r3
 8006cf8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006cfa:	b1b9      	cbz	r1, 8006d2c <_reclaim_reent+0xb0>
 8006cfc:	4620      	mov	r0, r4
 8006cfe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006d02:	f7ff bfad 	b.w	8006c60 <cleanup_glue>
 8006d06:	5949      	ldr	r1, [r1, r5]
 8006d08:	b941      	cbnz	r1, 8006d1c <_reclaim_reent+0xa0>
 8006d0a:	3504      	adds	r5, #4
 8006d0c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d0e:	2d80      	cmp	r5, #128	; 0x80
 8006d10:	68d9      	ldr	r1, [r3, #12]
 8006d12:	d1f8      	bne.n	8006d06 <_reclaim_reent+0x8a>
 8006d14:	4620      	mov	r0, r4
 8006d16:	f7ff fef9 	bl	8006b0c <_free_r>
 8006d1a:	e7ba      	b.n	8006c92 <_reclaim_reent+0x16>
 8006d1c:	680e      	ldr	r6, [r1, #0]
 8006d1e:	4620      	mov	r0, r4
 8006d20:	f7ff fef4 	bl	8006b0c <_free_r>
 8006d24:	4631      	mov	r1, r6
 8006d26:	e7ef      	b.n	8006d08 <_reclaim_reent+0x8c>
 8006d28:	2500      	movs	r5, #0
 8006d2a:	e7ef      	b.n	8006d0c <_reclaim_reent+0x90>
 8006d2c:	bd70      	pop	{r4, r5, r6, pc}
 8006d2e:	bf00      	nop
 8006d30:	20000010 	.word	0x20000010

08006d34 <_sbrk_r>:
 8006d34:	b538      	push	{r3, r4, r5, lr}
 8006d36:	4d06      	ldr	r5, [pc, #24]	; (8006d50 <_sbrk_r+0x1c>)
 8006d38:	2300      	movs	r3, #0
 8006d3a:	4604      	mov	r4, r0
 8006d3c:	4608      	mov	r0, r1
 8006d3e:	602b      	str	r3, [r5, #0]
 8006d40:	f7f9 fdea 	bl	8000918 <_sbrk>
 8006d44:	1c43      	adds	r3, r0, #1
 8006d46:	d102      	bne.n	8006d4e <_sbrk_r+0x1a>
 8006d48:	682b      	ldr	r3, [r5, #0]
 8006d4a:	b103      	cbz	r3, 8006d4e <_sbrk_r+0x1a>
 8006d4c:	6023      	str	r3, [r4, #0]
 8006d4e:	bd38      	pop	{r3, r4, r5, pc}
 8006d50:	20002130 	.word	0x20002130

08006d54 <sniprintf>:
 8006d54:	b40c      	push	{r2, r3}
 8006d56:	b530      	push	{r4, r5, lr}
 8006d58:	4b17      	ldr	r3, [pc, #92]	; (8006db8 <sniprintf+0x64>)
 8006d5a:	1e0c      	subs	r4, r1, #0
 8006d5c:	681d      	ldr	r5, [r3, #0]
 8006d5e:	b09d      	sub	sp, #116	; 0x74
 8006d60:	da08      	bge.n	8006d74 <sniprintf+0x20>
 8006d62:	238b      	movs	r3, #139	; 0x8b
 8006d64:	602b      	str	r3, [r5, #0]
 8006d66:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006d6a:	b01d      	add	sp, #116	; 0x74
 8006d6c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006d70:	b002      	add	sp, #8
 8006d72:	4770      	bx	lr
 8006d74:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006d78:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006d7c:	bf14      	ite	ne
 8006d7e:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8006d82:	4623      	moveq	r3, r4
 8006d84:	9304      	str	r3, [sp, #16]
 8006d86:	9307      	str	r3, [sp, #28]
 8006d88:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006d8c:	9002      	str	r0, [sp, #8]
 8006d8e:	9006      	str	r0, [sp, #24]
 8006d90:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006d94:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006d96:	ab21      	add	r3, sp, #132	; 0x84
 8006d98:	a902      	add	r1, sp, #8
 8006d9a:	4628      	mov	r0, r5
 8006d9c:	9301      	str	r3, [sp, #4]
 8006d9e:	f000 f875 	bl	8006e8c <_svfiprintf_r>
 8006da2:	1c43      	adds	r3, r0, #1
 8006da4:	bfbc      	itt	lt
 8006da6:	238b      	movlt	r3, #139	; 0x8b
 8006da8:	602b      	strlt	r3, [r5, #0]
 8006daa:	2c00      	cmp	r4, #0
 8006dac:	d0dd      	beq.n	8006d6a <sniprintf+0x16>
 8006dae:	9b02      	ldr	r3, [sp, #8]
 8006db0:	2200      	movs	r2, #0
 8006db2:	701a      	strb	r2, [r3, #0]
 8006db4:	e7d9      	b.n	8006d6a <sniprintf+0x16>
 8006db6:	bf00      	nop
 8006db8:	20000010 	.word	0x20000010

08006dbc <__malloc_lock>:
 8006dbc:	4801      	ldr	r0, [pc, #4]	; (8006dc4 <__malloc_lock+0x8>)
 8006dbe:	f7ff be73 	b.w	8006aa8 <__retarget_lock_acquire_recursive>
 8006dc2:	bf00      	nop
 8006dc4:	20002128 	.word	0x20002128

08006dc8 <__malloc_unlock>:
 8006dc8:	4801      	ldr	r0, [pc, #4]	; (8006dd0 <__malloc_unlock+0x8>)
 8006dca:	f7ff be6e 	b.w	8006aaa <__retarget_lock_release_recursive>
 8006dce:	bf00      	nop
 8006dd0:	20002128 	.word	0x20002128

08006dd4 <__ssputs_r>:
 8006dd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006dd8:	688e      	ldr	r6, [r1, #8]
 8006dda:	429e      	cmp	r6, r3
 8006ddc:	4682      	mov	sl, r0
 8006dde:	460c      	mov	r4, r1
 8006de0:	4690      	mov	r8, r2
 8006de2:	461f      	mov	r7, r3
 8006de4:	d838      	bhi.n	8006e58 <__ssputs_r+0x84>
 8006de6:	898a      	ldrh	r2, [r1, #12]
 8006de8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006dec:	d032      	beq.n	8006e54 <__ssputs_r+0x80>
 8006dee:	6825      	ldr	r5, [r4, #0]
 8006df0:	6909      	ldr	r1, [r1, #16]
 8006df2:	eba5 0901 	sub.w	r9, r5, r1
 8006df6:	6965      	ldr	r5, [r4, #20]
 8006df8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006dfc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006e00:	3301      	adds	r3, #1
 8006e02:	444b      	add	r3, r9
 8006e04:	106d      	asrs	r5, r5, #1
 8006e06:	429d      	cmp	r5, r3
 8006e08:	bf38      	it	cc
 8006e0a:	461d      	movcc	r5, r3
 8006e0c:	0553      	lsls	r3, r2, #21
 8006e0e:	d531      	bpl.n	8006e74 <__ssputs_r+0xa0>
 8006e10:	4629      	mov	r1, r5
 8006e12:	f7ff fecb 	bl	8006bac <_malloc_r>
 8006e16:	4606      	mov	r6, r0
 8006e18:	b950      	cbnz	r0, 8006e30 <__ssputs_r+0x5c>
 8006e1a:	230c      	movs	r3, #12
 8006e1c:	f8ca 3000 	str.w	r3, [sl]
 8006e20:	89a3      	ldrh	r3, [r4, #12]
 8006e22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e26:	81a3      	strh	r3, [r4, #12]
 8006e28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006e2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e30:	6921      	ldr	r1, [r4, #16]
 8006e32:	464a      	mov	r2, r9
 8006e34:	f7ff fe3a 	bl	8006aac <memcpy>
 8006e38:	89a3      	ldrh	r3, [r4, #12]
 8006e3a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006e3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e42:	81a3      	strh	r3, [r4, #12]
 8006e44:	6126      	str	r6, [r4, #16]
 8006e46:	6165      	str	r5, [r4, #20]
 8006e48:	444e      	add	r6, r9
 8006e4a:	eba5 0509 	sub.w	r5, r5, r9
 8006e4e:	6026      	str	r6, [r4, #0]
 8006e50:	60a5      	str	r5, [r4, #8]
 8006e52:	463e      	mov	r6, r7
 8006e54:	42be      	cmp	r6, r7
 8006e56:	d900      	bls.n	8006e5a <__ssputs_r+0x86>
 8006e58:	463e      	mov	r6, r7
 8006e5a:	4632      	mov	r2, r6
 8006e5c:	6820      	ldr	r0, [r4, #0]
 8006e5e:	4641      	mov	r1, r8
 8006e60:	f7ff fe32 	bl	8006ac8 <memmove>
 8006e64:	68a3      	ldr	r3, [r4, #8]
 8006e66:	6822      	ldr	r2, [r4, #0]
 8006e68:	1b9b      	subs	r3, r3, r6
 8006e6a:	4432      	add	r2, r6
 8006e6c:	60a3      	str	r3, [r4, #8]
 8006e6e:	6022      	str	r2, [r4, #0]
 8006e70:	2000      	movs	r0, #0
 8006e72:	e7db      	b.n	8006e2c <__ssputs_r+0x58>
 8006e74:	462a      	mov	r2, r5
 8006e76:	f000 fa9d 	bl	80073b4 <_realloc_r>
 8006e7a:	4606      	mov	r6, r0
 8006e7c:	2800      	cmp	r0, #0
 8006e7e:	d1e1      	bne.n	8006e44 <__ssputs_r+0x70>
 8006e80:	6921      	ldr	r1, [r4, #16]
 8006e82:	4650      	mov	r0, sl
 8006e84:	f7ff fe42 	bl	8006b0c <_free_r>
 8006e88:	e7c7      	b.n	8006e1a <__ssputs_r+0x46>
	...

08006e8c <_svfiprintf_r>:
 8006e8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e90:	4698      	mov	r8, r3
 8006e92:	898b      	ldrh	r3, [r1, #12]
 8006e94:	061b      	lsls	r3, r3, #24
 8006e96:	b09d      	sub	sp, #116	; 0x74
 8006e98:	4607      	mov	r7, r0
 8006e9a:	460d      	mov	r5, r1
 8006e9c:	4614      	mov	r4, r2
 8006e9e:	d50e      	bpl.n	8006ebe <_svfiprintf_r+0x32>
 8006ea0:	690b      	ldr	r3, [r1, #16]
 8006ea2:	b963      	cbnz	r3, 8006ebe <_svfiprintf_r+0x32>
 8006ea4:	2140      	movs	r1, #64	; 0x40
 8006ea6:	f7ff fe81 	bl	8006bac <_malloc_r>
 8006eaa:	6028      	str	r0, [r5, #0]
 8006eac:	6128      	str	r0, [r5, #16]
 8006eae:	b920      	cbnz	r0, 8006eba <_svfiprintf_r+0x2e>
 8006eb0:	230c      	movs	r3, #12
 8006eb2:	603b      	str	r3, [r7, #0]
 8006eb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006eb8:	e0d1      	b.n	800705e <_svfiprintf_r+0x1d2>
 8006eba:	2340      	movs	r3, #64	; 0x40
 8006ebc:	616b      	str	r3, [r5, #20]
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	9309      	str	r3, [sp, #36]	; 0x24
 8006ec2:	2320      	movs	r3, #32
 8006ec4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006ec8:	f8cd 800c 	str.w	r8, [sp, #12]
 8006ecc:	2330      	movs	r3, #48	; 0x30
 8006ece:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007078 <_svfiprintf_r+0x1ec>
 8006ed2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006ed6:	f04f 0901 	mov.w	r9, #1
 8006eda:	4623      	mov	r3, r4
 8006edc:	469a      	mov	sl, r3
 8006ede:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006ee2:	b10a      	cbz	r2, 8006ee8 <_svfiprintf_r+0x5c>
 8006ee4:	2a25      	cmp	r2, #37	; 0x25
 8006ee6:	d1f9      	bne.n	8006edc <_svfiprintf_r+0x50>
 8006ee8:	ebba 0b04 	subs.w	fp, sl, r4
 8006eec:	d00b      	beq.n	8006f06 <_svfiprintf_r+0x7a>
 8006eee:	465b      	mov	r3, fp
 8006ef0:	4622      	mov	r2, r4
 8006ef2:	4629      	mov	r1, r5
 8006ef4:	4638      	mov	r0, r7
 8006ef6:	f7ff ff6d 	bl	8006dd4 <__ssputs_r>
 8006efa:	3001      	adds	r0, #1
 8006efc:	f000 80aa 	beq.w	8007054 <_svfiprintf_r+0x1c8>
 8006f00:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006f02:	445a      	add	r2, fp
 8006f04:	9209      	str	r2, [sp, #36]	; 0x24
 8006f06:	f89a 3000 	ldrb.w	r3, [sl]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	f000 80a2 	beq.w	8007054 <_svfiprintf_r+0x1c8>
 8006f10:	2300      	movs	r3, #0
 8006f12:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006f16:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006f1a:	f10a 0a01 	add.w	sl, sl, #1
 8006f1e:	9304      	str	r3, [sp, #16]
 8006f20:	9307      	str	r3, [sp, #28]
 8006f22:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006f26:	931a      	str	r3, [sp, #104]	; 0x68
 8006f28:	4654      	mov	r4, sl
 8006f2a:	2205      	movs	r2, #5
 8006f2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f30:	4851      	ldr	r0, [pc, #324]	; (8007078 <_svfiprintf_r+0x1ec>)
 8006f32:	f7f9 f955 	bl	80001e0 <memchr>
 8006f36:	9a04      	ldr	r2, [sp, #16]
 8006f38:	b9d8      	cbnz	r0, 8006f72 <_svfiprintf_r+0xe6>
 8006f3a:	06d0      	lsls	r0, r2, #27
 8006f3c:	bf44      	itt	mi
 8006f3e:	2320      	movmi	r3, #32
 8006f40:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006f44:	0711      	lsls	r1, r2, #28
 8006f46:	bf44      	itt	mi
 8006f48:	232b      	movmi	r3, #43	; 0x2b
 8006f4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006f4e:	f89a 3000 	ldrb.w	r3, [sl]
 8006f52:	2b2a      	cmp	r3, #42	; 0x2a
 8006f54:	d015      	beq.n	8006f82 <_svfiprintf_r+0xf6>
 8006f56:	9a07      	ldr	r2, [sp, #28]
 8006f58:	4654      	mov	r4, sl
 8006f5a:	2000      	movs	r0, #0
 8006f5c:	f04f 0c0a 	mov.w	ip, #10
 8006f60:	4621      	mov	r1, r4
 8006f62:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006f66:	3b30      	subs	r3, #48	; 0x30
 8006f68:	2b09      	cmp	r3, #9
 8006f6a:	d94e      	bls.n	800700a <_svfiprintf_r+0x17e>
 8006f6c:	b1b0      	cbz	r0, 8006f9c <_svfiprintf_r+0x110>
 8006f6e:	9207      	str	r2, [sp, #28]
 8006f70:	e014      	b.n	8006f9c <_svfiprintf_r+0x110>
 8006f72:	eba0 0308 	sub.w	r3, r0, r8
 8006f76:	fa09 f303 	lsl.w	r3, r9, r3
 8006f7a:	4313      	orrs	r3, r2
 8006f7c:	9304      	str	r3, [sp, #16]
 8006f7e:	46a2      	mov	sl, r4
 8006f80:	e7d2      	b.n	8006f28 <_svfiprintf_r+0x9c>
 8006f82:	9b03      	ldr	r3, [sp, #12]
 8006f84:	1d19      	adds	r1, r3, #4
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	9103      	str	r1, [sp, #12]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	bfbb      	ittet	lt
 8006f8e:	425b      	neglt	r3, r3
 8006f90:	f042 0202 	orrlt.w	r2, r2, #2
 8006f94:	9307      	strge	r3, [sp, #28]
 8006f96:	9307      	strlt	r3, [sp, #28]
 8006f98:	bfb8      	it	lt
 8006f9a:	9204      	strlt	r2, [sp, #16]
 8006f9c:	7823      	ldrb	r3, [r4, #0]
 8006f9e:	2b2e      	cmp	r3, #46	; 0x2e
 8006fa0:	d10c      	bne.n	8006fbc <_svfiprintf_r+0x130>
 8006fa2:	7863      	ldrb	r3, [r4, #1]
 8006fa4:	2b2a      	cmp	r3, #42	; 0x2a
 8006fa6:	d135      	bne.n	8007014 <_svfiprintf_r+0x188>
 8006fa8:	9b03      	ldr	r3, [sp, #12]
 8006faa:	1d1a      	adds	r2, r3, #4
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	9203      	str	r2, [sp, #12]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	bfb8      	it	lt
 8006fb4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006fb8:	3402      	adds	r4, #2
 8006fba:	9305      	str	r3, [sp, #20]
 8006fbc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007088 <_svfiprintf_r+0x1fc>
 8006fc0:	7821      	ldrb	r1, [r4, #0]
 8006fc2:	2203      	movs	r2, #3
 8006fc4:	4650      	mov	r0, sl
 8006fc6:	f7f9 f90b 	bl	80001e0 <memchr>
 8006fca:	b140      	cbz	r0, 8006fde <_svfiprintf_r+0x152>
 8006fcc:	2340      	movs	r3, #64	; 0x40
 8006fce:	eba0 000a 	sub.w	r0, r0, sl
 8006fd2:	fa03 f000 	lsl.w	r0, r3, r0
 8006fd6:	9b04      	ldr	r3, [sp, #16]
 8006fd8:	4303      	orrs	r3, r0
 8006fda:	3401      	adds	r4, #1
 8006fdc:	9304      	str	r3, [sp, #16]
 8006fde:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006fe2:	4826      	ldr	r0, [pc, #152]	; (800707c <_svfiprintf_r+0x1f0>)
 8006fe4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006fe8:	2206      	movs	r2, #6
 8006fea:	f7f9 f8f9 	bl	80001e0 <memchr>
 8006fee:	2800      	cmp	r0, #0
 8006ff0:	d038      	beq.n	8007064 <_svfiprintf_r+0x1d8>
 8006ff2:	4b23      	ldr	r3, [pc, #140]	; (8007080 <_svfiprintf_r+0x1f4>)
 8006ff4:	bb1b      	cbnz	r3, 800703e <_svfiprintf_r+0x1b2>
 8006ff6:	9b03      	ldr	r3, [sp, #12]
 8006ff8:	3307      	adds	r3, #7
 8006ffa:	f023 0307 	bic.w	r3, r3, #7
 8006ffe:	3308      	adds	r3, #8
 8007000:	9303      	str	r3, [sp, #12]
 8007002:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007004:	4433      	add	r3, r6
 8007006:	9309      	str	r3, [sp, #36]	; 0x24
 8007008:	e767      	b.n	8006eda <_svfiprintf_r+0x4e>
 800700a:	fb0c 3202 	mla	r2, ip, r2, r3
 800700e:	460c      	mov	r4, r1
 8007010:	2001      	movs	r0, #1
 8007012:	e7a5      	b.n	8006f60 <_svfiprintf_r+0xd4>
 8007014:	2300      	movs	r3, #0
 8007016:	3401      	adds	r4, #1
 8007018:	9305      	str	r3, [sp, #20]
 800701a:	4619      	mov	r1, r3
 800701c:	f04f 0c0a 	mov.w	ip, #10
 8007020:	4620      	mov	r0, r4
 8007022:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007026:	3a30      	subs	r2, #48	; 0x30
 8007028:	2a09      	cmp	r2, #9
 800702a:	d903      	bls.n	8007034 <_svfiprintf_r+0x1a8>
 800702c:	2b00      	cmp	r3, #0
 800702e:	d0c5      	beq.n	8006fbc <_svfiprintf_r+0x130>
 8007030:	9105      	str	r1, [sp, #20]
 8007032:	e7c3      	b.n	8006fbc <_svfiprintf_r+0x130>
 8007034:	fb0c 2101 	mla	r1, ip, r1, r2
 8007038:	4604      	mov	r4, r0
 800703a:	2301      	movs	r3, #1
 800703c:	e7f0      	b.n	8007020 <_svfiprintf_r+0x194>
 800703e:	ab03      	add	r3, sp, #12
 8007040:	9300      	str	r3, [sp, #0]
 8007042:	462a      	mov	r2, r5
 8007044:	4b0f      	ldr	r3, [pc, #60]	; (8007084 <_svfiprintf_r+0x1f8>)
 8007046:	a904      	add	r1, sp, #16
 8007048:	4638      	mov	r0, r7
 800704a:	f3af 8000 	nop.w
 800704e:	1c42      	adds	r2, r0, #1
 8007050:	4606      	mov	r6, r0
 8007052:	d1d6      	bne.n	8007002 <_svfiprintf_r+0x176>
 8007054:	89ab      	ldrh	r3, [r5, #12]
 8007056:	065b      	lsls	r3, r3, #25
 8007058:	f53f af2c 	bmi.w	8006eb4 <_svfiprintf_r+0x28>
 800705c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800705e:	b01d      	add	sp, #116	; 0x74
 8007060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007064:	ab03      	add	r3, sp, #12
 8007066:	9300      	str	r3, [sp, #0]
 8007068:	462a      	mov	r2, r5
 800706a:	4b06      	ldr	r3, [pc, #24]	; (8007084 <_svfiprintf_r+0x1f8>)
 800706c:	a904      	add	r1, sp, #16
 800706e:	4638      	mov	r0, r7
 8007070:	f000 f87a 	bl	8007168 <_printf_i>
 8007074:	e7eb      	b.n	800704e <_svfiprintf_r+0x1c2>
 8007076:	bf00      	nop
 8007078:	080075a4 	.word	0x080075a4
 800707c:	080075ae 	.word	0x080075ae
 8007080:	00000000 	.word	0x00000000
 8007084:	08006dd5 	.word	0x08006dd5
 8007088:	080075aa 	.word	0x080075aa

0800708c <_printf_common>:
 800708c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007090:	4616      	mov	r6, r2
 8007092:	4699      	mov	r9, r3
 8007094:	688a      	ldr	r2, [r1, #8]
 8007096:	690b      	ldr	r3, [r1, #16]
 8007098:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800709c:	4293      	cmp	r3, r2
 800709e:	bfb8      	it	lt
 80070a0:	4613      	movlt	r3, r2
 80070a2:	6033      	str	r3, [r6, #0]
 80070a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80070a8:	4607      	mov	r7, r0
 80070aa:	460c      	mov	r4, r1
 80070ac:	b10a      	cbz	r2, 80070b2 <_printf_common+0x26>
 80070ae:	3301      	adds	r3, #1
 80070b0:	6033      	str	r3, [r6, #0]
 80070b2:	6823      	ldr	r3, [r4, #0]
 80070b4:	0699      	lsls	r1, r3, #26
 80070b6:	bf42      	ittt	mi
 80070b8:	6833      	ldrmi	r3, [r6, #0]
 80070ba:	3302      	addmi	r3, #2
 80070bc:	6033      	strmi	r3, [r6, #0]
 80070be:	6825      	ldr	r5, [r4, #0]
 80070c0:	f015 0506 	ands.w	r5, r5, #6
 80070c4:	d106      	bne.n	80070d4 <_printf_common+0x48>
 80070c6:	f104 0a19 	add.w	sl, r4, #25
 80070ca:	68e3      	ldr	r3, [r4, #12]
 80070cc:	6832      	ldr	r2, [r6, #0]
 80070ce:	1a9b      	subs	r3, r3, r2
 80070d0:	42ab      	cmp	r3, r5
 80070d2:	dc26      	bgt.n	8007122 <_printf_common+0x96>
 80070d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80070d8:	1e13      	subs	r3, r2, #0
 80070da:	6822      	ldr	r2, [r4, #0]
 80070dc:	bf18      	it	ne
 80070de:	2301      	movne	r3, #1
 80070e0:	0692      	lsls	r2, r2, #26
 80070e2:	d42b      	bmi.n	800713c <_printf_common+0xb0>
 80070e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80070e8:	4649      	mov	r1, r9
 80070ea:	4638      	mov	r0, r7
 80070ec:	47c0      	blx	r8
 80070ee:	3001      	adds	r0, #1
 80070f0:	d01e      	beq.n	8007130 <_printf_common+0xa4>
 80070f2:	6823      	ldr	r3, [r4, #0]
 80070f4:	68e5      	ldr	r5, [r4, #12]
 80070f6:	6832      	ldr	r2, [r6, #0]
 80070f8:	f003 0306 	and.w	r3, r3, #6
 80070fc:	2b04      	cmp	r3, #4
 80070fe:	bf08      	it	eq
 8007100:	1aad      	subeq	r5, r5, r2
 8007102:	68a3      	ldr	r3, [r4, #8]
 8007104:	6922      	ldr	r2, [r4, #16]
 8007106:	bf0c      	ite	eq
 8007108:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800710c:	2500      	movne	r5, #0
 800710e:	4293      	cmp	r3, r2
 8007110:	bfc4      	itt	gt
 8007112:	1a9b      	subgt	r3, r3, r2
 8007114:	18ed      	addgt	r5, r5, r3
 8007116:	2600      	movs	r6, #0
 8007118:	341a      	adds	r4, #26
 800711a:	42b5      	cmp	r5, r6
 800711c:	d11a      	bne.n	8007154 <_printf_common+0xc8>
 800711e:	2000      	movs	r0, #0
 8007120:	e008      	b.n	8007134 <_printf_common+0xa8>
 8007122:	2301      	movs	r3, #1
 8007124:	4652      	mov	r2, sl
 8007126:	4649      	mov	r1, r9
 8007128:	4638      	mov	r0, r7
 800712a:	47c0      	blx	r8
 800712c:	3001      	adds	r0, #1
 800712e:	d103      	bne.n	8007138 <_printf_common+0xac>
 8007130:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007134:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007138:	3501      	adds	r5, #1
 800713a:	e7c6      	b.n	80070ca <_printf_common+0x3e>
 800713c:	18e1      	adds	r1, r4, r3
 800713e:	1c5a      	adds	r2, r3, #1
 8007140:	2030      	movs	r0, #48	; 0x30
 8007142:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007146:	4422      	add	r2, r4
 8007148:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800714c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007150:	3302      	adds	r3, #2
 8007152:	e7c7      	b.n	80070e4 <_printf_common+0x58>
 8007154:	2301      	movs	r3, #1
 8007156:	4622      	mov	r2, r4
 8007158:	4649      	mov	r1, r9
 800715a:	4638      	mov	r0, r7
 800715c:	47c0      	blx	r8
 800715e:	3001      	adds	r0, #1
 8007160:	d0e6      	beq.n	8007130 <_printf_common+0xa4>
 8007162:	3601      	adds	r6, #1
 8007164:	e7d9      	b.n	800711a <_printf_common+0x8e>
	...

08007168 <_printf_i>:
 8007168:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800716c:	460c      	mov	r4, r1
 800716e:	4691      	mov	r9, r2
 8007170:	7e27      	ldrb	r7, [r4, #24]
 8007172:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007174:	2f78      	cmp	r7, #120	; 0x78
 8007176:	4680      	mov	r8, r0
 8007178:	469a      	mov	sl, r3
 800717a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800717e:	d807      	bhi.n	8007190 <_printf_i+0x28>
 8007180:	2f62      	cmp	r7, #98	; 0x62
 8007182:	d80a      	bhi.n	800719a <_printf_i+0x32>
 8007184:	2f00      	cmp	r7, #0
 8007186:	f000 80d8 	beq.w	800733a <_printf_i+0x1d2>
 800718a:	2f58      	cmp	r7, #88	; 0x58
 800718c:	f000 80a3 	beq.w	80072d6 <_printf_i+0x16e>
 8007190:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007194:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007198:	e03a      	b.n	8007210 <_printf_i+0xa8>
 800719a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800719e:	2b15      	cmp	r3, #21
 80071a0:	d8f6      	bhi.n	8007190 <_printf_i+0x28>
 80071a2:	a001      	add	r0, pc, #4	; (adr r0, 80071a8 <_printf_i+0x40>)
 80071a4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80071a8:	08007201 	.word	0x08007201
 80071ac:	08007215 	.word	0x08007215
 80071b0:	08007191 	.word	0x08007191
 80071b4:	08007191 	.word	0x08007191
 80071b8:	08007191 	.word	0x08007191
 80071bc:	08007191 	.word	0x08007191
 80071c0:	08007215 	.word	0x08007215
 80071c4:	08007191 	.word	0x08007191
 80071c8:	08007191 	.word	0x08007191
 80071cc:	08007191 	.word	0x08007191
 80071d0:	08007191 	.word	0x08007191
 80071d4:	08007321 	.word	0x08007321
 80071d8:	08007245 	.word	0x08007245
 80071dc:	08007303 	.word	0x08007303
 80071e0:	08007191 	.word	0x08007191
 80071e4:	08007191 	.word	0x08007191
 80071e8:	08007343 	.word	0x08007343
 80071ec:	08007191 	.word	0x08007191
 80071f0:	08007245 	.word	0x08007245
 80071f4:	08007191 	.word	0x08007191
 80071f8:	08007191 	.word	0x08007191
 80071fc:	0800730b 	.word	0x0800730b
 8007200:	680b      	ldr	r3, [r1, #0]
 8007202:	1d1a      	adds	r2, r3, #4
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	600a      	str	r2, [r1, #0]
 8007208:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800720c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007210:	2301      	movs	r3, #1
 8007212:	e0a3      	b.n	800735c <_printf_i+0x1f4>
 8007214:	6825      	ldr	r5, [r4, #0]
 8007216:	6808      	ldr	r0, [r1, #0]
 8007218:	062e      	lsls	r6, r5, #24
 800721a:	f100 0304 	add.w	r3, r0, #4
 800721e:	d50a      	bpl.n	8007236 <_printf_i+0xce>
 8007220:	6805      	ldr	r5, [r0, #0]
 8007222:	600b      	str	r3, [r1, #0]
 8007224:	2d00      	cmp	r5, #0
 8007226:	da03      	bge.n	8007230 <_printf_i+0xc8>
 8007228:	232d      	movs	r3, #45	; 0x2d
 800722a:	426d      	negs	r5, r5
 800722c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007230:	485e      	ldr	r0, [pc, #376]	; (80073ac <_printf_i+0x244>)
 8007232:	230a      	movs	r3, #10
 8007234:	e019      	b.n	800726a <_printf_i+0x102>
 8007236:	f015 0f40 	tst.w	r5, #64	; 0x40
 800723a:	6805      	ldr	r5, [r0, #0]
 800723c:	600b      	str	r3, [r1, #0]
 800723e:	bf18      	it	ne
 8007240:	b22d      	sxthne	r5, r5
 8007242:	e7ef      	b.n	8007224 <_printf_i+0xbc>
 8007244:	680b      	ldr	r3, [r1, #0]
 8007246:	6825      	ldr	r5, [r4, #0]
 8007248:	1d18      	adds	r0, r3, #4
 800724a:	6008      	str	r0, [r1, #0]
 800724c:	0628      	lsls	r0, r5, #24
 800724e:	d501      	bpl.n	8007254 <_printf_i+0xec>
 8007250:	681d      	ldr	r5, [r3, #0]
 8007252:	e002      	b.n	800725a <_printf_i+0xf2>
 8007254:	0669      	lsls	r1, r5, #25
 8007256:	d5fb      	bpl.n	8007250 <_printf_i+0xe8>
 8007258:	881d      	ldrh	r5, [r3, #0]
 800725a:	4854      	ldr	r0, [pc, #336]	; (80073ac <_printf_i+0x244>)
 800725c:	2f6f      	cmp	r7, #111	; 0x6f
 800725e:	bf0c      	ite	eq
 8007260:	2308      	moveq	r3, #8
 8007262:	230a      	movne	r3, #10
 8007264:	2100      	movs	r1, #0
 8007266:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800726a:	6866      	ldr	r6, [r4, #4]
 800726c:	60a6      	str	r6, [r4, #8]
 800726e:	2e00      	cmp	r6, #0
 8007270:	bfa2      	ittt	ge
 8007272:	6821      	ldrge	r1, [r4, #0]
 8007274:	f021 0104 	bicge.w	r1, r1, #4
 8007278:	6021      	strge	r1, [r4, #0]
 800727a:	b90d      	cbnz	r5, 8007280 <_printf_i+0x118>
 800727c:	2e00      	cmp	r6, #0
 800727e:	d04d      	beq.n	800731c <_printf_i+0x1b4>
 8007280:	4616      	mov	r6, r2
 8007282:	fbb5 f1f3 	udiv	r1, r5, r3
 8007286:	fb03 5711 	mls	r7, r3, r1, r5
 800728a:	5dc7      	ldrb	r7, [r0, r7]
 800728c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007290:	462f      	mov	r7, r5
 8007292:	42bb      	cmp	r3, r7
 8007294:	460d      	mov	r5, r1
 8007296:	d9f4      	bls.n	8007282 <_printf_i+0x11a>
 8007298:	2b08      	cmp	r3, #8
 800729a:	d10b      	bne.n	80072b4 <_printf_i+0x14c>
 800729c:	6823      	ldr	r3, [r4, #0]
 800729e:	07df      	lsls	r7, r3, #31
 80072a0:	d508      	bpl.n	80072b4 <_printf_i+0x14c>
 80072a2:	6923      	ldr	r3, [r4, #16]
 80072a4:	6861      	ldr	r1, [r4, #4]
 80072a6:	4299      	cmp	r1, r3
 80072a8:	bfde      	ittt	le
 80072aa:	2330      	movle	r3, #48	; 0x30
 80072ac:	f806 3c01 	strble.w	r3, [r6, #-1]
 80072b0:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80072b4:	1b92      	subs	r2, r2, r6
 80072b6:	6122      	str	r2, [r4, #16]
 80072b8:	f8cd a000 	str.w	sl, [sp]
 80072bc:	464b      	mov	r3, r9
 80072be:	aa03      	add	r2, sp, #12
 80072c0:	4621      	mov	r1, r4
 80072c2:	4640      	mov	r0, r8
 80072c4:	f7ff fee2 	bl	800708c <_printf_common>
 80072c8:	3001      	adds	r0, #1
 80072ca:	d14c      	bne.n	8007366 <_printf_i+0x1fe>
 80072cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80072d0:	b004      	add	sp, #16
 80072d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072d6:	4835      	ldr	r0, [pc, #212]	; (80073ac <_printf_i+0x244>)
 80072d8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80072dc:	6823      	ldr	r3, [r4, #0]
 80072de:	680e      	ldr	r6, [r1, #0]
 80072e0:	061f      	lsls	r7, r3, #24
 80072e2:	f856 5b04 	ldr.w	r5, [r6], #4
 80072e6:	600e      	str	r6, [r1, #0]
 80072e8:	d514      	bpl.n	8007314 <_printf_i+0x1ac>
 80072ea:	07d9      	lsls	r1, r3, #31
 80072ec:	bf44      	itt	mi
 80072ee:	f043 0320 	orrmi.w	r3, r3, #32
 80072f2:	6023      	strmi	r3, [r4, #0]
 80072f4:	b91d      	cbnz	r5, 80072fe <_printf_i+0x196>
 80072f6:	6823      	ldr	r3, [r4, #0]
 80072f8:	f023 0320 	bic.w	r3, r3, #32
 80072fc:	6023      	str	r3, [r4, #0]
 80072fe:	2310      	movs	r3, #16
 8007300:	e7b0      	b.n	8007264 <_printf_i+0xfc>
 8007302:	6823      	ldr	r3, [r4, #0]
 8007304:	f043 0320 	orr.w	r3, r3, #32
 8007308:	6023      	str	r3, [r4, #0]
 800730a:	2378      	movs	r3, #120	; 0x78
 800730c:	4828      	ldr	r0, [pc, #160]	; (80073b0 <_printf_i+0x248>)
 800730e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007312:	e7e3      	b.n	80072dc <_printf_i+0x174>
 8007314:	065e      	lsls	r6, r3, #25
 8007316:	bf48      	it	mi
 8007318:	b2ad      	uxthmi	r5, r5
 800731a:	e7e6      	b.n	80072ea <_printf_i+0x182>
 800731c:	4616      	mov	r6, r2
 800731e:	e7bb      	b.n	8007298 <_printf_i+0x130>
 8007320:	680b      	ldr	r3, [r1, #0]
 8007322:	6826      	ldr	r6, [r4, #0]
 8007324:	6960      	ldr	r0, [r4, #20]
 8007326:	1d1d      	adds	r5, r3, #4
 8007328:	600d      	str	r5, [r1, #0]
 800732a:	0635      	lsls	r5, r6, #24
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	d501      	bpl.n	8007334 <_printf_i+0x1cc>
 8007330:	6018      	str	r0, [r3, #0]
 8007332:	e002      	b.n	800733a <_printf_i+0x1d2>
 8007334:	0671      	lsls	r1, r6, #25
 8007336:	d5fb      	bpl.n	8007330 <_printf_i+0x1c8>
 8007338:	8018      	strh	r0, [r3, #0]
 800733a:	2300      	movs	r3, #0
 800733c:	6123      	str	r3, [r4, #16]
 800733e:	4616      	mov	r6, r2
 8007340:	e7ba      	b.n	80072b8 <_printf_i+0x150>
 8007342:	680b      	ldr	r3, [r1, #0]
 8007344:	1d1a      	adds	r2, r3, #4
 8007346:	600a      	str	r2, [r1, #0]
 8007348:	681e      	ldr	r6, [r3, #0]
 800734a:	6862      	ldr	r2, [r4, #4]
 800734c:	2100      	movs	r1, #0
 800734e:	4630      	mov	r0, r6
 8007350:	f7f8 ff46 	bl	80001e0 <memchr>
 8007354:	b108      	cbz	r0, 800735a <_printf_i+0x1f2>
 8007356:	1b80      	subs	r0, r0, r6
 8007358:	6060      	str	r0, [r4, #4]
 800735a:	6863      	ldr	r3, [r4, #4]
 800735c:	6123      	str	r3, [r4, #16]
 800735e:	2300      	movs	r3, #0
 8007360:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007364:	e7a8      	b.n	80072b8 <_printf_i+0x150>
 8007366:	6923      	ldr	r3, [r4, #16]
 8007368:	4632      	mov	r2, r6
 800736a:	4649      	mov	r1, r9
 800736c:	4640      	mov	r0, r8
 800736e:	47d0      	blx	sl
 8007370:	3001      	adds	r0, #1
 8007372:	d0ab      	beq.n	80072cc <_printf_i+0x164>
 8007374:	6823      	ldr	r3, [r4, #0]
 8007376:	079b      	lsls	r3, r3, #30
 8007378:	d413      	bmi.n	80073a2 <_printf_i+0x23a>
 800737a:	68e0      	ldr	r0, [r4, #12]
 800737c:	9b03      	ldr	r3, [sp, #12]
 800737e:	4298      	cmp	r0, r3
 8007380:	bfb8      	it	lt
 8007382:	4618      	movlt	r0, r3
 8007384:	e7a4      	b.n	80072d0 <_printf_i+0x168>
 8007386:	2301      	movs	r3, #1
 8007388:	4632      	mov	r2, r6
 800738a:	4649      	mov	r1, r9
 800738c:	4640      	mov	r0, r8
 800738e:	47d0      	blx	sl
 8007390:	3001      	adds	r0, #1
 8007392:	d09b      	beq.n	80072cc <_printf_i+0x164>
 8007394:	3501      	adds	r5, #1
 8007396:	68e3      	ldr	r3, [r4, #12]
 8007398:	9903      	ldr	r1, [sp, #12]
 800739a:	1a5b      	subs	r3, r3, r1
 800739c:	42ab      	cmp	r3, r5
 800739e:	dcf2      	bgt.n	8007386 <_printf_i+0x21e>
 80073a0:	e7eb      	b.n	800737a <_printf_i+0x212>
 80073a2:	2500      	movs	r5, #0
 80073a4:	f104 0619 	add.w	r6, r4, #25
 80073a8:	e7f5      	b.n	8007396 <_printf_i+0x22e>
 80073aa:	bf00      	nop
 80073ac:	080075b5 	.word	0x080075b5
 80073b0:	080075c6 	.word	0x080075c6

080073b4 <_realloc_r>:
 80073b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073b6:	4607      	mov	r7, r0
 80073b8:	4614      	mov	r4, r2
 80073ba:	460e      	mov	r6, r1
 80073bc:	b921      	cbnz	r1, 80073c8 <_realloc_r+0x14>
 80073be:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80073c2:	4611      	mov	r1, r2
 80073c4:	f7ff bbf2 	b.w	8006bac <_malloc_r>
 80073c8:	b922      	cbnz	r2, 80073d4 <_realloc_r+0x20>
 80073ca:	f7ff fb9f 	bl	8006b0c <_free_r>
 80073ce:	4625      	mov	r5, r4
 80073d0:	4628      	mov	r0, r5
 80073d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80073d4:	f000 f814 	bl	8007400 <_malloc_usable_size_r>
 80073d8:	42a0      	cmp	r0, r4
 80073da:	d20f      	bcs.n	80073fc <_realloc_r+0x48>
 80073dc:	4621      	mov	r1, r4
 80073de:	4638      	mov	r0, r7
 80073e0:	f7ff fbe4 	bl	8006bac <_malloc_r>
 80073e4:	4605      	mov	r5, r0
 80073e6:	2800      	cmp	r0, #0
 80073e8:	d0f2      	beq.n	80073d0 <_realloc_r+0x1c>
 80073ea:	4631      	mov	r1, r6
 80073ec:	4622      	mov	r2, r4
 80073ee:	f7ff fb5d 	bl	8006aac <memcpy>
 80073f2:	4631      	mov	r1, r6
 80073f4:	4638      	mov	r0, r7
 80073f6:	f7ff fb89 	bl	8006b0c <_free_r>
 80073fa:	e7e9      	b.n	80073d0 <_realloc_r+0x1c>
 80073fc:	4635      	mov	r5, r6
 80073fe:	e7e7      	b.n	80073d0 <_realloc_r+0x1c>

08007400 <_malloc_usable_size_r>:
 8007400:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007404:	1f18      	subs	r0, r3, #4
 8007406:	2b00      	cmp	r3, #0
 8007408:	bfbc      	itt	lt
 800740a:	580b      	ldrlt	r3, [r1, r0]
 800740c:	18c0      	addlt	r0, r0, r3
 800740e:	4770      	bx	lr

08007410 <_init>:
 8007410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007412:	bf00      	nop
 8007414:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007416:	bc08      	pop	{r3}
 8007418:	469e      	mov	lr, r3
 800741a:	4770      	bx	lr

0800741c <_fini>:
 800741c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800741e:	bf00      	nop
 8007420:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007422:	bc08      	pop	{r3}
 8007424:	469e      	mov	lr, r3
 8007426:	4770      	bx	lr
